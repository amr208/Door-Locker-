
Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002538  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00800060  00002538  000025cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800178  00800178  000026e4  2**0
                  ALLOC
  3 .stab         0000297c  00000000  00000000  000026e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014d9  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00006539  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d1  00000000  00000000  000066b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002010  00000000  00000000  0000688a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001161  00000000  00000000  0000889a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001003  00000000  00000000  000099fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000aa00  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002be  00000000  00000000  0000aba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000090e  00000000  00000000  0000ae5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b76c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 16 0b 	jmp	0x162c	; 0x162c <__vector_4>
      14:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 b0 0a 	jmp	0x1560	; 0x1560 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 7d 0a 	jmp	0x14fa	; 0x14fa <__vector_9>
      28:	0c 94 4a 0a 	jmp	0x1494	; 0x1494 <__vector_10>
      2c:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e3       	ldi	r30, 0x38	; 56
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 38       	cpi	r26, 0x8A	; 138
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 70 07 	call	0xee0	; 0xee0 <main>
      8a:	0c 94 9a 12 	jmp	0x2534	; 0x2534 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 63 12 	jmp	0x24c6	; 0x24c6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7f 12 	jmp	0x24fe	; 0x24fe <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8b 12 	jmp	0x2516	; 0x2516 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8b 12 	jmp	0x2516	; 0x2516 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 63 12 	jmp	0x24c6	; 0x24c6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7f 12 	jmp	0x24fe	; 0x24fe <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 8b 12 	jmp	0x2516	; 0x2516 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 8b 12 	jmp	0x2516	; 0x2516 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 8b 12 	jmp	0x2516	; 0x2516 <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 6c 12 	jmp	0x24d8	; 0x24d8 <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 88 12 	jmp	0x2510	; 0x2510 <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 73 12 	jmp	0x24e6	; 0x24e6 <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 8f 12 	jmp	0x251e	; 0x251e <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	e8 59       	subi	r30, 0x98	; 152
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <I2C_init>:

#include "I2C.h"
#include "common_macros.h"
#include <avr/io.h>
void I2C_init(I2C_Config * I2CPtr)
{
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <I2C_init+0x6>
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	9a 83       	std	Y+2, r25	; 0x02
     cac:	89 83       	std	Y+1, r24	; 0x01
	if (I2CPtr -> CPU_frequency == CPU_16MHZ) {
     cae:	e9 81       	ldd	r30, Y+1	; 0x01
     cb0:	fa 81       	ldd	r31, Y+2	; 0x02
     cb2:	80 81       	ld	r24, Z
     cb4:	88 23       	and	r24, r24
     cb6:	c9 f4       	brne	.+50     	; 0xcea <I2C_init+0x4a>
		if (I2CPtr -> I2C_clockSpeed == I2C_100KHZ)
     cb8:	e9 81       	ldd	r30, Y+1	; 0x01
     cba:	fa 81       	ldd	r31, Y+2	; 0x02
     cbc:	81 81       	ldd	r24, Z+1	; 0x01
     cbe:	88 23       	and	r24, r24
     cc0:	41 f4       	brne	.+16     	; 0xcd2 <I2C_init+0x32>
		{
			TWBR = 0x48;
     cc2:	e0 e2       	ldi	r30, 0x20	; 32
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	88 e4       	ldi	r24, 0x48	; 72
     cc8:	80 83       	st	Z, r24
			TWSR = 0x00;
     cca:	e1 e2       	ldi	r30, 0x21	; 33
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	10 82       	st	Z, r1
     cd0:	0c c0       	rjmp	.+24     	; 0xcea <I2C_init+0x4a>
		}
		else if (I2CPtr -> I2C_clockSpeed == I2C_400KHZ)
     cd2:	e9 81       	ldd	r30, Y+1	; 0x01
     cd4:	fa 81       	ldd	r31, Y+2	; 0x02
     cd6:	81 81       	ldd	r24, Z+1	; 0x01
     cd8:	81 30       	cpi	r24, 0x01	; 1
     cda:	39 f4       	brne	.+14     	; 0xcea <I2C_init+0x4a>
		{
			TWBR = 0x0C;
     cdc:	e0 e2       	ldi	r30, 0x20	; 32
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	8c e0       	ldi	r24, 0x0C	; 12
     ce2:	80 83       	st	Z, r24
			TWSR = 0x00;
     ce4:	e1 e2       	ldi	r30, 0x21	; 33
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	10 82       	st	Z, r1
		}
	}

	if (I2CPtr -> CPU_frequency == CPU_8MHZ) {
     cea:	e9 81       	ldd	r30, Y+1	; 0x01
     cec:	fa 81       	ldd	r31, Y+2	; 0x02
     cee:	80 81       	ld	r24, Z
     cf0:	81 30       	cpi	r24, 0x01	; 1
     cf2:	c9 f4       	brne	.+50     	; 0xd26 <I2C_init+0x86>
		if (I2CPtr -> I2C_clockSpeed == I2C_100KHZ)
     cf4:	e9 81       	ldd	r30, Y+1	; 0x01
     cf6:	fa 81       	ldd	r31, Y+2	; 0x02
     cf8:	81 81       	ldd	r24, Z+1	; 0x01
     cfa:	88 23       	and	r24, r24
     cfc:	41 f4       	brne	.+16     	; 0xd0e <I2C_init+0x6e>
		{
			TWBR = 0x20;
     cfe:	e0 e2       	ldi	r30, 0x20	; 32
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 e2       	ldi	r24, 0x20	; 32
     d04:	80 83       	st	Z, r24
			TWSR = 0x00;
     d06:	e1 e2       	ldi	r30, 0x21	; 33
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	10 82       	st	Z, r1
     d0c:	0c c0       	rjmp	.+24     	; 0xd26 <I2C_init+0x86>
		}
		else if (I2CPtr -> I2C_clockSpeed == I2C_400KHZ)
     d0e:	e9 81       	ldd	r30, Y+1	; 0x01
     d10:	fa 81       	ldd	r31, Y+2	; 0x02
     d12:	81 81       	ldd	r24, Z+1	; 0x01
     d14:	81 30       	cpi	r24, 0x01	; 1
     d16:	39 f4       	brne	.+14     	; 0xd26 <I2C_init+0x86>
		{
			TWBR = 0x02;
     d18:	e0 e2       	ldi	r30, 0x20	; 32
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	82 e0       	ldi	r24, 0x02	; 2
     d1e:	80 83       	st	Z, r24
			TWSR = 0x00;
     d20:	e1 e2       	ldi	r30, 0x21	; 33
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	10 82       	st	Z, r1
		}
	}

	if (I2CPtr -> CPU_frequency == CPU_1MHZ) {
     d26:	e9 81       	ldd	r30, Y+1	; 0x01
     d28:	fa 81       	ldd	r31, Y+2	; 0x02
     d2a:	80 81       	ld	r24, Z
     d2c:	82 30       	cpi	r24, 0x02	; 2
     d2e:	d9 f4       	brne	.+54     	; 0xd66 <I2C_init+0xc6>
		if (I2CPtr -> I2C_clockSpeed == I2C_100KHZ)
     d30:	e9 81       	ldd	r30, Y+1	; 0x01
     d32:	fa 81       	ldd	r31, Y+2	; 0x02
     d34:	81 81       	ldd	r24, Z+1	; 0x01
     d36:	88 23       	and	r24, r24
     d38:	49 f4       	brne	.+18     	; 0xd4c <I2C_init+0xac>
		{
			TWBR = 0x03;
     d3a:	e0 e2       	ldi	r30, 0x20	; 32
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	83 e0       	ldi	r24, 0x03	; 3
     d40:	80 83       	st	Z, r24
			TWSR = 0x01;
     d42:	e1 e2       	ldi	r30, 0x21	; 33
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	80 83       	st	Z, r24
     d4a:	0d c0       	rjmp	.+26     	; 0xd66 <I2C_init+0xc6>
		}
		else if (I2CPtr -> I2C_clockSpeed == I2C_400KHZ)
     d4c:	e9 81       	ldd	r30, Y+1	; 0x01
     d4e:	fa 81       	ldd	r31, Y+2	; 0x02
     d50:	81 81       	ldd	r24, Z+1	; 0x01
     d52:	81 30       	cpi	r24, 0x01	; 1
     d54:	41 f4       	brne	.+16     	; 0xd66 <I2C_init+0xc6>
		{
			TWBR = 0x03;
     d56:	e0 e2       	ldi	r30, 0x20	; 32
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	80 83       	st	Z, r24
			TWSR = 0x01;
     d5e:	e1 e2       	ldi	r30, 0x21	; 33
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	80 83       	st	Z, r24
	}


    /* Two Wire Bus address my address if any master device want to call me
       General Call Recognition: Off */
	TWAR = (I2CPtr -> deviceAddress >> 1);
     d66:	a2 e2       	ldi	r26, 0x22	; 34
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	e9 81       	ldd	r30, Y+1	; 0x01
     d6c:	fa 81       	ldd	r31, Y+2	; 0x02
     d6e:	82 81       	ldd	r24, Z+2	; 0x02
     d70:	86 95       	lsr	r24
     d72:	8c 93       	st	X, r24

    TWCR = (1<<TWEN); /* enable TWI */
     d74:	e6 e5       	ldi	r30, 0x56	; 86
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	84 e0       	ldi	r24, 0x04	; 4
     d7a:	80 83       	st	Z, r24
}
     d7c:	0f 90       	pop	r0
     d7e:	0f 90       	pop	r0
     d80:	cf 91       	pop	r28
     d82:	df 91       	pop	r29
     d84:	08 95       	ret

00000d86 <I2C_start>:

void I2C_start(void)
{
     d86:	df 93       	push	r29
     d88:	cf 93       	push	r28
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     d8e:	e6 e5       	ldi	r30, 0x56	; 86
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	84 ea       	ldi	r24, 0xA4	; 164
     d94:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     d96:	e6 e5       	ldi	r30, 0x56	; 86
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	88 23       	and	r24, r24
     d9e:	dc f7       	brge	.-10     	; 0xd96 <I2C_start+0x10>
}
     da0:	cf 91       	pop	r28
     da2:	df 91       	pop	r29
     da4:	08 95       	ret

00000da6 <I2C_stop>:

void I2C_stop(void)
{
     da6:	df 93       	push	r29
     da8:	cf 93       	push	r28
     daa:	cd b7       	in	r28, 0x3d	; 61
     dac:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     dae:	e6 e5       	ldi	r30, 0x56	; 86
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	84 e9       	ldi	r24, 0x94	; 148
     db4:	80 83       	st	Z, r24
}
     db6:	cf 91       	pop	r28
     db8:	df 91       	pop	r29
     dba:	08 95       	ret

00000dbc <I2C_writeByte>:

void I2C_writeByte(uint8_t data)
{
     dbc:	df 93       	push	r29
     dbe:	cf 93       	push	r28
     dc0:	0f 92       	push	r0
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
     dc6:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
     dc8:	e3 e2       	ldi	r30, 0x23	; 35
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
     dce:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
     dd0:	e6 e5       	ldi	r30, 0x56	; 86
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	84 e8       	ldi	r24, 0x84	; 132
     dd6:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     dd8:	e6 e5       	ldi	r30, 0x56	; 86
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	88 23       	and	r24, r24
     de0:	dc f7       	brge	.-10     	; 0xdd8 <I2C_writeByte+0x1c>
}
     de2:	0f 90       	pop	r0
     de4:	cf 91       	pop	r28
     de6:	df 91       	pop	r29
     de8:	08 95       	ret

00000dea <I2C_readByteWithACK>:

uint8_t I2C_readByteWithACK(void)
{
     dea:	df 93       	push	r29
     dec:	cf 93       	push	r28
     dee:	cd b7       	in	r28, 0x3d	; 61
     df0:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     df2:	e6 e5       	ldi	r30, 0x56	; 86
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	84 ec       	ldi	r24, 0xC4	; 196
     df8:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     dfa:	e6 e5       	ldi	r30, 0x56	; 86
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	88 23       	and	r24, r24
     e02:	dc f7       	brge	.-10     	; 0xdfa <I2C_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
     e04:	e3 e2       	ldi	r30, 0x23	; 35
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
}
     e0a:	cf 91       	pop	r28
     e0c:	df 91       	pop	r29
     e0e:	08 95       	ret

00000e10 <I2C_readByteWithNACK>:

uint8_t I2C_readByteWithNACK(void)
{
     e10:	df 93       	push	r29
     e12:	cf 93       	push	r28
     e14:	cd b7       	in	r28, 0x3d	; 61
     e16:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
     e18:	e6 e5       	ldi	r30, 0x56	; 86
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	84 e8       	ldi	r24, 0x84	; 132
     e1e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     e20:	e6 e5       	ldi	r30, 0x56	; 86
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	88 23       	and	r24, r24
     e28:	dc f7       	brge	.-10     	; 0xe20 <I2C_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
     e2a:	e3 e2       	ldi	r30, 0x23	; 35
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
}
     e30:	cf 91       	pop	r28
     e32:	df 91       	pop	r29
     e34:	08 95       	ret

00000e36 <I2C_getStatus>:

uint8_t I2C_getStatus(void)
{
     e36:	df 93       	push	r29
     e38:	cf 93       	push	r28
     e3a:	0f 92       	push	r0
     e3c:	cd b7       	in	r28, 0x3d	; 61
     e3e:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
     e40:	e1 e2       	ldi	r30, 0x21	; 33
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	88 7f       	andi	r24, 0xF8	; 248
     e48:	89 83       	std	Y+1, r24	; 0x01
    return status;
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
}
     e4c:	0f 90       	pop	r0
     e4e:	cf 91       	pop	r28
     e50:	df 91       	pop	r29
     e52:	08 95       	ret

00000e54 <timerCallBackRuntime>:
 * and then resets the system to normal operations.
 */
void alarmStage(void);
/************************************************************************************************************/
/************************************************************************************************************/
void timerCallBackRuntime(void) {
     e54:	df 93       	push	r29
     e56:	cf 93       	push	r28
     e58:	00 d0       	rcall	.+0      	; 0xe5a <timerCallBackRuntime+0x6>
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
    /* Switch statement to handle different timer states */
    switch (timerState) {
     e5e:	80 91 7a 01 	lds	r24, 0x017A
     e62:	28 2f       	mov	r18, r24
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	3a 83       	std	Y+2, r19	; 0x02
     e68:	29 83       	std	Y+1, r18	; 0x01
     e6a:	89 81       	ldd	r24, Y+1	; 0x01
     e6c:	9a 81       	ldd	r25, Y+2	; 0x02
     e6e:	81 30       	cpi	r24, 0x01	; 1
     e70:	91 05       	cpc	r25, r1
     e72:	d9 f0       	breq	.+54     	; 0xeaa <timerCallBackRuntime+0x56>
     e74:	29 81       	ldd	r18, Y+1	; 0x01
     e76:	3a 81       	ldd	r19, Y+2	; 0x02
     e78:	22 30       	cpi	r18, 0x02	; 2
     e7a:	31 05       	cpc	r19, r1
     e7c:	2c f4       	brge	.+10     	; 0xe88 <timerCallBackRuntime+0x34>
     e7e:	89 81       	ldd	r24, Y+1	; 0x01
     e80:	9a 81       	ldd	r25, Y+2	; 0x02
     e82:	00 97       	sbiw	r24, 0x00	; 0
     e84:	61 f0       	breq	.+24     	; 0xe9e <timerCallBackRuntime+0x4a>
     e86:	1e c0       	rjmp	.+60     	; 0xec4 <timerCallBackRuntime+0x70>
     e88:	29 81       	ldd	r18, Y+1	; 0x01
     e8a:	3a 81       	ldd	r19, Y+2	; 0x02
     e8c:	22 30       	cpi	r18, 0x02	; 2
     e8e:	31 05       	cpc	r19, r1
     e90:	79 f0       	breq	.+30     	; 0xeb0 <timerCallBackRuntime+0x5c>
     e92:	89 81       	ldd	r24, Y+1	; 0x01
     e94:	9a 81       	ldd	r25, Y+2	; 0x02
     e96:	83 30       	cpi	r24, 0x03	; 3
     e98:	91 05       	cpc	r25, r1
     e9a:	81 f0       	breq	.+32     	; 0xebc <timerCallBackRuntime+0x68>
     e9c:	13 c0       	rjmp	.+38     	; 0xec4 <timerCallBackRuntime+0x70>
        /* State for opening the door */
        case OPENING_DOOR:
            seconds++;  /* Increment the seconds counter while the door is opening */
     e9e:	80 91 78 01 	lds	r24, 0x0178
     ea2:	8f 5f       	subi	r24, 0xFF	; 255
     ea4:	80 93 78 01 	sts	0x0178, r24
     ea8:	0d c0       	rjmp	.+26     	; 0xec4 <timerCallBackRuntime+0x70>
            break;

        /* State for waiting for people to enter */
        case WAITING_FOR_PEOPLE:
            seconds = 0;  /* Reset seconds counter while waiting for people */
     eaa:	10 92 78 01 	sts	0x0178, r1
     eae:	0a c0       	rjmp	.+20     	; 0xec4 <timerCallBackRuntime+0x70>
            break;

        /* State for closing the door */
        case CLOSING_DOOR:
            seconds++;  /* Increment the seconds counter while the door is closing */
     eb0:	80 91 78 01 	lds	r24, 0x0178
     eb4:	8f 5f       	subi	r24, 0xFF	; 255
     eb6:	80 93 78 01 	sts	0x0178, r24
     eba:	04 c0       	rjmp	.+8      	; 0xec4 <timerCallBackRuntime+0x70>
            break;

        /* State indicating the operation is done */
        case Done:
            seconds = 0;  /* Reset seconds counter when the operation is complete */
     ebc:	10 92 78 01 	sts	0x0178, r1
            timerState = OPENING_DOOR;
     ec0:	10 92 7a 01 	sts	0x017A, r1
            break;
    }

    /* Check if the alarm state is activated */
    if (alarmState == 0xFF) {
     ec4:	80 91 7b 01 	lds	r24, 0x017B
     ec8:	8f 3f       	cpi	r24, 0xFF	; 255
     eca:	29 f4       	brne	.+10     	; 0xed6 <timerCallBackRuntime+0x82>
        seconds++;  /* Increment the seconds counter if the alarm is active */
     ecc:	80 91 78 01 	lds	r24, 0x0178
     ed0:	8f 5f       	subi	r24, 0xFF	; 255
     ed2:	80 93 78 01 	sts	0x0178, r24
    }
}
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	cf 91       	pop	r28
     edc:	df 91       	pop	r29
     ede:	08 95       	ret

00000ee0 <main>:
/************************************************************************************************************/
/************************************************************************************************************/
int main(void) {
     ee0:	df 93       	push	r29
     ee2:	cf 93       	push	r28
     ee4:	cd b7       	in	r28, 0x3d	; 61
     ee6:	de b7       	in	r29, 0x3e	; 62
     ee8:	6e 97       	sbiw	r28, 0x1e	; 30
     eea:	0f b6       	in	r0, 0x3f	; 63
     eec:	f8 94       	cli
     eee:	de bf       	out	0x3e, r29	; 62
     ef0:	0f be       	out	0x3f, r0	; 63
     ef2:	cd bf       	out	0x3d, r28	; 61
    /* Configuration structures for various peripherals */
    UART_Config UARTRuntime = {9600, DISABLED, EIGHT_BITS, ONE_BIT};  /* UART configuration */
     ef4:	ce 01       	movw	r24, r28
     ef6:	01 96       	adiw	r24, 0x01	; 1
     ef8:	99 8b       	std	Y+17, r25	; 0x11
     efa:	88 8b       	std	Y+16, r24	; 0x10
     efc:	e3 e7       	ldi	r30, 0x73	; 115
     efe:	f1 e0       	ldi	r31, 0x01	; 1
     f00:	fb 8b       	std	Y+19, r31	; 0x13
     f02:	ea 8b       	std	Y+18, r30	; 0x12
     f04:	f5 e0       	ldi	r31, 0x05	; 5
     f06:	fc 8b       	std	Y+20, r31	; 0x14
     f08:	ea 89       	ldd	r30, Y+18	; 0x12
     f0a:	fb 89       	ldd	r31, Y+19	; 0x13
     f0c:	00 80       	ld	r0, Z
     f0e:	8a 89       	ldd	r24, Y+18	; 0x12
     f10:	9b 89       	ldd	r25, Y+19	; 0x13
     f12:	01 96       	adiw	r24, 0x01	; 1
     f14:	9b 8b       	std	Y+19, r25	; 0x13
     f16:	8a 8b       	std	Y+18, r24	; 0x12
     f18:	e8 89       	ldd	r30, Y+16	; 0x10
     f1a:	f9 89       	ldd	r31, Y+17	; 0x11
     f1c:	00 82       	st	Z, r0
     f1e:	88 89       	ldd	r24, Y+16	; 0x10
     f20:	99 89       	ldd	r25, Y+17	; 0x11
     f22:	01 96       	adiw	r24, 0x01	; 1
     f24:	99 8b       	std	Y+17, r25	; 0x11
     f26:	88 8b       	std	Y+16, r24	; 0x10
     f28:	9c 89       	ldd	r25, Y+20	; 0x14
     f2a:	91 50       	subi	r25, 0x01	; 1
     f2c:	9c 8b       	std	Y+20, r25	; 0x14
     f2e:	ec 89       	ldd	r30, Y+20	; 0x14
     f30:	ee 23       	and	r30, r30
     f32:	51 f7       	brne	.-44     	; 0xf08 <main+0x28>
    Timer_ConfigType TimerRuntime = {0, 2930, Timer_1, Fcpu_1024, COMPARE_MODE};  /* Timer configuration */
     f34:	ce 01       	movw	r24, r28
     f36:	06 96       	adiw	r24, 0x06	; 6
     f38:	9e 8b       	std	Y+22, r25	; 0x16
     f3a:	8d 8b       	std	Y+21, r24	; 0x15
     f3c:	ec e6       	ldi	r30, 0x6C	; 108
     f3e:	f1 e0       	ldi	r31, 0x01	; 1
     f40:	f8 8f       	std	Y+24, r31	; 0x18
     f42:	ef 8b       	std	Y+23, r30	; 0x17
     f44:	f7 e0       	ldi	r31, 0x07	; 7
     f46:	f9 8f       	std	Y+25, r31	; 0x19
     f48:	ef 89       	ldd	r30, Y+23	; 0x17
     f4a:	f8 8d       	ldd	r31, Y+24	; 0x18
     f4c:	00 80       	ld	r0, Z
     f4e:	8f 89       	ldd	r24, Y+23	; 0x17
     f50:	98 8d       	ldd	r25, Y+24	; 0x18
     f52:	01 96       	adiw	r24, 0x01	; 1
     f54:	98 8f       	std	Y+24, r25	; 0x18
     f56:	8f 8b       	std	Y+23, r24	; 0x17
     f58:	ed 89       	ldd	r30, Y+21	; 0x15
     f5a:	fe 89       	ldd	r31, Y+22	; 0x16
     f5c:	00 82       	st	Z, r0
     f5e:	8d 89       	ldd	r24, Y+21	; 0x15
     f60:	9e 89       	ldd	r25, Y+22	; 0x16
     f62:	01 96       	adiw	r24, 0x01	; 1
     f64:	9e 8b       	std	Y+22, r25	; 0x16
     f66:	8d 8b       	std	Y+21, r24	; 0x15
     f68:	99 8d       	ldd	r25, Y+25	; 0x19
     f6a:	91 50       	subi	r25, 0x01	; 1
     f6c:	99 8f       	std	Y+25, r25	; 0x19
     f6e:	e9 8d       	ldd	r30, Y+25	; 0x19
     f70:	ee 23       	and	r30, r30
     f72:	51 f7       	brne	.-44     	; 0xf48 <main+0x68>
    I2C_Config I2CRuntime = {CPU_8MHZ, I2C_400KHZ, 0xAA};  /* I2C configuration with address 0xAA */
     f74:	ce 01       	movw	r24, r28
     f76:	0d 96       	adiw	r24, 0x0d	; 13
     f78:	9b 8f       	std	Y+27, r25	; 0x1b
     f7a:	8a 8f       	std	Y+26, r24	; 0x1a
     f7c:	e9 e6       	ldi	r30, 0x69	; 105
     f7e:	f1 e0       	ldi	r31, 0x01	; 1
     f80:	fd 8f       	std	Y+29, r31	; 0x1d
     f82:	ec 8f       	std	Y+28, r30	; 0x1c
     f84:	f3 e0       	ldi	r31, 0x03	; 3
     f86:	fe 8f       	std	Y+30, r31	; 0x1e
     f88:	ec 8d       	ldd	r30, Y+28	; 0x1c
     f8a:	fd 8d       	ldd	r31, Y+29	; 0x1d
     f8c:	00 80       	ld	r0, Z
     f8e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     f90:	9d 8d       	ldd	r25, Y+29	; 0x1d
     f92:	01 96       	adiw	r24, 0x01	; 1
     f94:	9d 8f       	std	Y+29, r25	; 0x1d
     f96:	8c 8f       	std	Y+28, r24	; 0x1c
     f98:	ea 8d       	ldd	r30, Y+26	; 0x1a
     f9a:	fb 8d       	ldd	r31, Y+27	; 0x1b
     f9c:	00 82       	st	Z, r0
     f9e:	8a 8d       	ldd	r24, Y+26	; 0x1a
     fa0:	9b 8d       	ldd	r25, Y+27	; 0x1b
     fa2:	01 96       	adiw	r24, 0x01	; 1
     fa4:	9b 8f       	std	Y+27, r25	; 0x1b
     fa6:	8a 8f       	std	Y+26, r24	; 0x1a
     fa8:	9e 8d       	ldd	r25, Y+30	; 0x1e
     faa:	91 50       	subi	r25, 0x01	; 1
     fac:	9e 8f       	std	Y+30, r25	; 0x1e
     fae:	ee 8d       	ldd	r30, Y+30	; 0x1e
     fb0:	ee 23       	and	r30, r30
     fb2:	51 f7       	brne	.-44     	; 0xf88 <main+0xa8>

    /* Initialize peripherals */
    Timer_init(&TimerRuntime);  /* Initialize the timer with the specified configuration */
     fb4:	ce 01       	movw	r24, r28
     fb6:	06 96       	adiw	r24, 0x06	; 6
     fb8:	0e 94 49 0b 	call	0x1692	; 0x1692 <Timer_init>
    UART_Init(&UARTRuntime);    /* Initialize UART communication */
     fbc:	ce 01       	movw	r24, r28
     fbe:	01 96       	adiw	r24, 0x01	; 1
     fc0:	0e 94 ae 0c 	call	0x195c	; 0x195c <UART_Init>
    DcMotor_Init();              /* Initialize the DC motor control */
     fc4:	0e 94 d5 11 	call	0x23aa	; 0x23aa <DcMotor_Init>
    PIR_init();                  /* Initialize the PIR sensor */
     fc8:	0e 94 c5 09 	call	0x138a	; 0x138a <PIR_init>
    Buzzer_init();               /* Initialize the buzzer */
     fcc:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <Buzzer_init>
    PWM_Timer0_Start(100);      /* Start PWM on Timer0 with a duty cycle of 100 */
     fd0:	84 e6       	ldi	r24, 0x64	; 100
     fd2:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <PWM_Timer0_Start>
    I2C_init(&I2CRuntime);       /* Initialize I2C communication */
     fd6:	ce 01       	movw	r24, r28
     fd8:	0d 96       	adiw	r24, 0x0d	; 13
     fda:	0e 94 50 06 	call	0xca0	; 0xca0 <I2C_init>
    Timer_setCallBack(timerCallBackRuntime, Timer_1);  /* Set the callback function for Timer_1 */
     fde:	8a e2       	ldi	r24, 0x2A	; 42
     fe0:	97 e0       	ldi	r25, 0x07	; 7
     fe2:	61 e0       	ldi	r22, 0x01	; 1
     fe4:	0e 94 75 0c 	call	0x18ea	; 0x18ea <Timer_setCallBack>

    /* Main loop */
    while (1) {
        /* Check the current phase and execute the corresponding function */
        if (phaseSwitches == 1) {
     fe8:	80 91 68 01 	lds	r24, 0x0168
     fec:	81 30       	cpi	r24, 0x01	; 1
     fee:	51 f4       	brne	.+20     	; 0x1004 <main+0x124>
            SREG &= ~(1<<7);  /* Disable Global Interrupt (I-Bit) for safe operation */
     ff0:	af e5       	ldi	r26, 0x5F	; 95
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	ef e5       	ldi	r30, 0x5F	; 95
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	8f 77       	andi	r24, 0x7F	; 127
     ffc:	8c 93       	st	X, r24
            passStoreCheck();  /* Call the function to check and store passwords */
     ffe:	0e 94 1e 08 	call	0x103c	; 0x103c <passStoreCheck>
    1002:	f2 cf       	rjmp	.-28     	; 0xfe8 <main+0x108>
        }
        else if (phaseSwitches == 2) {
    1004:	80 91 68 01 	lds	r24, 0x0168
    1008:	82 30       	cpi	r24, 0x02	; 2
    100a:	51 f4       	brne	.+20     	; 0x1020 <main+0x140>
            SREG |= (1<<7);  /* Enable Global Interrupt (I-Bit) for door handling */
    100c:	af e5       	ldi	r26, 0x5F	; 95
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	ef e5       	ldi	r30, 0x5F	; 95
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	80 68       	ori	r24, 0x80	; 128
    1018:	8c 93       	st	X, r24
            doorHandler();    /* Call the function to manage the door operation */
    101a:	0e 94 26 09 	call	0x124c	; 0x124c <doorHandler>
    101e:	e4 cf       	rjmp	.-56     	; 0xfe8 <main+0x108>
        }
        else if (phaseSwitches == 3) {
    1020:	80 91 68 01 	lds	r24, 0x0168
    1024:	83 30       	cpi	r24, 0x03	; 3
    1026:	01 f7       	brne	.-64     	; 0xfe8 <main+0x108>
            SREG |= (1<<7);  /* Enable Global Interrupt (I-Bit) for alarm handling */
    1028:	af e5       	ldi	r26, 0x5F	; 95
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	ef e5       	ldi	r30, 0x5F	; 95
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	80 68       	ori	r24, 0x80	; 128
    1034:	8c 93       	st	X, r24
            alarmStage();     /* Call the function to manage the alarm state */
    1036:	0e 94 a4 09 	call	0x1348	; 0x1348 <alarmStage>
    103a:	d6 cf       	rjmp	.-84     	; 0xfe8 <main+0x108>

0000103c <passStoreCheck>:
 * 3. The function also listens for a byte ('F'), which signals a password verification request against the stored EEPROM password.
 * 4. If a mismatch occurs during verification, a global variable (g_error) tracks the number of mismatches.
 * 5. An indication of failure ('Z') is sent to the HMI to prompt the user to try again.
 * 6. If g_error reaches 3, the function transitions to an alarm state.
 */
void passStoreCheck(void) {
    103c:	df 93       	push	r29
    103e:	cf 93       	push	r28
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
    1044:	2f 97       	sbiw	r28, 0x0f	; 15
    1046:	0f b6       	in	r0, 0x3f	; 63
    1048:	f8 94       	cli
    104a:	de bf       	out	0x3e, r29	; 62
    104c:	0f be       	out	0x3f, r0	; 63
    104e:	cd bf       	out	0x3d, r28	; 61
    /* Static variables to hold the state of the password storage and comparison */
    static uint8 storedByte, storeLimit, compareByte, RByte;
    uint8 flag = 0;  /* Flag to indicate if a mismatch has occurred */
    1050:	1f 86       	std	Y+15, r1	; 0x0f

    /* Receive a byte from UART */
    RByte = UART_recieveByte();
    1052:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <UART_recieveByte>
    1056:	80 93 7c 01 	sts	0x017C, r24

    /* Check if the received byte is 'F' to start password comparison */
    if (RByte == 'F') {
    105a:	80 91 7c 01 	lds	r24, 0x017C
    105e:	86 34       	cpi	r24, 0x46	; 70
    1060:	09 f0       	breq	.+2      	; 0x1064 <passStoreCheck+0x28>
    1062:	52 c0       	rjmp	.+164    	; 0x1108 <passStoreCheck+0xcc>
        storeLimit = 0;  /* Reset store limit for comparison */
    1064:	10 92 7e 01 	sts	0x017E, r1
    1068:	3f c0       	rjmp	.+126    	; 0x10e8 <passStoreCheck+0xac>

        /* Loop to compare 5 stored password bytes */
        while (storeLimit < 5) {
            storedByte = UART_recieveByte();  /* Receive the password byte */
    106a:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <UART_recieveByte>
    106e:	80 93 7f 01 	sts	0x017F, r24

            /* Check if the received byte is not a space */
            if (storedByte != ' ') {
    1072:	80 91 7f 01 	lds	r24, 0x017F
    1076:	80 32       	cpi	r24, 0x20	; 32
    1078:	b9 f1       	breq	.+110    	; 0x10e8 <passStoreCheck+0xac>

                /* Read the stored byte from EEPROM for comparison */
                if (EEPROM_readByte(0x0001 + storeLimit, &compareByte) == ERROR) {
    107a:	80 91 7e 01 	lds	r24, 0x017E
    107e:	88 2f       	mov	r24, r24
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	01 96       	adiw	r24, 0x01	; 1
    1084:	2d e7       	ldi	r18, 0x7D	; 125
    1086:	31 e0       	ldi	r19, 0x01	; 1
    1088:	b9 01       	movw	r22, r18
    108a:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <EEPROM_readByte>
    108e:	88 23       	and	r24, r24
    1090:	29 f4       	brne	.+10     	; 0x109c <passStoreCheck+0x60>
                    /* Set a GPIO pin high if there's an error reading EEPROM */
                    GPIO_writePin(PORTA_ID, PIN0_ID, LOGIC_HIGH);
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	60 e0       	ldi	r22, 0x00	; 0
    1096:	41 e0       	ldi	r20, 0x01	; 1
    1098:	0e 94 77 0f 	call	0x1eee	; 0x1eee <GPIO_writePin>
                }

                /* Compare the received byte with the stored byte */
                if (storedByte != compareByte) {
    109c:	90 91 7f 01 	lds	r25, 0x017F
    10a0:	80 91 7d 01 	lds	r24, 0x017D
    10a4:	98 17       	cp	r25, r24
    10a6:	d9 f0       	breq	.+54     	; 0x10de <passStoreCheck+0xa2>
                    flag = 1;  /* Set flag indicating a mismatch */
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	8f 87       	std	Y+15, r24	; 0x0f

                    /* Increment error count */
                    g_error++;
    10ac:	80 91 79 01 	lds	r24, 0x0179
    10b0:	8f 5f       	subi	r24, 0xFF	; 255
    10b2:	80 93 79 01 	sts	0x0179, r24
                    /* Check if error count has reached 3 */
                    if (g_error == 3) {
    10b6:	80 91 79 01 	lds	r24, 0x0179
    10ba:	83 30       	cpi	r24, 0x03	; 3
    10bc:	61 f4       	brne	.+24     	; 0x10d6 <passStoreCheck+0x9a>
                        alarmState = 0xFF;  /* Trigger alarm state */
    10be:	8f ef       	ldi	r24, 0xFF	; 255
    10c0:	80 93 7b 01 	sts	0x017B, r24
                        phaseSwitches = 3;   /* Change phase */
    10c4:	83 e0       	ldi	r24, 0x03	; 3
    10c6:	80 93 68 01 	sts	0x0168, r24
                        g_error = 0;         /* Reset error count */
    10ca:	10 92 79 01 	sts	0x0179, r1
                        UART_sendByte(Alarm_Byte);  /* Send alarm byte */
    10ce:	84 e6       	ldi	r24, 0x64	; 100
    10d0:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <UART_sendByte>
    10d4:	0e c0       	rjmp	.+28     	; 0x10f2 <passStoreCheck+0xb6>
                    } else {
                        UART_sendByte('Z');  /* Send indication of mismatch */
    10d6:	8a e5       	ldi	r24, 0x5A	; 90
    10d8:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <UART_sendByte>
    10dc:	0a c0       	rjmp	.+20     	; 0x10f2 <passStoreCheck+0xb6>
                    }

                    break;  /* Exit the loop on mismatch */
                }
                storeLimit++;  /* Increment store limit for next byte */
    10de:	80 91 7e 01 	lds	r24, 0x017E
    10e2:	8f 5f       	subi	r24, 0xFF	; 255
    10e4:	80 93 7e 01 	sts	0x017E, r24
    /* Check if the received byte is 'F' to start password comparison */
    if (RByte == 'F') {
        storeLimit = 0;  /* Reset store limit for comparison */

        /* Loop to compare 5 stored password bytes */
        while (storeLimit < 5) {
    10e8:	80 91 7e 01 	lds	r24, 0x017E
    10ec:	85 30       	cpi	r24, 0x05	; 5
    10ee:	08 f4       	brcc	.+2      	; 0x10f2 <passStoreCheck+0xb6>
    10f0:	bc cf       	rjmp	.-136    	; 0x106a <passStoreCheck+0x2e>
                storeLimit++;  /* Increment store limit for next byte */
            }
        }

        /* If no mismatch was found */
        if (flag == 0) {
    10f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    10f4:	88 23       	and	r24, r24
    10f6:	09 f0       	breq	.+2      	; 0x10fa <passStoreCheck+0xbe>
    10f8:	a0 c0       	rjmp	.+320    	; 0x123a <passStoreCheck+0x1fe>
            UART_sendByte('X');  /* Send indication of successful match */
    10fa:	88 e5       	ldi	r24, 0x58	; 88
    10fc:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <UART_sendByte>
            phaseSwitches = 2;    /* Change phase */
    1100:	82 e0       	ldi	r24, 0x02	; 2
    1102:	80 93 68 01 	sts	0x0168, r24
    1106:	99 c0       	rjmp	.+306    	; 0x123a <passStoreCheck+0x1fe>
        }

    /* Check if the received byte is 'S' to start storing the password */
    } else if (RByte == 'S') {
    1108:	80 91 7c 01 	lds	r24, 0x017C
    110c:	83 35       	cpi	r24, 0x53	; 83
    110e:	09 f0       	breq	.+2      	; 0x1112 <passStoreCheck+0xd6>
    1110:	94 c0       	rjmp	.+296    	; 0x123a <passStoreCheck+0x1fe>
        storeLimit = 0;  /* Reset store limit for storing new password */
    1112:	10 92 7e 01 	sts	0x017E, r1
    1116:	8a c0       	rjmp	.+276    	; 0x122c <passStoreCheck+0x1f0>

        /* Loop to store 5 password bytes */
        while (storeLimit < 5) {
            storedByte = UART_recieveByte();  /* Receive the password byte */
    1118:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <UART_recieveByte>
    111c:	80 93 7f 01 	sts	0x017F, r24

            /* Check if the received byte is not a space */
            if (storedByte != ' ') {
    1120:	80 91 7f 01 	lds	r24, 0x017F
    1124:	80 32       	cpi	r24, 0x20	; 32
    1126:	09 f4       	brne	.+2      	; 0x112a <passStoreCheck+0xee>
    1128:	81 c0       	rjmp	.+258    	; 0x122c <passStoreCheck+0x1f0>
                /* Write the received byte to EEPROM */
                EEPROM_writeByte(0x0001 + storeLimit, storedByte);
    112a:	80 91 7e 01 	lds	r24, 0x017E
    112e:	88 2f       	mov	r24, r24
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	01 96       	adiw	r24, 0x01	; 1
    1134:	20 91 7f 01 	lds	r18, 0x017F
    1138:	62 2f       	mov	r22, r18
    113a:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <EEPROM_writeByte>
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	a0 e2       	ldi	r26, 0x20	; 32
    1144:	b1 e4       	ldi	r27, 0x41	; 65
    1146:	8b 87       	std	Y+11, r24	; 0x0b
    1148:	9c 87       	std	Y+12, r25	; 0x0c
    114a:	ad 87       	std	Y+13, r26	; 0x0d
    114c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    114e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1150:	7c 85       	ldd	r23, Y+12	; 0x0c
    1152:	8d 85       	ldd	r24, Y+13	; 0x0d
    1154:	9e 85       	ldd	r25, Y+14	; 0x0e
    1156:	20 e0       	ldi	r18, 0x00	; 0
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	4a ef       	ldi	r20, 0xFA	; 250
    115c:	54 e4       	ldi	r21, 0x44	; 68
    115e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1162:	dc 01       	movw	r26, r24
    1164:	cb 01       	movw	r24, r22
    1166:	8f 83       	std	Y+7, r24	; 0x07
    1168:	98 87       	std	Y+8, r25	; 0x08
    116a:	a9 87       	std	Y+9, r26	; 0x09
    116c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    116e:	6f 81       	ldd	r22, Y+7	; 0x07
    1170:	78 85       	ldd	r23, Y+8	; 0x08
    1172:	89 85       	ldd	r24, Y+9	; 0x09
    1174:	9a 85       	ldd	r25, Y+10	; 0x0a
    1176:	20 e0       	ldi	r18, 0x00	; 0
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	40 e8       	ldi	r20, 0x80	; 128
    117c:	5f e3       	ldi	r21, 0x3F	; 63
    117e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1182:	88 23       	and	r24, r24
    1184:	2c f4       	brge	.+10     	; 0x1190 <passStoreCheck+0x154>
		__ticks = 1;
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	9e 83       	std	Y+6, r25	; 0x06
    118c:	8d 83       	std	Y+5, r24	; 0x05
    118e:	3f c0       	rjmp	.+126    	; 0x120e <passStoreCheck+0x1d2>
	else if (__tmp > 65535)
    1190:	6f 81       	ldd	r22, Y+7	; 0x07
    1192:	78 85       	ldd	r23, Y+8	; 0x08
    1194:	89 85       	ldd	r24, Y+9	; 0x09
    1196:	9a 85       	ldd	r25, Y+10	; 0x0a
    1198:	20 e0       	ldi	r18, 0x00	; 0
    119a:	3f ef       	ldi	r19, 0xFF	; 255
    119c:	4f e7       	ldi	r20, 0x7F	; 127
    119e:	57 e4       	ldi	r21, 0x47	; 71
    11a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11a4:	18 16       	cp	r1, r24
    11a6:	4c f5       	brge	.+82     	; 0x11fa <passStoreCheck+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    11aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    11ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    11ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    11b0:	20 e0       	ldi	r18, 0x00	; 0
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	40 e2       	ldi	r20, 0x20	; 32
    11b6:	51 e4       	ldi	r21, 0x41	; 65
    11b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11bc:	dc 01       	movw	r26, r24
    11be:	cb 01       	movw	r24, r22
    11c0:	bc 01       	movw	r22, r24
    11c2:	cd 01       	movw	r24, r26
    11c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11c8:	dc 01       	movw	r26, r24
    11ca:	cb 01       	movw	r24, r22
    11cc:	9e 83       	std	Y+6, r25	; 0x06
    11ce:	8d 83       	std	Y+5, r24	; 0x05
    11d0:	0f c0       	rjmp	.+30     	; 0x11f0 <passStoreCheck+0x1b4>
    11d2:	88 ec       	ldi	r24, 0xC8	; 200
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	9c 83       	std	Y+4, r25	; 0x04
    11d8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	9c 81       	ldd	r25, Y+4	; 0x04
    11de:	01 97       	sbiw	r24, 0x01	; 1
    11e0:	f1 f7       	brne	.-4      	; 0x11de <passStoreCheck+0x1a2>
    11e2:	9c 83       	std	Y+4, r25	; 0x04
    11e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11e6:	8d 81       	ldd	r24, Y+5	; 0x05
    11e8:	9e 81       	ldd	r25, Y+6	; 0x06
    11ea:	01 97       	sbiw	r24, 0x01	; 1
    11ec:	9e 83       	std	Y+6, r25	; 0x06
    11ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11f0:	8d 81       	ldd	r24, Y+5	; 0x05
    11f2:	9e 81       	ldd	r25, Y+6	; 0x06
    11f4:	00 97       	sbiw	r24, 0x00	; 0
    11f6:	69 f7       	brne	.-38     	; 0x11d2 <passStoreCheck+0x196>
    11f8:	14 c0       	rjmp	.+40     	; 0x1222 <passStoreCheck+0x1e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11fa:	6f 81       	ldd	r22, Y+7	; 0x07
    11fc:	78 85       	ldd	r23, Y+8	; 0x08
    11fe:	89 85       	ldd	r24, Y+9	; 0x09
    1200:	9a 85       	ldd	r25, Y+10	; 0x0a
    1202:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1206:	dc 01       	movw	r26, r24
    1208:	cb 01       	movw	r24, r22
    120a:	9e 83       	std	Y+6, r25	; 0x06
    120c:	8d 83       	std	Y+5, r24	; 0x05
    120e:	8d 81       	ldd	r24, Y+5	; 0x05
    1210:	9e 81       	ldd	r25, Y+6	; 0x06
    1212:	9a 83       	std	Y+2, r25	; 0x02
    1214:	89 83       	std	Y+1, r24	; 0x01
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	9a 81       	ldd	r25, Y+2	; 0x02
    121a:	01 97       	sbiw	r24, 0x01	; 1
    121c:	f1 f7       	brne	.-4      	; 0x121a <passStoreCheck+0x1de>
    121e:	9a 83       	std	Y+2, r25	; 0x02
    1220:	89 83       	std	Y+1, r24	; 0x01
                _delay_ms(10);  /* Delay to allow EEPROM write completion */
                storeLimit++;  /* Increment store limit for next byte */
    1222:	80 91 7e 01 	lds	r24, 0x017E
    1226:	8f 5f       	subi	r24, 0xFF	; 255
    1228:	80 93 7e 01 	sts	0x017E, r24
    /* Check if the received byte is 'S' to start storing the password */
    } else if (RByte == 'S') {
        storeLimit = 0;  /* Reset store limit for storing new password */

        /* Loop to store 5 password bytes */
        while (storeLimit < 5) {
    122c:	80 91 7e 01 	lds	r24, 0x017E
    1230:	85 30       	cpi	r24, 0x05	; 5
    1232:	08 f4       	brcc	.+2      	; 0x1236 <passStoreCheck+0x1fa>
    1234:	71 cf       	rjmp	.-286    	; 0x1118 <passStoreCheck+0xdc>
                EEPROM_writeByte(0x0001 + storeLimit, storedByte);
                _delay_ms(10);  /* Delay to allow EEPROM write completion */
                storeLimit++;  /* Increment store limit for next byte */
            }
        }
        storeLimit = 0;  /* Reset store limit after storing */
    1236:	10 92 7e 01 	sts	0x017E, r1
    }
}
    123a:	2f 96       	adiw	r28, 0x0f	; 15
    123c:	0f b6       	in	r0, 0x3f	; 63
    123e:	f8 94       	cli
    1240:	de bf       	out	0x3e, r29	; 62
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	cd bf       	out	0x3d, r28	; 61
    1246:	cf 91       	pop	r28
    1248:	df 91       	pop	r29
    124a:	08 95       	ret

0000124c <doorHandler>:
 *    - After 15 seconds, the motor stops, and the state resets to OPENING_DOOR, completing the cycle.
 *    - It also sends a completion byte (Done) to indicate the operation is finished.
 *
 * The function uses a static state variable to track the current motor state and a flag to ensure that state change notifications are sent only once per state.
 */
void doorHandler(void) {
    124c:	df 93       	push	r29
    124e:	cf 93       	push	r28
    1250:	00 d0       	rcall	.+0      	; 0x1252 <doorHandler+0x6>
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62
    static doorState motorState = OPENING_DOOR;
    static uint8_t byteSent = 0;  /* Flag to indicate if a byte was sent for the current state */


    /* Switch statement to handle different motor states */
    switch (motorState) {
    1256:	80 91 81 01 	lds	r24, 0x0181
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	3a 83       	std	Y+2, r19	; 0x02
    1260:	29 83       	std	Y+1, r18	; 0x01
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	9a 81       	ldd	r25, Y+2	; 0x02
    1266:	81 30       	cpi	r24, 0x01	; 1
    1268:	91 05       	cpc	r25, r1
    126a:	59 f1       	breq	.+86     	; 0x12c2 <doorHandler+0x76>
    126c:	29 81       	ldd	r18, Y+1	; 0x01
    126e:	3a 81       	ldd	r19, Y+2	; 0x02
    1270:	22 30       	cpi	r18, 0x02	; 2
    1272:	31 05       	cpc	r19, r1
    1274:	09 f4       	brne	.+2      	; 0x1278 <doorHandler+0x2c>
    1276:	40 c0       	rjmp	.+128    	; 0x12f8 <doorHandler+0xac>
    1278:	89 81       	ldd	r24, Y+1	; 0x01
    127a:	9a 81       	ldd	r25, Y+2	; 0x02
    127c:	00 97       	sbiw	r24, 0x00	; 0
    127e:	09 f0       	breq	.+2      	; 0x1282 <doorHandler+0x36>
    1280:	5e c0       	rjmp	.+188    	; 0x133e <doorHandler+0xf2>

        /* State for opening the door */
        case OPENING_DOOR:
            /* Check if the byte has not been sent yet */
            if (!byteSent) {
    1282:	80 91 80 01 	lds	r24, 0x0180
    1286:	88 23       	and	r24, r24
    1288:	31 f4       	brne	.+12     	; 0x1296 <doorHandler+0x4a>
                UART_sendByte(OPEN_BYTE);  /* Send a byte to indicate the door is opening */
    128a:	81 e6       	ldi	r24, 0x61	; 97
    128c:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <UART_sendByte>
                byteSent = 1;  /* Set flag to prevent re-sending */
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	80 93 80 01 	sts	0x0180, r24
            }

            DcMotor_Rotate(CW, 100);  /* Rotate the motor clockwise to open the door */
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	64 e6       	ldi	r22, 0x64	; 100
    129a:	0e 94 f7 11 	call	0x23ee	; 0x23ee <DcMotor_Rotate>

            /* Check if 15 seconds have passed */
            if (seconds > 15) {
    129e:	80 91 78 01 	lds	r24, 0x0178
    12a2:	80 31       	cpi	r24, 0x10	; 16
    12a4:	08 f4       	brcc	.+2      	; 0x12a8 <doorHandler+0x5c>
    12a6:	4b c0       	rjmp	.+150    	; 0x133e <doorHandler+0xf2>
                DcMotor_Rotate(STOP, 0);  /* Stop the motor */
    12a8:	82 e0       	ldi	r24, 0x02	; 2
    12aa:	60 e0       	ldi	r22, 0x00	; 0
    12ac:	0e 94 f7 11 	call	0x23ee	; 0x23ee <DcMotor_Rotate>
                motorState = WAITING_FOR_PEOPLE;  /* Transition to waiting state */
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	80 93 81 01 	sts	0x0181, r24
                byteSent = 0;  /* Reset byte sent flag */
    12b6:	10 92 80 01 	sts	0x0180, r1
                timerState = WAITING_FOR_PEOPLE;  /* Update timer state */
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	80 93 7a 01 	sts	0x017A, r24
    12c0:	3e c0       	rjmp	.+124    	; 0x133e <doorHandler+0xf2>
            }
            break;

        /* State for waiting for people to enter */
        case WAITING_FOR_PEOPLE:
            DcMotor_Rotate(STOP, 0);  /* Keep the motor stopped */
    12c2:	82 e0       	ldi	r24, 0x02	; 2
    12c4:	60 e0       	ldi	r22, 0x00	; 0
    12c6:	0e 94 f7 11 	call	0x23ee	; 0x23ee <DcMotor_Rotate>

            /* Check if the byte has not been sent yet */
            if (!byteSent) {
    12ca:	80 91 80 01 	lds	r24, 0x0180
    12ce:	88 23       	and	r24, r24
    12d0:	31 f4       	brne	.+12     	; 0x12de <doorHandler+0x92>
                UART_sendByte(WAIT_BYTE);  /* Send a byte indicating the system is waiting */
    12d2:	82 e6       	ldi	r24, 0x62	; 98
    12d4:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <UART_sendByte>
                byteSent = 1;  /* Set flag to prevent re-sending */
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	80 93 80 01 	sts	0x0180, r24
            }

            /* Check the PIR sensor state */
            if (PIR_getState() == LOGIC_LOW) {
    12de:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <PIR_getState>
    12e2:	88 23       	and	r24, r24
    12e4:	61 f5       	brne	.+88     	; 0x133e <doorHandler+0xf2>
                motorState = CLOSING_DOOR;  /* Transition to closing state if motion is detected */
    12e6:	82 e0       	ldi	r24, 0x02	; 2
    12e8:	80 93 81 01 	sts	0x0181, r24
                byteSent = 0;  /* Reset byte sent flag */
    12ec:	10 92 80 01 	sts	0x0180, r1
                timerState = CLOSING_DOOR;  /* Update timer state */
    12f0:	82 e0       	ldi	r24, 0x02	; 2
    12f2:	80 93 7a 01 	sts	0x017A, r24
    12f6:	23 c0       	rjmp	.+70     	; 0x133e <doorHandler+0xf2>
            break;

        /* State for closing the door */
        case CLOSING_DOOR:
            /* Check if the byte has not been sent yet */
            if (!byteSent) {
    12f8:	80 91 80 01 	lds	r24, 0x0180
    12fc:	88 23       	and	r24, r24
    12fe:	31 f4       	brne	.+12     	; 0x130c <doorHandler+0xc0>
                UART_sendByte(CLOSE_BYTE);  /* Send a byte to indicate the door is closing */
    1300:	83 e6       	ldi	r24, 0x63	; 99
    1302:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <UART_sendByte>
                byteSent = 1;  /* Set flag to prevent re-sending */
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	80 93 80 01 	sts	0x0180, r24
            }

            DcMotor_Rotate(A_CW, 100);  /* Rotate the motor counter-clockwise to close the door */
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	64 e6       	ldi	r22, 0x64	; 100
    1310:	0e 94 f7 11 	call	0x23ee	; 0x23ee <DcMotor_Rotate>

            /* Check if 15 seconds have passed */
            if (seconds > 15) {
    1314:	80 91 78 01 	lds	r24, 0x0178
    1318:	80 31       	cpi	r24, 0x10	; 16
    131a:	88 f0       	brcs	.+34     	; 0x133e <doorHandler+0xf2>
                DcMotor_Rotate(STOP, 0);  /* Stop the motor */
    131c:	82 e0       	ldi	r24, 0x02	; 2
    131e:	60 e0       	ldi	r22, 0x00	; 0
    1320:	0e 94 f7 11 	call	0x23ee	; 0x23ee <DcMotor_Rotate>
                motorState = OPENING_DOOR;  /* Reset state to opening */
    1324:	10 92 81 01 	sts	0x0181, r1
                phaseSwitches = 1;  /* Update phase switches */
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	80 93 68 01 	sts	0x0168, r24
                byteSent = 0;  /* Reset byte sent flag */
    132e:	10 92 80 01 	sts	0x0180, r1
                timerState = Done;  /* Update timer state */
    1332:	83 e0       	ldi	r24, 0x03	; 3
    1334:	80 93 7a 01 	sts	0x017A, r24
                UART_sendByte(Done);  /* Send a completion byte indicating the operation is finished */
    1338:	83 e0       	ldi	r24, 0x03	; 3
    133a:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <UART_sendByte>
            }
            break;
    }
}
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	cf 91       	pop	r28
    1344:	df 91       	pop	r29
    1346:	08 95       	ret

00001348 <alarmStage>:
 *
 * 1. if the password is wrong for 3 consecutive times, we come here
 * 2. i turn the buzzer on for 60 seconds, while i already in the first function sent to the HMI to display error message.
 * 3. after the 60 seconds, everything returns to the inital state and the system returns to the normal operations
 * */
void alarmStage(void) {
    1348:	df 93       	push	r29
    134a:	cf 93       	push	r28
    134c:	cd b7       	in	r28, 0x3d	; 61
    134e:	de b7       	in	r29, 0x3e	; 62
    /* Static variable to track if a byte has been sent for this state */
    static uint8_t byteSent = 0;

    /* Check if the elapsed time is less than 60 seconds */
    if (seconds < 60)
    1350:	80 91 78 01 	lds	r24, 0x0178
    1354:	8c 33       	cpi	r24, 0x3C	; 60
    1356:	18 f4       	brcc	.+6      	; 0x135e <alarmStage+0x16>
    {
        Buzzer_on();  /* Activate the buzzer to indicate an alarm state */
    1358:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <Buzzer_on>
    135c:	13 c0       	rjmp	.+38     	; 0x1384 <alarmStage+0x3c>
    }
    /* If 60 seconds have passed */
    else {
        /* Check if the byte has not been sent yet */
        if (!byteSent)
    135e:	80 91 82 01 	lds	r24, 0x0182
    1362:	88 23       	and	r24, r24
    1364:	31 f4       	brne	.+12     	; 0x1372 <alarmStage+0x2a>
        {
            UART_sendByte(OPEN_BYTE);  /* Send a byte to inform the HMI of the alarm state */
    1366:	81 e6       	ldi	r24, 0x61	; 97
    1368:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <UART_sendByte>
            byteSent = 1;  /* Set flag to prevent re-sending */
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	80 93 82 01 	sts	0x0182, r24
        }

        Buzzer_off();  /* Deactivate the buzzer after the alarm duration */
    1372:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <Buzzer_off>
        byteSent = 0;  /* Reset the byte sent flag for future operations */
    1376:	10 92 82 01 	sts	0x0182, r1
        alarmState = 0;  /* Reset the alarm state to indicate normal operation */
    137a:	10 92 7b 01 	sts	0x017B, r1
        phaseSwitches = 1;  /* Update phase switches to return to normal operations */
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	80 93 68 01 	sts	0x0168, r24
    }
}
    1384:	cf 91       	pop	r28
    1386:	df 91       	pop	r29
    1388:	08 95       	ret

0000138a <PIR_init>:
#include "std_types.h"
#include "PIR.h"
#include "gpio.h"

void PIR_init(void)
{
    138a:	df 93       	push	r29
    138c:	cf 93       	push	r28
    138e:	cd b7       	in	r28, 0x3d	; 61
    1390:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PIR_PORT, PIR_PIN, PIN_INPUT);
    1392:	82 e0       	ldi	r24, 0x02	; 2
    1394:	62 e0       	ldi	r22, 0x02	; 2
    1396:	40 e0       	ldi	r20, 0x00	; 0
    1398:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <GPIO_setupPinDirection>
}
    139c:	cf 91       	pop	r28
    139e:	df 91       	pop	r29
    13a0:	08 95       	ret

000013a2 <PIR_getState>:

uint8 PIR_getState(void)
{
    13a2:	df 93       	push	r29
    13a4:	cf 93       	push	r28
    13a6:	cd b7       	in	r28, 0x3d	; 61
    13a8:	de b7       	in	r29, 0x3e	; 62
	return GPIO_readPin(PIR_PORT, PIR_PIN);
    13aa:	82 e0       	ldi	r24, 0x02	; 2
    13ac:	62 e0       	ldi	r22, 0x02	; 2
    13ae:	0e 94 62 10 	call	0x20c4	; 0x20c4 <GPIO_readPin>
}
    13b2:	cf 91       	pop	r28
    13b4:	df 91       	pop	r29
    13b6:	08 95       	ret

000013b8 <PWM_Timer0_Start>:
#include <avr/io.h>
#include "gpio.h"



void PWM_Timer0_Start(uint8 duty_cycle) {
    13b8:	0f 93       	push	r16
    13ba:	1f 93       	push	r17
    13bc:	df 93       	push	r29
    13be:	cf 93       	push	r28
    13c0:	0f 92       	push	r0
    13c2:	cd b7       	in	r28, 0x3d	; 61
    13c4:	de b7       	in	r29, 0x3e	; 62
    13c6:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; // Set Timer Initial Value to 0
    13c8:	e2 e5       	ldi	r30, 0x52	; 82
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	10 82       	st	Z, r1
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/64 CS00=1, CS01=1, CS02=0
	 */
	TCCR0 = (1 << WGM00) | (1 << WGM01) | (1 << COM01) | (1 << CS01) | (1 << CS00);
    13ce:	e3 e5       	ldi	r30, 0x53	; 83
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	8b e6       	ldi	r24, 0x6B	; 107
    13d4:	80 83       	st	Z, r24

	OCR0 = (uint8)(duty_cycle * 2.55);
    13d6:	0c e5       	ldi	r16, 0x5C	; 92
    13d8:	10 e0       	ldi	r17, 0x00	; 0
    13da:	89 81       	ldd	r24, Y+1	; 0x01
    13dc:	88 2f       	mov	r24, r24
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	aa 27       	eor	r26, r26
    13e2:	97 fd       	sbrc	r25, 7
    13e4:	a0 95       	com	r26
    13e6:	ba 2f       	mov	r27, r26
    13e8:	bc 01       	movw	r22, r24
    13ea:	cd 01       	movw	r24, r26
    13ec:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    13f0:	dc 01       	movw	r26, r24
    13f2:	cb 01       	movw	r24, r22
    13f4:	bc 01       	movw	r22, r24
    13f6:	cd 01       	movw	r24, r26
    13f8:	23 e3       	ldi	r18, 0x33	; 51
    13fa:	33 e3       	ldi	r19, 0x33	; 51
    13fc:	43 e2       	ldi	r20, 0x23	; 35
    13fe:	50 e4       	ldi	r21, 0x40	; 64
    1400:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1404:	dc 01       	movw	r26, r24
    1406:	cb 01       	movw	r24, r22
    1408:	bc 01       	movw	r22, r24
    140a:	cd 01       	movw	r24, r26
    140c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1410:	dc 01       	movw	r26, r24
    1412:	cb 01       	movw	r24, r22
    1414:	f8 01       	movw	r30, r16
    1416:	80 83       	st	Z, r24
	GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);/*set PB3/OC0 as output pin*/
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	63 e0       	ldi	r22, 0x03	; 3
    141c:	41 e0       	ldi	r20, 0x01	; 1
    141e:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <GPIO_setupPinDirection>
}
    1422:	0f 90       	pop	r0
    1424:	cf 91       	pop	r28
    1426:	df 91       	pop	r29
    1428:	1f 91       	pop	r17
    142a:	0f 91       	pop	r16
    142c:	08 95       	ret

0000142e <__vector_11>:
static volatile void (*g_CallBackTimer0)(void) = NULL_PTR;
static volatile void (*g_CallBackTimer1)(void) = NULL_PTR;
static volatile void (*g_CallBackTimer2)(void) = NULL_PTR;

ISR(TIMER0_OVF_vect)
{
    142e:	1f 92       	push	r1
    1430:	0f 92       	push	r0
    1432:	0f b6       	in	r0, 0x3f	; 63
    1434:	0f 92       	push	r0
    1436:	11 24       	eor	r1, r1
    1438:	2f 93       	push	r18
    143a:	3f 93       	push	r19
    143c:	4f 93       	push	r20
    143e:	5f 93       	push	r21
    1440:	6f 93       	push	r22
    1442:	7f 93       	push	r23
    1444:	8f 93       	push	r24
    1446:	9f 93       	push	r25
    1448:	af 93       	push	r26
    144a:	bf 93       	push	r27
    144c:	ef 93       	push	r30
    144e:	ff 93       	push	r31
    1450:	df 93       	push	r29
    1452:	cf 93       	push	r28
    1454:	cd b7       	in	r28, 0x3d	; 61
    1456:	de b7       	in	r29, 0x3e	; 62
    if(g_CallBackTimer0 != NULL_PTR)
    1458:	80 91 83 01 	lds	r24, 0x0183
    145c:	90 91 84 01 	lds	r25, 0x0184
    1460:	00 97       	sbiw	r24, 0x00	; 0
    1462:	29 f0       	breq	.+10     	; 0x146e <__vector_11+0x40>
    {
        /** Call the callback function */
        (*g_CallBackTimer0)();
    1464:	e0 91 83 01 	lds	r30, 0x0183
    1468:	f0 91 84 01 	lds	r31, 0x0184
    146c:	09 95       	icall
    }
}
    146e:	cf 91       	pop	r28
    1470:	df 91       	pop	r29
    1472:	ff 91       	pop	r31
    1474:	ef 91       	pop	r30
    1476:	bf 91       	pop	r27
    1478:	af 91       	pop	r26
    147a:	9f 91       	pop	r25
    147c:	8f 91       	pop	r24
    147e:	7f 91       	pop	r23
    1480:	6f 91       	pop	r22
    1482:	5f 91       	pop	r21
    1484:	4f 91       	pop	r20
    1486:	3f 91       	pop	r19
    1488:	2f 91       	pop	r18
    148a:	0f 90       	pop	r0
    148c:	0f be       	out	0x3f, r0	; 63
    148e:	0f 90       	pop	r0
    1490:	1f 90       	pop	r1
    1492:	18 95       	reti

00001494 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    1494:	1f 92       	push	r1
    1496:	0f 92       	push	r0
    1498:	0f b6       	in	r0, 0x3f	; 63
    149a:	0f 92       	push	r0
    149c:	11 24       	eor	r1, r1
    149e:	2f 93       	push	r18
    14a0:	3f 93       	push	r19
    14a2:	4f 93       	push	r20
    14a4:	5f 93       	push	r21
    14a6:	6f 93       	push	r22
    14a8:	7f 93       	push	r23
    14aa:	8f 93       	push	r24
    14ac:	9f 93       	push	r25
    14ae:	af 93       	push	r26
    14b0:	bf 93       	push	r27
    14b2:	ef 93       	push	r30
    14b4:	ff 93       	push	r31
    14b6:	df 93       	push	r29
    14b8:	cf 93       	push	r28
    14ba:	cd b7       	in	r28, 0x3d	; 61
    14bc:	de b7       	in	r29, 0x3e	; 62
    if(g_CallBackTimer0 != NULL_PTR)
    14be:	80 91 83 01 	lds	r24, 0x0183
    14c2:	90 91 84 01 	lds	r25, 0x0184
    14c6:	00 97       	sbiw	r24, 0x00	; 0
    14c8:	29 f0       	breq	.+10     	; 0x14d4 <__vector_10+0x40>
    {
        /** Call the callback function */
        (*g_CallBackTimer0)();
    14ca:	e0 91 83 01 	lds	r30, 0x0183
    14ce:	f0 91 84 01 	lds	r31, 0x0184
    14d2:	09 95       	icall
    }
}
    14d4:	cf 91       	pop	r28
    14d6:	df 91       	pop	r29
    14d8:	ff 91       	pop	r31
    14da:	ef 91       	pop	r30
    14dc:	bf 91       	pop	r27
    14de:	af 91       	pop	r26
    14e0:	9f 91       	pop	r25
    14e2:	8f 91       	pop	r24
    14e4:	7f 91       	pop	r23
    14e6:	6f 91       	pop	r22
    14e8:	5f 91       	pop	r21
    14ea:	4f 91       	pop	r20
    14ec:	3f 91       	pop	r19
    14ee:	2f 91       	pop	r18
    14f0:	0f 90       	pop	r0
    14f2:	0f be       	out	0x3f, r0	; 63
    14f4:	0f 90       	pop	r0
    14f6:	1f 90       	pop	r1
    14f8:	18 95       	reti

000014fa <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    14fa:	1f 92       	push	r1
    14fc:	0f 92       	push	r0
    14fe:	0f b6       	in	r0, 0x3f	; 63
    1500:	0f 92       	push	r0
    1502:	11 24       	eor	r1, r1
    1504:	2f 93       	push	r18
    1506:	3f 93       	push	r19
    1508:	4f 93       	push	r20
    150a:	5f 93       	push	r21
    150c:	6f 93       	push	r22
    150e:	7f 93       	push	r23
    1510:	8f 93       	push	r24
    1512:	9f 93       	push	r25
    1514:	af 93       	push	r26
    1516:	bf 93       	push	r27
    1518:	ef 93       	push	r30
    151a:	ff 93       	push	r31
    151c:	df 93       	push	r29
    151e:	cf 93       	push	r28
    1520:	cd b7       	in	r28, 0x3d	; 61
    1522:	de b7       	in	r29, 0x3e	; 62
    if(g_CallBackTimer1 != NULL_PTR)
    1524:	80 91 85 01 	lds	r24, 0x0185
    1528:	90 91 86 01 	lds	r25, 0x0186
    152c:	00 97       	sbiw	r24, 0x00	; 0
    152e:	29 f0       	breq	.+10     	; 0x153a <__vector_9+0x40>
    {
        /** Call the callback function */
        (*g_CallBackTimer1)();
    1530:	e0 91 85 01 	lds	r30, 0x0185
    1534:	f0 91 86 01 	lds	r31, 0x0186
    1538:	09 95       	icall
    }
}
    153a:	cf 91       	pop	r28
    153c:	df 91       	pop	r29
    153e:	ff 91       	pop	r31
    1540:	ef 91       	pop	r30
    1542:	bf 91       	pop	r27
    1544:	af 91       	pop	r26
    1546:	9f 91       	pop	r25
    1548:	8f 91       	pop	r24
    154a:	7f 91       	pop	r23
    154c:	6f 91       	pop	r22
    154e:	5f 91       	pop	r21
    1550:	4f 91       	pop	r20
    1552:	3f 91       	pop	r19
    1554:	2f 91       	pop	r18
    1556:	0f 90       	pop	r0
    1558:	0f be       	out	0x3f, r0	; 63
    155a:	0f 90       	pop	r0
    155c:	1f 90       	pop	r1
    155e:	18 95       	reti

00001560 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    1560:	1f 92       	push	r1
    1562:	0f 92       	push	r0
    1564:	0f b6       	in	r0, 0x3f	; 63
    1566:	0f 92       	push	r0
    1568:	11 24       	eor	r1, r1
    156a:	2f 93       	push	r18
    156c:	3f 93       	push	r19
    156e:	4f 93       	push	r20
    1570:	5f 93       	push	r21
    1572:	6f 93       	push	r22
    1574:	7f 93       	push	r23
    1576:	8f 93       	push	r24
    1578:	9f 93       	push	r25
    157a:	af 93       	push	r26
    157c:	bf 93       	push	r27
    157e:	ef 93       	push	r30
    1580:	ff 93       	push	r31
    1582:	df 93       	push	r29
    1584:	cf 93       	push	r28
    1586:	cd b7       	in	r28, 0x3d	; 61
    1588:	de b7       	in	r29, 0x3e	; 62
    if(g_CallBackTimer1 != NULL_PTR)
    158a:	80 91 85 01 	lds	r24, 0x0185
    158e:	90 91 86 01 	lds	r25, 0x0186
    1592:	00 97       	sbiw	r24, 0x00	; 0
    1594:	29 f0       	breq	.+10     	; 0x15a0 <__vector_7+0x40>
    {
        /** Call the callback function */
        (*g_CallBackTimer1)();
    1596:	e0 91 85 01 	lds	r30, 0x0185
    159a:	f0 91 86 01 	lds	r31, 0x0186
    159e:	09 95       	icall
    }
}
    15a0:	cf 91       	pop	r28
    15a2:	df 91       	pop	r29
    15a4:	ff 91       	pop	r31
    15a6:	ef 91       	pop	r30
    15a8:	bf 91       	pop	r27
    15aa:	af 91       	pop	r26
    15ac:	9f 91       	pop	r25
    15ae:	8f 91       	pop	r24
    15b0:	7f 91       	pop	r23
    15b2:	6f 91       	pop	r22
    15b4:	5f 91       	pop	r21
    15b6:	4f 91       	pop	r20
    15b8:	3f 91       	pop	r19
    15ba:	2f 91       	pop	r18
    15bc:	0f 90       	pop	r0
    15be:	0f be       	out	0x3f, r0	; 63
    15c0:	0f 90       	pop	r0
    15c2:	1f 90       	pop	r1
    15c4:	18 95       	reti

000015c6 <__vector_5>:

ISR(TIMER2_OVF_vect)
{
    15c6:	1f 92       	push	r1
    15c8:	0f 92       	push	r0
    15ca:	0f b6       	in	r0, 0x3f	; 63
    15cc:	0f 92       	push	r0
    15ce:	11 24       	eor	r1, r1
    15d0:	2f 93       	push	r18
    15d2:	3f 93       	push	r19
    15d4:	4f 93       	push	r20
    15d6:	5f 93       	push	r21
    15d8:	6f 93       	push	r22
    15da:	7f 93       	push	r23
    15dc:	8f 93       	push	r24
    15de:	9f 93       	push	r25
    15e0:	af 93       	push	r26
    15e2:	bf 93       	push	r27
    15e4:	ef 93       	push	r30
    15e6:	ff 93       	push	r31
    15e8:	df 93       	push	r29
    15ea:	cf 93       	push	r28
    15ec:	cd b7       	in	r28, 0x3d	; 61
    15ee:	de b7       	in	r29, 0x3e	; 62
    if(g_CallBackTimer2 != NULL_PTR)
    15f0:	80 91 87 01 	lds	r24, 0x0187
    15f4:	90 91 88 01 	lds	r25, 0x0188
    15f8:	00 97       	sbiw	r24, 0x00	; 0
    15fa:	29 f0       	breq	.+10     	; 0x1606 <__vector_5+0x40>
    {
        /** Call the callback function */
        (*g_CallBackTimer2)();
    15fc:	e0 91 87 01 	lds	r30, 0x0187
    1600:	f0 91 88 01 	lds	r31, 0x0188
    1604:	09 95       	icall
    }
}
    1606:	cf 91       	pop	r28
    1608:	df 91       	pop	r29
    160a:	ff 91       	pop	r31
    160c:	ef 91       	pop	r30
    160e:	bf 91       	pop	r27
    1610:	af 91       	pop	r26
    1612:	9f 91       	pop	r25
    1614:	8f 91       	pop	r24
    1616:	7f 91       	pop	r23
    1618:	6f 91       	pop	r22
    161a:	5f 91       	pop	r21
    161c:	4f 91       	pop	r20
    161e:	3f 91       	pop	r19
    1620:	2f 91       	pop	r18
    1622:	0f 90       	pop	r0
    1624:	0f be       	out	0x3f, r0	; 63
    1626:	0f 90       	pop	r0
    1628:	1f 90       	pop	r1
    162a:	18 95       	reti

0000162c <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    162c:	1f 92       	push	r1
    162e:	0f 92       	push	r0
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	0f 92       	push	r0
    1634:	11 24       	eor	r1, r1
    1636:	2f 93       	push	r18
    1638:	3f 93       	push	r19
    163a:	4f 93       	push	r20
    163c:	5f 93       	push	r21
    163e:	6f 93       	push	r22
    1640:	7f 93       	push	r23
    1642:	8f 93       	push	r24
    1644:	9f 93       	push	r25
    1646:	af 93       	push	r26
    1648:	bf 93       	push	r27
    164a:	ef 93       	push	r30
    164c:	ff 93       	push	r31
    164e:	df 93       	push	r29
    1650:	cf 93       	push	r28
    1652:	cd b7       	in	r28, 0x3d	; 61
    1654:	de b7       	in	r29, 0x3e	; 62
    if(g_CallBackTimer2 != NULL_PTR)
    1656:	80 91 87 01 	lds	r24, 0x0187
    165a:	90 91 88 01 	lds	r25, 0x0188
    165e:	00 97       	sbiw	r24, 0x00	; 0
    1660:	29 f0       	breq	.+10     	; 0x166c <__vector_4+0x40>
    {
        /** Call the callback function */
        (*g_CallBackTimer2)();
    1662:	e0 91 87 01 	lds	r30, 0x0187
    1666:	f0 91 88 01 	lds	r31, 0x0188
    166a:	09 95       	icall
    }
}
    166c:	cf 91       	pop	r28
    166e:	df 91       	pop	r29
    1670:	ff 91       	pop	r31
    1672:	ef 91       	pop	r30
    1674:	bf 91       	pop	r27
    1676:	af 91       	pop	r26
    1678:	9f 91       	pop	r25
    167a:	8f 91       	pop	r24
    167c:	7f 91       	pop	r23
    167e:	6f 91       	pop	r22
    1680:	5f 91       	pop	r21
    1682:	4f 91       	pop	r20
    1684:	3f 91       	pop	r19
    1686:	2f 91       	pop	r18
    1688:	0f 90       	pop	r0
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	0f 90       	pop	r0
    168e:	1f 90       	pop	r1
    1690:	18 95       	reti

00001692 <Timer_init>:
 * based on the configuration provided in the Timer_ConfigType structure.
 * It sets the timer mode (Normal or Compare Match), configures the clock source,
 * enables interrupts as needed, loads compare match values, and clears the timer counter.
 */
void Timer_init(const Timer_ConfigType * Config_Ptr)
{
    1692:	df 93       	push	r29
    1694:	cf 93       	push	r28
    1696:	00 d0       	rcall	.+0      	; 0x1698 <Timer_init+0x6>
    1698:	00 d0       	rcall	.+0      	; 0x169a <Timer_init+0x8>
    169a:	cd b7       	in	r28, 0x3d	; 61
    169c:	de b7       	in	r29, 0x3e	; 62
    169e:	9a 83       	std	Y+2, r25	; 0x02
    16a0:	89 83       	std	Y+1, r24	; 0x01
	switch (Config_Ptr ->timer_ID)
    16a2:	e9 81       	ldd	r30, Y+1	; 0x01
    16a4:	fa 81       	ldd	r31, Y+2	; 0x02
    16a6:	84 81       	ldd	r24, Z+4	; 0x04
    16a8:	28 2f       	mov	r18, r24
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	3c 83       	std	Y+4, r19	; 0x04
    16ae:	2b 83       	std	Y+3, r18	; 0x03
    16b0:	8b 81       	ldd	r24, Y+3	; 0x03
    16b2:	9c 81       	ldd	r25, Y+4	; 0x04
    16b4:	81 30       	cpi	r24, 0x01	; 1
    16b6:	91 05       	cpc	r25, r1
    16b8:	09 f4       	brne	.+2      	; 0x16bc <Timer_init+0x2a>
    16ba:	42 c0       	rjmp	.+132    	; 0x1740 <Timer_init+0xae>
    16bc:	2b 81       	ldd	r18, Y+3	; 0x03
    16be:	3c 81       	ldd	r19, Y+4	; 0x04
    16c0:	22 30       	cpi	r18, 0x02	; 2
    16c2:	31 05       	cpc	r19, r1
    16c4:	09 f4       	brne	.+2      	; 0x16c8 <Timer_init+0x36>
    16c6:	7a c0       	rjmp	.+244    	; 0x17bc <Timer_init+0x12a>
    16c8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ca:	9c 81       	ldd	r25, Y+4	; 0x04
    16cc:	00 97       	sbiw	r24, 0x00	; 0
    16ce:	09 f0       	breq	.+2      	; 0x16d2 <Timer_init+0x40>
    16d0:	aa c0       	rjmp	.+340    	; 0x1826 <Timer_init+0x194>
	{
		case Timer_0:
			/* Clear Timer 0 counter */
			TCNT0 = Config_Ptr -> timer_InitialValue;
    16d2:	a2 e5       	ldi	r26, 0x52	; 82
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	e9 81       	ldd	r30, Y+1	; 0x01
    16d8:	fa 81       	ldd	r31, Y+2	; 0x02
    16da:	80 81       	ld	r24, Z
    16dc:	91 81       	ldd	r25, Z+1	; 0x01
    16de:	8c 93       	st	X, r24

			/* Check if Timer 0 is in Normal Mode */
			if(Config_Ptr -> timer_mode == NORMAL_MODE) {
    16e0:	e9 81       	ldd	r30, Y+1	; 0x01
    16e2:	fa 81       	ldd	r31, Y+2	; 0x02
    16e4:	86 81       	ldd	r24, Z+6	; 0x06
    16e6:	88 23       	and	r24, r24
    16e8:	79 f4       	brne	.+30     	; 0x1708 <Timer_init+0x76>
				/* Enable Timer 0 Overflow Interrupt */
				TIMSK |= (1 << TOIE0);
    16ea:	a9 e5       	ldi	r26, 0x59	; 89
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	e9 e5       	ldi	r30, 0x59	; 89
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	81 60       	ori	r24, 0x01	; 1
    16f6:	8c 93       	st	X, r24
				/* Set Timer 0 to Normal Mode and configure the clock source */
				TCCR0 = (1 << FOC0) | (Config_Ptr -> timer_clock);
    16f8:	a3 e5       	ldi	r26, 0x53	; 83
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	e9 81       	ldd	r30, Y+1	; 0x01
    16fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1700:	85 81       	ldd	r24, Z+5	; 0x05
    1702:	80 68       	ori	r24, 0x80	; 128
    1704:	8c 93       	st	X, r24
    1706:	8f c0       	rjmp	.+286    	; 0x1826 <Timer_init+0x194>
			}
			/* Check if Timer 0 is in Compare Match Mode */
			else if(Config_Ptr -> timer_mode == COMPARE_MODE) {
    1708:	e9 81       	ldd	r30, Y+1	; 0x01
    170a:	fa 81       	ldd	r31, Y+2	; 0x02
    170c:	86 81       	ldd	r24, Z+6	; 0x06
    170e:	81 30       	cpi	r24, 0x01	; 1
    1710:	09 f0       	breq	.+2      	; 0x1714 <Timer_init+0x82>
    1712:	89 c0       	rjmp	.+274    	; 0x1826 <Timer_init+0x194>
				/* Set the compare match value for Timer 0 */
				OCR0 = Config_Ptr -> timer_compare_MatchValue;
    1714:	ac e5       	ldi	r26, 0x5C	; 92
    1716:	b0 e0       	ldi	r27, 0x00	; 0
    1718:	e9 81       	ldd	r30, Y+1	; 0x01
    171a:	fa 81       	ldd	r31, Y+2	; 0x02
    171c:	82 81       	ldd	r24, Z+2	; 0x02
    171e:	93 81       	ldd	r25, Z+3	; 0x03
    1720:	8c 93       	st	X, r24
				/* Enable Timer 0 Compare Match Interrupt */
				TIMSK |= (1 << OCIE0);
    1722:	a9 e5       	ldi	r26, 0x59	; 89
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	e9 e5       	ldi	r30, 0x59	; 89
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	82 60       	ori	r24, 0x02	; 2
    172e:	8c 93       	st	X, r24
				/* Set Timer 0 to Compare Match Mode and configure the clock source */
				TCCR0 = (1 << FOC0) | (1 << WGM01) | (Config_Ptr -> timer_clock);
    1730:	a3 e5       	ldi	r26, 0x53	; 83
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	e9 81       	ldd	r30, Y+1	; 0x01
    1736:	fa 81       	ldd	r31, Y+2	; 0x02
    1738:	85 81       	ldd	r24, Z+5	; 0x05
    173a:	88 68       	ori	r24, 0x88	; 136
    173c:	8c 93       	st	X, r24
    173e:	73 c0       	rjmp	.+230    	; 0x1826 <Timer_init+0x194>
			}
			break;

		case Timer_1:
			/* Clear Timer 1 counter */
			TCNT1 = Config_Ptr -> timer_InitialValue;
    1740:	ac e4       	ldi	r26, 0x4C	; 76
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	e9 81       	ldd	r30, Y+1	; 0x01
    1746:	fa 81       	ldd	r31, Y+2	; 0x02
    1748:	80 81       	ld	r24, Z
    174a:	91 81       	ldd	r25, Z+1	; 0x01
    174c:	11 96       	adiw	r26, 0x01	; 1
    174e:	9c 93       	st	X, r25
    1750:	8e 93       	st	-X, r24

			/* Check if Timer 1 is in Normal Mode */
			if(Config_Ptr -> timer_mode == NORMAL_MODE) {
    1752:	e9 81       	ldd	r30, Y+1	; 0x01
    1754:	fa 81       	ldd	r31, Y+2	; 0x02
    1756:	86 81       	ldd	r24, Z+6	; 0x06
    1758:	88 23       	and	r24, r24
    175a:	71 f4       	brne	.+28     	; 0x1778 <Timer_init+0xe6>
				/* Enable Timer 1 Overflow Interrupt */
				TIMSK |= (1 << TOIE1);
    175c:	a9 e5       	ldi	r26, 0x59	; 89
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	e9 e5       	ldi	r30, 0x59	; 89
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	84 60       	ori	r24, 0x04	; 4
    1768:	8c 93       	st	X, r24
				/* Set Timer 1 to Normal Mode and configure the clock source */
				TCCR1B = (Config_Ptr -> timer_clock);
    176a:	ae e4       	ldi	r26, 0x4E	; 78
    176c:	b0 e0       	ldi	r27, 0x00	; 0
    176e:	e9 81       	ldd	r30, Y+1	; 0x01
    1770:	fa 81       	ldd	r31, Y+2	; 0x02
    1772:	85 81       	ldd	r24, Z+5	; 0x05
    1774:	8c 93       	st	X, r24
    1776:	57 c0       	rjmp	.+174    	; 0x1826 <Timer_init+0x194>
			}
			/* Check if Timer 1 is in Compare Match Mode */
			else if(Config_Ptr -> timer_mode == COMPARE_MODE) {
    1778:	e9 81       	ldd	r30, Y+1	; 0x01
    177a:	fa 81       	ldd	r31, Y+2	; 0x02
    177c:	86 81       	ldd	r24, Z+6	; 0x06
    177e:	81 30       	cpi	r24, 0x01	; 1
    1780:	09 f0       	breq	.+2      	; 0x1784 <Timer_init+0xf2>
    1782:	51 c0       	rjmp	.+162    	; 0x1826 <Timer_init+0x194>
				/* Set the compare match value for Timer 1 (Channel A) */
				OCR1A = Config_Ptr -> timer_compare_MatchValue;
    1784:	aa e4       	ldi	r26, 0x4A	; 74
    1786:	b0 e0       	ldi	r27, 0x00	; 0
    1788:	e9 81       	ldd	r30, Y+1	; 0x01
    178a:	fa 81       	ldd	r31, Y+2	; 0x02
    178c:	82 81       	ldd	r24, Z+2	; 0x02
    178e:	93 81       	ldd	r25, Z+3	; 0x03
    1790:	11 96       	adiw	r26, 0x01	; 1
    1792:	9c 93       	st	X, r25
    1794:	8e 93       	st	-X, r24
				/* Enable Timer 1 Compare Match A Interrupt */
				TIMSK |= (1 << OCIE1A);
    1796:	a9 e5       	ldi	r26, 0x59	; 89
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	e9 e5       	ldi	r30, 0x59	; 89
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	80 61       	ori	r24, 0x10	; 16
    17a2:	8c 93       	st	X, r24
				/* Force Output Compare for Channel A in non-PWM mode */
				TCCR1A = (1 << FOC1A);
    17a4:	ef e4       	ldi	r30, 0x4F	; 79
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	88 e0       	ldi	r24, 0x08	; 8
    17aa:	80 83       	st	Z, r24
				/* Set Timer 1 to CTC Mode (Clear Timer on Compare Match) and configure the clock source */
				TCCR1B = (1 << WGM12) | (Config_Ptr -> timer_clock);
    17ac:	ae e4       	ldi	r26, 0x4E	; 78
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	e9 81       	ldd	r30, Y+1	; 0x01
    17b2:	fa 81       	ldd	r31, Y+2	; 0x02
    17b4:	85 81       	ldd	r24, Z+5	; 0x05
    17b6:	88 60       	ori	r24, 0x08	; 8
    17b8:	8c 93       	st	X, r24
    17ba:	35 c0       	rjmp	.+106    	; 0x1826 <Timer_init+0x194>
			}
			break;

		case Timer_2:
			/* Clear Timer 2 counter */
			TCNT2 = Config_Ptr -> timer_InitialValue;
    17bc:	a4 e4       	ldi	r26, 0x44	; 68
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	e9 81       	ldd	r30, Y+1	; 0x01
    17c2:	fa 81       	ldd	r31, Y+2	; 0x02
    17c4:	80 81       	ld	r24, Z
    17c6:	91 81       	ldd	r25, Z+1	; 0x01
    17c8:	8c 93       	st	X, r24

			/* Check if Timer 2 is in Normal Mode */
			if(Config_Ptr -> timer_mode == NORMAL_MODE) {
    17ca:	e9 81       	ldd	r30, Y+1	; 0x01
    17cc:	fa 81       	ldd	r31, Y+2	; 0x02
    17ce:	86 81       	ldd	r24, Z+6	; 0x06
    17d0:	88 23       	and	r24, r24
    17d2:	79 f4       	brne	.+30     	; 0x17f2 <Timer_init+0x160>
				/* Enable Timer 2 Overflow Interrupt */
				TIMSK |= (1 << TOIE2);
    17d4:	a9 e5       	ldi	r26, 0x59	; 89
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	e9 e5       	ldi	r30, 0x59	; 89
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	80 64       	ori	r24, 0x40	; 64
    17e0:	8c 93       	st	X, r24
				/* Set Timer 2 to Normal Mode and configure the clock source */
				TCCR2 = (1 << FOC2) | (Config_Ptr -> timer_clock);
    17e2:	a5 e4       	ldi	r26, 0x45	; 69
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	e9 81       	ldd	r30, Y+1	; 0x01
    17e8:	fa 81       	ldd	r31, Y+2	; 0x02
    17ea:	85 81       	ldd	r24, Z+5	; 0x05
    17ec:	80 68       	ori	r24, 0x80	; 128
    17ee:	8c 93       	st	X, r24
    17f0:	1a c0       	rjmp	.+52     	; 0x1826 <Timer_init+0x194>
			}
			/* Check if Timer 2 is in Compare Match Mode */
			else if(Config_Ptr -> timer_mode == COMPARE_MODE) {
    17f2:	e9 81       	ldd	r30, Y+1	; 0x01
    17f4:	fa 81       	ldd	r31, Y+2	; 0x02
    17f6:	86 81       	ldd	r24, Z+6	; 0x06
    17f8:	81 30       	cpi	r24, 0x01	; 1
    17fa:	a9 f4       	brne	.+42     	; 0x1826 <Timer_init+0x194>
				/* Set the compare match value for Timer 2 */
				OCR2 = Config_Ptr -> timer_compare_MatchValue;
    17fc:	a3 e4       	ldi	r26, 0x43	; 67
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	e9 81       	ldd	r30, Y+1	; 0x01
    1802:	fa 81       	ldd	r31, Y+2	; 0x02
    1804:	82 81       	ldd	r24, Z+2	; 0x02
    1806:	93 81       	ldd	r25, Z+3	; 0x03
    1808:	8c 93       	st	X, r24
				/* Enable Timer 2 Compare Match Interrupt */
				TIMSK |= (1 << OCIE2);
    180a:	a9 e5       	ldi	r26, 0x59	; 89
    180c:	b0 e0       	ldi	r27, 0x00	; 0
    180e:	e9 e5       	ldi	r30, 0x59	; 89
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	80 68       	ori	r24, 0x80	; 128
    1816:	8c 93       	st	X, r24
				/* Set Timer 2 to Compare Match Mode and configure the clock source */
				TCCR2 = (1 << FOC2) | (1 << WGM21) | (Config_Ptr -> timer_clock);
    1818:	a5 e4       	ldi	r26, 0x45	; 69
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	e9 81       	ldd	r30, Y+1	; 0x01
    181e:	fa 81       	ldd	r31, Y+2	; 0x02
    1820:	85 81       	ldd	r24, Z+5	; 0x05
    1822:	88 68       	ori	r24, 0x88	; 136
    1824:	8c 93       	st	X, r24
			}
			break;
	}
}
    1826:	0f 90       	pop	r0
    1828:	0f 90       	pop	r0
    182a:	0f 90       	pop	r0
    182c:	0f 90       	pop	r0
    182e:	cf 91       	pop	r28
    1830:	df 91       	pop	r29
    1832:	08 95       	ret

00001834 <Timer_deInit>:

/*Disabling all registers*/
void Timer_deInit(Timer_ID_Type timer_type)
{
    1834:	df 93       	push	r29
    1836:	cf 93       	push	r28
    1838:	00 d0       	rcall	.+0      	; 0x183a <Timer_deInit+0x6>
    183a:	0f 92       	push	r0
    183c:	cd b7       	in	r28, 0x3d	; 61
    183e:	de b7       	in	r29, 0x3e	; 62
    1840:	89 83       	std	Y+1, r24	; 0x01
    switch (timer_type)
    1842:	89 81       	ldd	r24, Y+1	; 0x01
    1844:	28 2f       	mov	r18, r24
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	3b 83       	std	Y+3, r19	; 0x03
    184a:	2a 83       	std	Y+2, r18	; 0x02
    184c:	8a 81       	ldd	r24, Y+2	; 0x02
    184e:	9b 81       	ldd	r25, Y+3	; 0x03
    1850:	81 30       	cpi	r24, 0x01	; 1
    1852:	91 05       	cpc	r25, r1
    1854:	d1 f0       	breq	.+52     	; 0x188a <Timer_deInit+0x56>
    1856:	2a 81       	ldd	r18, Y+2	; 0x02
    1858:	3b 81       	ldd	r19, Y+3	; 0x03
    185a:	22 30       	cpi	r18, 0x02	; 2
    185c:	31 05       	cpc	r19, r1
    185e:	79 f1       	breq	.+94     	; 0x18be <Timer_deInit+0x8a>
    1860:	8a 81       	ldd	r24, Y+2	; 0x02
    1862:	9b 81       	ldd	r25, Y+3	; 0x03
    1864:	00 97       	sbiw	r24, 0x00	; 0
    1866:	d9 f5       	brne	.+118    	; 0x18de <Timer_deInit+0xaa>
    {

        case Timer_0:
            /* Reset all relevant Timer 0 registers to 0 */
            TCCR0 = 0;   /* Disable clock and reset mode */
    1868:	e3 e5       	ldi	r30, 0x53	; 83
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	10 82       	st	Z, r1
            TIMSK &= ~( (1 << TOIE0) | (1 << OCIE0) ); /* Disable interrupts */
    186e:	a9 e5       	ldi	r26, 0x59	; 89
    1870:	b0 e0       	ldi	r27, 0x00	; 0
    1872:	e9 e5       	ldi	r30, 0x59	; 89
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	80 81       	ld	r24, Z
    1878:	8c 7f       	andi	r24, 0xFC	; 252
    187a:	8c 93       	st	X, r24
            TCNT0 = 0;   /* Clear counter */
    187c:	e2 e5       	ldi	r30, 0x52	; 82
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	10 82       	st	Z, r1
            OCR0 = 0;    /* Clear compare match register */
    1882:	ec e5       	ldi	r30, 0x5C	; 92
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	10 82       	st	Z, r1
    1888:	2a c0       	rjmp	.+84     	; 0x18de <Timer_deInit+0xaa>
            break;

        case Timer_1:
            TCCR1A = 0;  /* Reset mode and FOC bits */
    188a:	ef e4       	ldi	r30, 0x4F	; 79
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	10 82       	st	Z, r1
            TCCR1B = 0;  /* Disable clock */
    1890:	ee e4       	ldi	r30, 0x4E	; 78
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	10 82       	st	Z, r1
            TIMSK &= ~( (1 << TOIE1) | (1 << OCIE1A) | (1 << OCIE1B) ); /* Disable interrupts */
    1896:	a9 e5       	ldi	r26, 0x59	; 89
    1898:	b0 e0       	ldi	r27, 0x00	; 0
    189a:	e9 e5       	ldi	r30, 0x59	; 89
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	83 7e       	andi	r24, 0xE3	; 227
    18a2:	8c 93       	st	X, r24
            TCNT1 = 0;   /* Clear counter */
    18a4:	ec e4       	ldi	r30, 0x4C	; 76
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	11 82       	std	Z+1, r1	; 0x01
    18aa:	10 82       	st	Z, r1
            OCR1A = 0;   /* Clear compare match register A */
    18ac:	ea e4       	ldi	r30, 0x4A	; 74
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	11 82       	std	Z+1, r1	; 0x01
    18b2:	10 82       	st	Z, r1
            OCR1B = 0;   /* Clear compare match register B */
    18b4:	e8 e4       	ldi	r30, 0x48	; 72
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	11 82       	std	Z+1, r1	; 0x01
    18ba:	10 82       	st	Z, r1
    18bc:	10 c0       	rjmp	.+32     	; 0x18de <Timer_deInit+0xaa>
            break;

        case Timer_2:
            TCCR2 = 0;   /* Disable clock and reset mode */
    18be:	e5 e4       	ldi	r30, 0x45	; 69
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	10 82       	st	Z, r1
            TIMSK &= ~( (1 << TOIE2) | (1 << OCIE2) ); /* Disable interrupts */
    18c4:	a9 e5       	ldi	r26, 0x59	; 89
    18c6:	b0 e0       	ldi	r27, 0x00	; 0
    18c8:	e9 e5       	ldi	r30, 0x59	; 89
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	80 81       	ld	r24, Z
    18ce:	8f 73       	andi	r24, 0x3F	; 63
    18d0:	8c 93       	st	X, r24
            TCNT2 = 0;   /* Clear counter */
    18d2:	e4 e4       	ldi	r30, 0x44	; 68
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	10 82       	st	Z, r1
            OCR2 = 0;    /* Clear compare match register */
    18d8:	e3 e4       	ldi	r30, 0x43	; 67
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	10 82       	st	Z, r1
            break;
    }
}
    18de:	0f 90       	pop	r0
    18e0:	0f 90       	pop	r0
    18e2:	0f 90       	pop	r0
    18e4:	cf 91       	pop	r28
    18e6:	df 91       	pop	r29
    18e8:	08 95       	ret

000018ea <Timer_setCallBack>:

void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type a_timer_ID )
{
    18ea:	df 93       	push	r29
    18ec:	cf 93       	push	r28
    18ee:	00 d0       	rcall	.+0      	; 0x18f0 <Timer_setCallBack+0x6>
    18f0:	00 d0       	rcall	.+0      	; 0x18f2 <Timer_setCallBack+0x8>
    18f2:	0f 92       	push	r0
    18f4:	cd b7       	in	r28, 0x3d	; 61
    18f6:	de b7       	in	r29, 0x3e	; 62
    18f8:	9a 83       	std	Y+2, r25	; 0x02
    18fa:	89 83       	std	Y+1, r24	; 0x01
    18fc:	6b 83       	std	Y+3, r22	; 0x03
    switch (a_timer_ID)
    18fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1900:	28 2f       	mov	r18, r24
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	3d 83       	std	Y+5, r19	; 0x05
    1906:	2c 83       	std	Y+4, r18	; 0x04
    1908:	8c 81       	ldd	r24, Y+4	; 0x04
    190a:	9d 81       	ldd	r25, Y+5	; 0x05
    190c:	81 30       	cpi	r24, 0x01	; 1
    190e:	91 05       	cpc	r25, r1
    1910:	81 f0       	breq	.+32     	; 0x1932 <Timer_setCallBack+0x48>
    1912:	2c 81       	ldd	r18, Y+4	; 0x04
    1914:	3d 81       	ldd	r19, Y+5	; 0x05
    1916:	22 30       	cpi	r18, 0x02	; 2
    1918:	31 05       	cpc	r19, r1
    191a:	91 f0       	breq	.+36     	; 0x1940 <Timer_setCallBack+0x56>
    191c:	8c 81       	ldd	r24, Y+4	; 0x04
    191e:	9d 81       	ldd	r25, Y+5	; 0x05
    1920:	00 97       	sbiw	r24, 0x00	; 0
    1922:	a1 f4       	brne	.+40     	; 0x194c <Timer_setCallBack+0x62>
    {
        case Timer_0:
        	g_CallBackTimer0 = a_ptr;
    1924:	89 81       	ldd	r24, Y+1	; 0x01
    1926:	9a 81       	ldd	r25, Y+2	; 0x02
    1928:	90 93 84 01 	sts	0x0184, r25
    192c:	80 93 83 01 	sts	0x0183, r24
    1930:	0d c0       	rjmp	.+26     	; 0x194c <Timer_setCallBack+0x62>
            break;

        case Timer_1:
        	g_CallBackTimer1 = a_ptr;
    1932:	89 81       	ldd	r24, Y+1	; 0x01
    1934:	9a 81       	ldd	r25, Y+2	; 0x02
    1936:	90 93 86 01 	sts	0x0186, r25
    193a:	80 93 85 01 	sts	0x0185, r24
    193e:	06 c0       	rjmp	.+12     	; 0x194c <Timer_setCallBack+0x62>
            break;

        case Timer_2:
        	g_CallBackTimer2 = a_ptr;
    1940:	89 81       	ldd	r24, Y+1	; 0x01
    1942:	9a 81       	ldd	r25, Y+2	; 0x02
    1944:	90 93 88 01 	sts	0x0188, r25
    1948:	80 93 87 01 	sts	0x0187, r24
            break;
    }
}
    194c:	0f 90       	pop	r0
    194e:	0f 90       	pop	r0
    1950:	0f 90       	pop	r0
    1952:	0f 90       	pop	r0
    1954:	0f 90       	pop	r0
    1956:	cf 91       	pop	r28
    1958:	df 91       	pop	r29
    195a:	08 95       	ret

0000195c <UART_Init>:
#include <avr/io.h>
#include "common_macros.h"


void UART_Init(UART_Config *UART_configPtr)
{
    195c:	df 93       	push	r29
    195e:	cf 93       	push	r28
    1960:	00 d0       	rcall	.+0      	; 0x1962 <UART_Init+0x6>
    1962:	00 d0       	rcall	.+0      	; 0x1964 <UART_Init+0x8>
    1964:	cd b7       	in	r28, 0x3d	; 61
    1966:	de b7       	in	r29, 0x3e	; 62
    1968:	9c 83       	std	Y+4, r25	; 0x04
    196a:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    196c:	1a 82       	std	Y+2, r1	; 0x02
    196e:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA |= (1 << U2X);
    1970:	ab e2       	ldi	r26, 0x2B	; 43
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	eb e2       	ldi	r30, 0x2B	; 43
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	82 60       	ori	r24, 0x02	; 2
    197c:	8c 93       	st	X, r24




	UCSRC = (1 << URSEL); /*URSEL = 1 The URSEL must be one when writing the UCSRC*/
    197e:	e0 e4       	ldi	r30, 0x40	; 64
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 e8       	ldi	r24, 0x80	; 128
    1984:	80 83       	st	Z, r24
	UCSRC |= (UART_configPtr->parityType << 4); /* Set UPM1:0 (bit 5:4) for parity mode */
    1986:	a0 e4       	ldi	r26, 0x40	; 64
    1988:	b0 e0       	ldi	r27, 0x00	; 0
    198a:	e0 e4       	ldi	r30, 0x40	; 64
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	28 2f       	mov	r18, r24
    1992:	eb 81       	ldd	r30, Y+3	; 0x03
    1994:	fc 81       	ldd	r31, Y+4	; 0x04
    1996:	82 81       	ldd	r24, Z+2	; 0x02
    1998:	88 2f       	mov	r24, r24
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	82 95       	swap	r24
    199e:	92 95       	swap	r25
    19a0:	90 7f       	andi	r25, 0xF0	; 240
    19a2:	98 27       	eor	r25, r24
    19a4:	80 7f       	andi	r24, 0xF0	; 240
    19a6:	98 27       	eor	r25, r24
    19a8:	82 2b       	or	r24, r18
    19aa:	8c 93       	st	X, r24
	UCSRC |= (UART_configPtr->stopSelect << 3); /* Set USBS (bit 3) for stop bit selection */
    19ac:	a0 e4       	ldi	r26, 0x40	; 64
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	e0 e4       	ldi	r30, 0x40	; 64
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	28 2f       	mov	r18, r24
    19b8:	eb 81       	ldd	r30, Y+3	; 0x03
    19ba:	fc 81       	ldd	r31, Y+4	; 0x04
    19bc:	84 81       	ldd	r24, Z+4	; 0x04
    19be:	88 2f       	mov	r24, r24
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	88 0f       	add	r24, r24
    19c4:	99 1f       	adc	r25, r25
    19c6:	88 0f       	add	r24, r24
    19c8:	99 1f       	adc	r25, r25
    19ca:	88 0f       	add	r24, r24
    19cc:	99 1f       	adc	r25, r25
    19ce:	82 2b       	or	r24, r18
    19d0:	8c 93       	st	X, r24
	UCSRC |= (UART_configPtr->characterSize << 1); /* Set UCSZ1:0 (bit 2:1) for character size */
    19d2:	a0 e4       	ldi	r26, 0x40	; 64
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	e0 e4       	ldi	r30, 0x40	; 64
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	28 2f       	mov	r18, r24
    19de:	eb 81       	ldd	r30, Y+3	; 0x03
    19e0:	fc 81       	ldd	r31, Y+4	; 0x04
    19e2:	83 81       	ldd	r24, Z+3	; 0x03
    19e4:	88 2f       	mov	r24, r24
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	88 0f       	add	r24, r24
    19ea:	99 1f       	adc	r25, r25
    19ec:	82 2b       	or	r24, r18
    19ee:	8c 93       	st	X, r24




	/* Calculate the UBRR register value */
	ubrr_value = (uint16) (((F_CPU / (UART_configPtr->baudRate * 8UL))) - 1);
    19f0:	eb 81       	ldd	r30, Y+3	; 0x03
    19f2:	fc 81       	ldd	r31, Y+4	; 0x04
    19f4:	80 81       	ld	r24, Z
    19f6:	91 81       	ldd	r25, Z+1	; 0x01
    19f8:	cc 01       	movw	r24, r24
    19fa:	a0 e0       	ldi	r26, 0x00	; 0
    19fc:	b0 e0       	ldi	r27, 0x00	; 0
    19fe:	88 0f       	add	r24, r24
    1a00:	99 1f       	adc	r25, r25
    1a02:	aa 1f       	adc	r26, r26
    1a04:	bb 1f       	adc	r27, r27
    1a06:	88 0f       	add	r24, r24
    1a08:	99 1f       	adc	r25, r25
    1a0a:	aa 1f       	adc	r26, r26
    1a0c:	bb 1f       	adc	r27, r27
    1a0e:	88 0f       	add	r24, r24
    1a10:	99 1f       	adc	r25, r25
    1a12:	aa 1f       	adc	r26, r26
    1a14:	bb 1f       	adc	r27, r27
    1a16:	9c 01       	movw	r18, r24
    1a18:	ad 01       	movw	r20, r26
    1a1a:	80 e0       	ldi	r24, 0x00	; 0
    1a1c:	92 e1       	ldi	r25, 0x12	; 18
    1a1e:	aa e7       	ldi	r26, 0x7A	; 122
    1a20:	b0 e0       	ldi	r27, 0x00	; 0
    1a22:	bc 01       	movw	r22, r24
    1a24:	cd 01       	movw	r24, r26
    1a26:	0e 94 41 12 	call	0x2482	; 0x2482 <__udivmodsi4>
    1a2a:	da 01       	movw	r26, r20
    1a2c:	c9 01       	movw	r24, r18
    1a2e:	01 97       	sbiw	r24, 0x01	; 1
    1a30:	9a 83       	std	Y+2, r25	; 0x02
    1a32:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value >> 8;
    1a34:	e0 e4       	ldi	r30, 0x40	; 64
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	89 81       	ldd	r24, Y+1	; 0x01
    1a3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a3c:	89 2f       	mov	r24, r25
    1a3e:	99 27       	eor	r25, r25
    1a40:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    1a42:	e9 e2       	ldi	r30, 0x29	; 41
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	89 81       	ldd	r24, Y+1	; 0x01
    1a48:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1 << RXEN) | (1 << TXEN);
    1a4a:	ea e2       	ldi	r30, 0x2A	; 42
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	88 e1       	ldi	r24, 0x18	; 24
    1a50:	80 83       	st	Z, r24
}
    1a52:	0f 90       	pop	r0
    1a54:	0f 90       	pop	r0
    1a56:	0f 90       	pop	r0
    1a58:	0f 90       	pop	r0
    1a5a:	cf 91       	pop	r28
    1a5c:	df 91       	pop	r29
    1a5e:	08 95       	ret

00001a60 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    1a60:	df 93       	push	r29
    1a62:	cf 93       	push	r28
    1a64:	0f 92       	push	r0
    1a66:	cd b7       	in	r28, 0x3d	; 61
    1a68:	de b7       	in	r29, 0x3e	; 62
    1a6a:	89 83       	std	Y+1, r24	; 0x01
	 * UDRE flag indicates that the transmit buffer (UDR) is empty
	 * and ready for the next byte to be transmitted.
	 * The loop continues until UDRE becomes '1', signaling that
	 * data can be written to the UDR register.
	 */
	while(BIT_IS_CLEAR(UCSRA, UART_DATA_REGISTER_EMPTY))   /* Wait until UDRE flag is set (buffer is empty) */
    1a6c:	eb e2       	ldi	r30, 0x2B	; 43
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	88 2f       	mov	r24, r24
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	80 72       	andi	r24, 0x20	; 32
    1a78:	90 70       	andi	r25, 0x00	; 0
    1a7a:	00 97       	sbiw	r24, 0x00	; 0
    1a7c:	b9 f3       	breq	.-18     	; 0x1a6c <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    1a7e:	ec e2       	ldi	r30, 0x2C	; 44
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	89 81       	ldd	r24, Y+1	; 0x01
    1a84:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    1a86:	0f 90       	pop	r0
    1a88:	cf 91       	pop	r28
    1a8a:	df 91       	pop	r29
    1a8c:	08 95       	ret

00001a8e <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    1a8e:	df 93       	push	r29
    1a90:	cf 93       	push	r28
    1a92:	cd b7       	in	r28, 0x3d	; 61
    1a94:	de b7       	in	r29, 0x3e	; 62
	 * The RXC flag indicates that there is data available in the
	 * UART receive buffer (UDR).
	 * The loop continues until RXC becomes '1', signaling that
	 * a byte has been received and can be read from UDR.
	 */
	while(BIT_IS_CLEAR(UCSRA, UART_RECEIVE_COMPLETE))   /* Wait until RXC flag is set (data received) */
    1a96:	eb e2       	ldi	r30, 0x2B	; 43
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	88 23       	and	r24, r24
    1a9e:	dc f7       	brge	.-10     	; 0x1a96 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    1aa0:	ec e2       	ldi	r30, 0x2C	; 44
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
}
    1aa6:	cf 91       	pop	r28
    1aa8:	df 91       	pop	r29
    1aaa:	08 95       	ret

00001aac <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    1aac:	df 93       	push	r29
    1aae:	cf 93       	push	r28
    1ab0:	00 d0       	rcall	.+0      	; 0x1ab2 <UART_sendString+0x6>
    1ab2:	0f 92       	push	r0
    1ab4:	cd b7       	in	r28, 0x3d	; 61
    1ab6:	de b7       	in	r29, 0x3e	; 62
    1ab8:	9b 83       	std	Y+3, r25	; 0x03
    1aba:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1abc:	19 82       	std	Y+1, r1	; 0x01
    1abe:	0e c0       	rjmp	.+28     	; 0x1adc <UART_sendString+0x30>

	/*Send the entire string byte by byte*/
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    1ac0:	89 81       	ldd	r24, Y+1	; 0x01
    1ac2:	28 2f       	mov	r18, r24
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac8:	9b 81       	ldd	r25, Y+3	; 0x03
    1aca:	fc 01       	movw	r30, r24
    1acc:	e2 0f       	add	r30, r18
    1ace:	f3 1f       	adc	r31, r19
    1ad0:	80 81       	ld	r24, Z
    1ad2:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <UART_sendByte>
		i++;
    1ad6:	89 81       	ldd	r24, Y+1	; 0x01
    1ad8:	8f 5f       	subi	r24, 0xFF	; 255
    1ada:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/*Send the entire string byte by byte*/
	while(Str[i] != '\0')
    1adc:	89 81       	ldd	r24, Y+1	; 0x01
    1ade:	28 2f       	mov	r18, r24
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ae6:	fc 01       	movw	r30, r24
    1ae8:	e2 0f       	add	r30, r18
    1aea:	f3 1f       	adc	r31, r19
    1aec:	80 81       	ld	r24, Z
    1aee:	88 23       	and	r24, r24
    1af0:	39 f7       	brne	.-50     	; 0x1ac0 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    1af2:	0f 90       	pop	r0
    1af4:	0f 90       	pop	r0
    1af6:	0f 90       	pop	r0
    1af8:	cf 91       	pop	r28
    1afa:	df 91       	pop	r29
    1afc:	08 95       	ret

00001afe <UART_receiveString>:
 * replaced with a null terminator '\0' to properly terminate the string.
 *
 * Str Pointer to the buffer where the received string will be stored.
 */
void UART_receiveString(uint8 *Str)
{
    1afe:	0f 93       	push	r16
    1b00:	1f 93       	push	r17
    1b02:	df 93       	push	r29
    1b04:	cf 93       	push	r28
    1b06:	00 d0       	rcall	.+0      	; 0x1b08 <UART_receiveString+0xa>
    1b08:	0f 92       	push	r0
    1b0a:	cd b7       	in	r28, 0x3d	; 61
    1b0c:	de b7       	in	r29, 0x3e	; 62
    1b0e:	9b 83       	std	Y+3, r25	; 0x03
    1b10:	8a 83       	std	Y+2, r24	; 0x02
    uint8 i = 0;
    1b12:	19 82       	std	Y+1, r1	; 0x01

    /* Receive the first byte and store it in the buffer */
    Str[i] = UART_recieveByte();
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
    1b16:	28 2f       	mov	r18, r24
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b1e:	8c 01       	movw	r16, r24
    1b20:	02 0f       	add	r16, r18
    1b22:	13 1f       	adc	r17, r19
    1b24:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <UART_recieveByte>
    1b28:	f8 01       	movw	r30, r16
    1b2a:	80 83       	st	Z, r24
    1b2c:	0f c0       	rjmp	.+30     	; 0x1b4c <UART_receiveString+0x4e>

    /* Continue receiving bytes until the '#' character is encountered */
    while(Str[i] != '#')
    {
        i++;
    1b2e:	89 81       	ldd	r24, Y+1	; 0x01
    1b30:	8f 5f       	subi	r24, 0xFF	; 255
    1b32:	89 83       	std	Y+1, r24	; 0x01
        Str[i] = UART_recieveByte();
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
    1b36:	28 2f       	mov	r18, r24
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b3e:	8c 01       	movw	r16, r24
    1b40:	02 0f       	add	r16, r18
    1b42:	13 1f       	adc	r17, r19
    1b44:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <UART_recieveByte>
    1b48:	f8 01       	movw	r30, r16
    1b4a:	80 83       	st	Z, r24

    /* Receive the first byte and store it in the buffer */
    Str[i] = UART_recieveByte();

    /* Continue receiving bytes until the '#' character is encountered */
    while(Str[i] != '#')
    1b4c:	89 81       	ldd	r24, Y+1	; 0x01
    1b4e:	28 2f       	mov	r18, r24
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	8a 81       	ldd	r24, Y+2	; 0x02
    1b54:	9b 81       	ldd	r25, Y+3	; 0x03
    1b56:	fc 01       	movw	r30, r24
    1b58:	e2 0f       	add	r30, r18
    1b5a:	f3 1f       	adc	r31, r19
    1b5c:	80 81       	ld	r24, Z
    1b5e:	83 32       	cpi	r24, 0x23	; 35
    1b60:	31 f7       	brne	.-52     	; 0x1b2e <UART_receiveString+0x30>
        i++;
        Str[i] = UART_recieveByte();
    }

    /* Replace the '#' character with a null terminator to end the string */
    Str[i] = '\0';
    1b62:	89 81       	ldd	r24, Y+1	; 0x01
    1b64:	28 2f       	mov	r18, r24
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b6c:	fc 01       	movw	r30, r24
    1b6e:	e2 0f       	add	r30, r18
    1b70:	f3 1f       	adc	r31, r19
    1b72:	10 82       	st	Z, r1
}
    1b74:	0f 90       	pop	r0
    1b76:	0f 90       	pop	r0
    1b78:	0f 90       	pop	r0
    1b7a:	cf 91       	pop	r28
    1b7c:	df 91       	pop	r29
    1b7e:	1f 91       	pop	r17
    1b80:	0f 91       	pop	r16
    1b82:	08 95       	ret

00001b84 <Buzzer_init>:
#include "gpio.h"
#include "common_macros.h"

/*Buzzer initialization (Pin direction and write 0 on it)*/
void Buzzer_init(void)
{
    1b84:	df 93       	push	r29
    1b86:	cf 93       	push	r28
    1b88:	cd b7       	in	r28, 0x3d	; 61
    1b8a:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
    1b8c:	82 e0       	ldi	r24, 0x02	; 2
    1b8e:	67 e0       	ldi	r22, 0x07	; 7
    1b90:	41 e0       	ldi	r20, 0x01	; 1
    1b92:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    1b96:	82 e0       	ldi	r24, 0x02	; 2
    1b98:	67 e0       	ldi	r22, 0x07	; 7
    1b9a:	40 e0       	ldi	r20, 0x00	; 0
    1b9c:	0e 94 77 0f 	call	0x1eee	; 0x1eee <GPIO_writePin>
}
    1ba0:	cf 91       	pop	r28
    1ba2:	df 91       	pop	r29
    1ba4:	08 95       	ret

00001ba6 <Buzzer_on>:

/*Turning the Buzzer on (Putting 1 on the pin)*/
void Buzzer_on(void)
{
    1ba6:	df 93       	push	r29
    1ba8:	cf 93       	push	r28
    1baa:	cd b7       	in	r28, 0x3d	; 61
    1bac:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
    1bae:	82 e0       	ldi	r24, 0x02	; 2
    1bb0:	67 e0       	ldi	r22, 0x07	; 7
    1bb2:	41 e0       	ldi	r20, 0x01	; 1
    1bb4:	0e 94 77 0f 	call	0x1eee	; 0x1eee <GPIO_writePin>
}
    1bb8:	cf 91       	pop	r28
    1bba:	df 91       	pop	r29
    1bbc:	08 95       	ret

00001bbe <Buzzer_off>:

/*Turning the Buzzer on (Putting 0 on the pin)*/
void Buzzer_off(void)
{
    1bbe:	df 93       	push	r29
    1bc0:	cf 93       	push	r28
    1bc2:	cd b7       	in	r28, 0x3d	; 61
    1bc4:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    1bc6:	82 e0       	ldi	r24, 0x02	; 2
    1bc8:	67 e0       	ldi	r22, 0x07	; 7
    1bca:	40 e0       	ldi	r20, 0x00	; 0
    1bcc:	0e 94 77 0f 	call	0x1eee	; 0x1eee <GPIO_writePin>
}
    1bd0:	cf 91       	pop	r28
    1bd2:	df 91       	pop	r29
    1bd4:	08 95       	ret

00001bd6 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "I2C.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1bd6:	df 93       	push	r29
    1bd8:	cf 93       	push	r28
    1bda:	00 d0       	rcall	.+0      	; 0x1bdc <EEPROM_writeByte+0x6>
    1bdc:	00 d0       	rcall	.+0      	; 0x1bde <EEPROM_writeByte+0x8>
    1bde:	cd b7       	in	r28, 0x3d	; 61
    1be0:	de b7       	in	r29, 0x3e	; 62
    1be2:	9a 83       	std	Y+2, r25	; 0x02
    1be4:	89 83       	std	Y+1, r24	; 0x01
    1be6:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
	I2C_start();
    1be8:	0e 94 c3 06 	call	0xd86	; 0xd86 <I2C_start>
    if (I2C_getStatus() != I2C_START)
    1bec:	0e 94 1b 07 	call	0xe36	; 0xe36 <I2C_getStatus>
    1bf0:	88 30       	cpi	r24, 0x08	; 8
    1bf2:	11 f0       	breq	.+4      	; 0x1bf8 <EEPROM_writeByte+0x22>
        return ERROR;
    1bf4:	1c 82       	std	Y+4, r1	; 0x04
    1bf6:	28 c0       	rjmp	.+80     	; 0x1c48 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    I2C_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1bf8:	89 81       	ldd	r24, Y+1	; 0x01
    1bfa:	9a 81       	ldd	r25, Y+2	; 0x02
    1bfc:	80 70       	andi	r24, 0x00	; 0
    1bfe:	97 70       	andi	r25, 0x07	; 7
    1c00:	88 0f       	add	r24, r24
    1c02:	89 2f       	mov	r24, r25
    1c04:	88 1f       	adc	r24, r24
    1c06:	99 0b       	sbc	r25, r25
    1c08:	91 95       	neg	r25
    1c0a:	80 6a       	ori	r24, 0xA0	; 160
    1c0c:	0e 94 de 06 	call	0xdbc	; 0xdbc <I2C_writeByte>
    if (I2C_getStatus() != I2C_MT_SLA_W_ACK)
    1c10:	0e 94 1b 07 	call	0xe36	; 0xe36 <I2C_getStatus>
    1c14:	88 31       	cpi	r24, 0x18	; 24
    1c16:	11 f0       	breq	.+4      	; 0x1c1c <EEPROM_writeByte+0x46>
        return ERROR; 
    1c18:	1c 82       	std	Y+4, r1	; 0x04
    1c1a:	16 c0       	rjmp	.+44     	; 0x1c48 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    I2C_writeByte((uint8)(u16addr));
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
    1c1e:	0e 94 de 06 	call	0xdbc	; 0xdbc <I2C_writeByte>
    if (I2C_getStatus() != I2C_MT_DATA_ACK)
    1c22:	0e 94 1b 07 	call	0xe36	; 0xe36 <I2C_getStatus>
    1c26:	88 32       	cpi	r24, 0x28	; 40
    1c28:	11 f0       	breq	.+4      	; 0x1c2e <EEPROM_writeByte+0x58>
        return ERROR;
    1c2a:	1c 82       	std	Y+4, r1	; 0x04
    1c2c:	0d c0       	rjmp	.+26     	; 0x1c48 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    I2C_writeByte(u8data);
    1c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c30:	0e 94 de 06 	call	0xdbc	; 0xdbc <I2C_writeByte>
    if (I2C_getStatus() != I2C_MT_DATA_ACK)
    1c34:	0e 94 1b 07 	call	0xe36	; 0xe36 <I2C_getStatus>
    1c38:	88 32       	cpi	r24, 0x28	; 40
    1c3a:	11 f0       	breq	.+4      	; 0x1c40 <EEPROM_writeByte+0x6a>
        return ERROR;
    1c3c:	1c 82       	std	Y+4, r1	; 0x04
    1c3e:	04 c0       	rjmp	.+8      	; 0x1c48 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    I2C_stop();
    1c40:	0e 94 d3 06 	call	0xda6	; 0xda6 <I2C_stop>
	
    return SUCCESS;
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	8c 83       	std	Y+4, r24	; 0x04
    1c48:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1c4a:	0f 90       	pop	r0
    1c4c:	0f 90       	pop	r0
    1c4e:	0f 90       	pop	r0
    1c50:	0f 90       	pop	r0
    1c52:	cf 91       	pop	r28
    1c54:	df 91       	pop	r29
    1c56:	08 95       	ret

00001c58 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1c58:	df 93       	push	r29
    1c5a:	cf 93       	push	r28
    1c5c:	00 d0       	rcall	.+0      	; 0x1c5e <EEPROM_readByte+0x6>
    1c5e:	00 d0       	rcall	.+0      	; 0x1c60 <EEPROM_readByte+0x8>
    1c60:	0f 92       	push	r0
    1c62:	cd b7       	in	r28, 0x3d	; 61
    1c64:	de b7       	in	r29, 0x3e	; 62
    1c66:	9a 83       	std	Y+2, r25	; 0x02
    1c68:	89 83       	std	Y+1, r24	; 0x01
    1c6a:	7c 83       	std	Y+4, r23	; 0x04
    1c6c:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
	I2C_start();
    1c6e:	0e 94 c3 06 	call	0xd86	; 0xd86 <I2C_start>
    if (I2C_getStatus() != I2C_START)
    1c72:	0e 94 1b 07 	call	0xe36	; 0xe36 <I2C_getStatus>
    1c76:	88 30       	cpi	r24, 0x08	; 8
    1c78:	11 f0       	breq	.+4      	; 0x1c7e <EEPROM_readByte+0x26>
        return ERROR;
    1c7a:	1d 82       	std	Y+5, r1	; 0x05
    1c7c:	44 c0       	rjmp	.+136    	; 0x1d06 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    I2C_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1c7e:	89 81       	ldd	r24, Y+1	; 0x01
    1c80:	9a 81       	ldd	r25, Y+2	; 0x02
    1c82:	80 70       	andi	r24, 0x00	; 0
    1c84:	97 70       	andi	r25, 0x07	; 7
    1c86:	88 0f       	add	r24, r24
    1c88:	89 2f       	mov	r24, r25
    1c8a:	88 1f       	adc	r24, r24
    1c8c:	99 0b       	sbc	r25, r25
    1c8e:	91 95       	neg	r25
    1c90:	80 6a       	ori	r24, 0xA0	; 160
    1c92:	0e 94 de 06 	call	0xdbc	; 0xdbc <I2C_writeByte>
    if (I2C_getStatus() != I2C_MT_SLA_W_ACK)
    1c96:	0e 94 1b 07 	call	0xe36	; 0xe36 <I2C_getStatus>
    1c9a:	88 31       	cpi	r24, 0x18	; 24
    1c9c:	11 f0       	breq	.+4      	; 0x1ca2 <EEPROM_readByte+0x4a>
        return ERROR;
    1c9e:	1d 82       	std	Y+5, r1	; 0x05
    1ca0:	32 c0       	rjmp	.+100    	; 0x1d06 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    I2C_writeByte((uint8)(u16addr));
    1ca2:	89 81       	ldd	r24, Y+1	; 0x01
    1ca4:	0e 94 de 06 	call	0xdbc	; 0xdbc <I2C_writeByte>
    if (I2C_getStatus() != I2C_MT_DATA_ACK)
    1ca8:	0e 94 1b 07 	call	0xe36	; 0xe36 <I2C_getStatus>
    1cac:	88 32       	cpi	r24, 0x28	; 40
    1cae:	11 f0       	breq	.+4      	; 0x1cb4 <EEPROM_readByte+0x5c>
        return ERROR;
    1cb0:	1d 82       	std	Y+5, r1	; 0x05
    1cb2:	29 c0       	rjmp	.+82     	; 0x1d06 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    I2C_start();
    1cb4:	0e 94 c3 06 	call	0xd86	; 0xd86 <I2C_start>
    if (I2C_getStatus() != I2C_REP_START)
    1cb8:	0e 94 1b 07 	call	0xe36	; 0xe36 <I2C_getStatus>
    1cbc:	80 31       	cpi	r24, 0x10	; 16
    1cbe:	11 f0       	breq	.+4      	; 0x1cc4 <EEPROM_readByte+0x6c>
        return ERROR;
    1cc0:	1d 82       	std	Y+5, r1	; 0x05
    1cc2:	21 c0       	rjmp	.+66     	; 0x1d06 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    I2C_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1cc4:	89 81       	ldd	r24, Y+1	; 0x01
    1cc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc8:	80 70       	andi	r24, 0x00	; 0
    1cca:	97 70       	andi	r25, 0x07	; 7
    1ccc:	88 0f       	add	r24, r24
    1cce:	89 2f       	mov	r24, r25
    1cd0:	88 1f       	adc	r24, r24
    1cd2:	99 0b       	sbc	r25, r25
    1cd4:	91 95       	neg	r25
    1cd6:	81 6a       	ori	r24, 0xA1	; 161
    1cd8:	0e 94 de 06 	call	0xdbc	; 0xdbc <I2C_writeByte>
    if (I2C_getStatus() != I2C_MT_SLA_R_ACK)
    1cdc:	0e 94 1b 07 	call	0xe36	; 0xe36 <I2C_getStatus>
    1ce0:	80 34       	cpi	r24, 0x40	; 64
    1ce2:	11 f0       	breq	.+4      	; 0x1ce8 <EEPROM_readByte+0x90>
        return ERROR;
    1ce4:	1d 82       	std	Y+5, r1	; 0x05
    1ce6:	0f c0       	rjmp	.+30     	; 0x1d06 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = I2C_readByteWithNACK();
    1ce8:	0e 94 08 07 	call	0xe10	; 0xe10 <I2C_readByteWithNACK>
    1cec:	eb 81       	ldd	r30, Y+3	; 0x03
    1cee:	fc 81       	ldd	r31, Y+4	; 0x04
    1cf0:	80 83       	st	Z, r24
    if (I2C_getStatus() != I2C_MR_DATA_NACK)
    1cf2:	0e 94 1b 07 	call	0xe36	; 0xe36 <I2C_getStatus>
    1cf6:	88 35       	cpi	r24, 0x58	; 88
    1cf8:	11 f0       	breq	.+4      	; 0x1cfe <EEPROM_readByte+0xa6>
        return ERROR;
    1cfa:	1d 82       	std	Y+5, r1	; 0x05
    1cfc:	04 c0       	rjmp	.+8      	; 0x1d06 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    I2C_stop();
    1cfe:	0e 94 d3 06 	call	0xda6	; 0xda6 <I2C_stop>

    return SUCCESS;
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	8d 83       	std	Y+5, r24	; 0x05
    1d06:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1d08:	0f 90       	pop	r0
    1d0a:	0f 90       	pop	r0
    1d0c:	0f 90       	pop	r0
    1d0e:	0f 90       	pop	r0
    1d10:	0f 90       	pop	r0
    1d12:	cf 91       	pop	r28
    1d14:	df 91       	pop	r29
    1d16:	08 95       	ret

00001d18 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1d18:	df 93       	push	r29
    1d1a:	cf 93       	push	r28
    1d1c:	00 d0       	rcall	.+0      	; 0x1d1e <GPIO_setupPinDirection+0x6>
    1d1e:	00 d0       	rcall	.+0      	; 0x1d20 <GPIO_setupPinDirection+0x8>
    1d20:	0f 92       	push	r0
    1d22:	cd b7       	in	r28, 0x3d	; 61
    1d24:	de b7       	in	r29, 0x3e	; 62
    1d26:	89 83       	std	Y+1, r24	; 0x01
    1d28:	6a 83       	std	Y+2, r22	; 0x02
    1d2a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2e:	88 30       	cpi	r24, 0x08	; 8
    1d30:	08 f0       	brcs	.+2      	; 0x1d34 <GPIO_setupPinDirection+0x1c>
    1d32:	d5 c0       	rjmp	.+426    	; 0x1ede <GPIO_setupPinDirection+0x1c6>
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	84 30       	cpi	r24, 0x04	; 4
    1d38:	08 f0       	brcs	.+2      	; 0x1d3c <GPIO_setupPinDirection+0x24>
    1d3a:	d1 c0       	rjmp	.+418    	; 0x1ede <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1d3c:	89 81       	ldd	r24, Y+1	; 0x01
    1d3e:	28 2f       	mov	r18, r24
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	3d 83       	std	Y+5, r19	; 0x05
    1d44:	2c 83       	std	Y+4, r18	; 0x04
    1d46:	8c 81       	ldd	r24, Y+4	; 0x04
    1d48:	9d 81       	ldd	r25, Y+5	; 0x05
    1d4a:	81 30       	cpi	r24, 0x01	; 1
    1d4c:	91 05       	cpc	r25, r1
    1d4e:	09 f4       	brne	.+2      	; 0x1d52 <GPIO_setupPinDirection+0x3a>
    1d50:	43 c0       	rjmp	.+134    	; 0x1dd8 <GPIO_setupPinDirection+0xc0>
    1d52:	2c 81       	ldd	r18, Y+4	; 0x04
    1d54:	3d 81       	ldd	r19, Y+5	; 0x05
    1d56:	22 30       	cpi	r18, 0x02	; 2
    1d58:	31 05       	cpc	r19, r1
    1d5a:	2c f4       	brge	.+10     	; 0x1d66 <GPIO_setupPinDirection+0x4e>
    1d5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d5e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d60:	00 97       	sbiw	r24, 0x00	; 0
    1d62:	71 f0       	breq	.+28     	; 0x1d80 <GPIO_setupPinDirection+0x68>
    1d64:	bc c0       	rjmp	.+376    	; 0x1ede <GPIO_setupPinDirection+0x1c6>
    1d66:	2c 81       	ldd	r18, Y+4	; 0x04
    1d68:	3d 81       	ldd	r19, Y+5	; 0x05
    1d6a:	22 30       	cpi	r18, 0x02	; 2
    1d6c:	31 05       	cpc	r19, r1
    1d6e:	09 f4       	brne	.+2      	; 0x1d72 <GPIO_setupPinDirection+0x5a>
    1d70:	5f c0       	rjmp	.+190    	; 0x1e30 <GPIO_setupPinDirection+0x118>
    1d72:	8c 81       	ldd	r24, Y+4	; 0x04
    1d74:	9d 81       	ldd	r25, Y+5	; 0x05
    1d76:	83 30       	cpi	r24, 0x03	; 3
    1d78:	91 05       	cpc	r25, r1
    1d7a:	09 f4       	brne	.+2      	; 0x1d7e <GPIO_setupPinDirection+0x66>
    1d7c:	85 c0       	rjmp	.+266    	; 0x1e88 <GPIO_setupPinDirection+0x170>
    1d7e:	af c0       	rjmp	.+350    	; 0x1ede <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1d80:	8b 81       	ldd	r24, Y+3	; 0x03
    1d82:	81 30       	cpi	r24, 0x01	; 1
    1d84:	a1 f4       	brne	.+40     	; 0x1dae <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1d86:	aa e3       	ldi	r26, 0x3A	; 58
    1d88:	b0 e0       	ldi	r27, 0x00	; 0
    1d8a:	ea e3       	ldi	r30, 0x3A	; 58
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	80 81       	ld	r24, Z
    1d90:	48 2f       	mov	r20, r24
    1d92:	8a 81       	ldd	r24, Y+2	; 0x02
    1d94:	28 2f       	mov	r18, r24
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	02 2e       	mov	r0, r18
    1d9e:	02 c0       	rjmp	.+4      	; 0x1da4 <GPIO_setupPinDirection+0x8c>
    1da0:	88 0f       	add	r24, r24
    1da2:	99 1f       	adc	r25, r25
    1da4:	0a 94       	dec	r0
    1da6:	e2 f7       	brpl	.-8      	; 0x1da0 <GPIO_setupPinDirection+0x88>
    1da8:	84 2b       	or	r24, r20
    1daa:	8c 93       	st	X, r24
    1dac:	98 c0       	rjmp	.+304    	; 0x1ede <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1dae:	aa e3       	ldi	r26, 0x3A	; 58
    1db0:	b0 e0       	ldi	r27, 0x00	; 0
    1db2:	ea e3       	ldi	r30, 0x3A	; 58
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	80 81       	ld	r24, Z
    1db8:	48 2f       	mov	r20, r24
    1dba:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbc:	28 2f       	mov	r18, r24
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	02 2e       	mov	r0, r18
    1dc6:	02 c0       	rjmp	.+4      	; 0x1dcc <GPIO_setupPinDirection+0xb4>
    1dc8:	88 0f       	add	r24, r24
    1dca:	99 1f       	adc	r25, r25
    1dcc:	0a 94       	dec	r0
    1dce:	e2 f7       	brpl	.-8      	; 0x1dc8 <GPIO_setupPinDirection+0xb0>
    1dd0:	80 95       	com	r24
    1dd2:	84 23       	and	r24, r20
    1dd4:	8c 93       	st	X, r24
    1dd6:	83 c0       	rjmp	.+262    	; 0x1ede <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dda:	81 30       	cpi	r24, 0x01	; 1
    1ddc:	a1 f4       	brne	.+40     	; 0x1e06 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1dde:	a7 e3       	ldi	r26, 0x37	; 55
    1de0:	b0 e0       	ldi	r27, 0x00	; 0
    1de2:	e7 e3       	ldi	r30, 0x37	; 55
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	80 81       	ld	r24, Z
    1de8:	48 2f       	mov	r20, r24
    1dea:	8a 81       	ldd	r24, Y+2	; 0x02
    1dec:	28 2f       	mov	r18, r24
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	02 2e       	mov	r0, r18
    1df6:	02 c0       	rjmp	.+4      	; 0x1dfc <GPIO_setupPinDirection+0xe4>
    1df8:	88 0f       	add	r24, r24
    1dfa:	99 1f       	adc	r25, r25
    1dfc:	0a 94       	dec	r0
    1dfe:	e2 f7       	brpl	.-8      	; 0x1df8 <GPIO_setupPinDirection+0xe0>
    1e00:	84 2b       	or	r24, r20
    1e02:	8c 93       	st	X, r24
    1e04:	6c c0       	rjmp	.+216    	; 0x1ede <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1e06:	a7 e3       	ldi	r26, 0x37	; 55
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	e7 e3       	ldi	r30, 0x37	; 55
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	48 2f       	mov	r20, r24
    1e12:	8a 81       	ldd	r24, Y+2	; 0x02
    1e14:	28 2f       	mov	r18, r24
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	02 2e       	mov	r0, r18
    1e1e:	02 c0       	rjmp	.+4      	; 0x1e24 <GPIO_setupPinDirection+0x10c>
    1e20:	88 0f       	add	r24, r24
    1e22:	99 1f       	adc	r25, r25
    1e24:	0a 94       	dec	r0
    1e26:	e2 f7       	brpl	.-8      	; 0x1e20 <GPIO_setupPinDirection+0x108>
    1e28:	80 95       	com	r24
    1e2a:	84 23       	and	r24, r20
    1e2c:	8c 93       	st	X, r24
    1e2e:	57 c0       	rjmp	.+174    	; 0x1ede <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1e30:	8b 81       	ldd	r24, Y+3	; 0x03
    1e32:	81 30       	cpi	r24, 0x01	; 1
    1e34:	a1 f4       	brne	.+40     	; 0x1e5e <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1e36:	a4 e3       	ldi	r26, 0x34	; 52
    1e38:	b0 e0       	ldi	r27, 0x00	; 0
    1e3a:	e4 e3       	ldi	r30, 0x34	; 52
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	80 81       	ld	r24, Z
    1e40:	48 2f       	mov	r20, r24
    1e42:	8a 81       	ldd	r24, Y+2	; 0x02
    1e44:	28 2f       	mov	r18, r24
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	81 e0       	ldi	r24, 0x01	; 1
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	02 2e       	mov	r0, r18
    1e4e:	02 c0       	rjmp	.+4      	; 0x1e54 <GPIO_setupPinDirection+0x13c>
    1e50:	88 0f       	add	r24, r24
    1e52:	99 1f       	adc	r25, r25
    1e54:	0a 94       	dec	r0
    1e56:	e2 f7       	brpl	.-8      	; 0x1e50 <GPIO_setupPinDirection+0x138>
    1e58:	84 2b       	or	r24, r20
    1e5a:	8c 93       	st	X, r24
    1e5c:	40 c0       	rjmp	.+128    	; 0x1ede <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1e5e:	a4 e3       	ldi	r26, 0x34	; 52
    1e60:	b0 e0       	ldi	r27, 0x00	; 0
    1e62:	e4 e3       	ldi	r30, 0x34	; 52
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	80 81       	ld	r24, Z
    1e68:	48 2f       	mov	r20, r24
    1e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6c:	28 2f       	mov	r18, r24
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	02 2e       	mov	r0, r18
    1e76:	02 c0       	rjmp	.+4      	; 0x1e7c <GPIO_setupPinDirection+0x164>
    1e78:	88 0f       	add	r24, r24
    1e7a:	99 1f       	adc	r25, r25
    1e7c:	0a 94       	dec	r0
    1e7e:	e2 f7       	brpl	.-8      	; 0x1e78 <GPIO_setupPinDirection+0x160>
    1e80:	80 95       	com	r24
    1e82:	84 23       	and	r24, r20
    1e84:	8c 93       	st	X, r24
    1e86:	2b c0       	rjmp	.+86     	; 0x1ede <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1e88:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8a:	81 30       	cpi	r24, 0x01	; 1
    1e8c:	a1 f4       	brne	.+40     	; 0x1eb6 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1e8e:	a1 e3       	ldi	r26, 0x31	; 49
    1e90:	b0 e0       	ldi	r27, 0x00	; 0
    1e92:	e1 e3       	ldi	r30, 0x31	; 49
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	80 81       	ld	r24, Z
    1e98:	48 2f       	mov	r20, r24
    1e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9c:	28 2f       	mov	r18, r24
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	02 2e       	mov	r0, r18
    1ea6:	02 c0       	rjmp	.+4      	; 0x1eac <GPIO_setupPinDirection+0x194>
    1ea8:	88 0f       	add	r24, r24
    1eaa:	99 1f       	adc	r25, r25
    1eac:	0a 94       	dec	r0
    1eae:	e2 f7       	brpl	.-8      	; 0x1ea8 <GPIO_setupPinDirection+0x190>
    1eb0:	84 2b       	or	r24, r20
    1eb2:	8c 93       	st	X, r24
    1eb4:	14 c0       	rjmp	.+40     	; 0x1ede <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1eb6:	a1 e3       	ldi	r26, 0x31	; 49
    1eb8:	b0 e0       	ldi	r27, 0x00	; 0
    1eba:	e1 e3       	ldi	r30, 0x31	; 49
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	80 81       	ld	r24, Z
    1ec0:	48 2f       	mov	r20, r24
    1ec2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec4:	28 2f       	mov	r18, r24
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	02 2e       	mov	r0, r18
    1ece:	02 c0       	rjmp	.+4      	; 0x1ed4 <GPIO_setupPinDirection+0x1bc>
    1ed0:	88 0f       	add	r24, r24
    1ed2:	99 1f       	adc	r25, r25
    1ed4:	0a 94       	dec	r0
    1ed6:	e2 f7       	brpl	.-8      	; 0x1ed0 <GPIO_setupPinDirection+0x1b8>
    1ed8:	80 95       	com	r24
    1eda:	84 23       	and	r24, r20
    1edc:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1ede:	0f 90       	pop	r0
    1ee0:	0f 90       	pop	r0
    1ee2:	0f 90       	pop	r0
    1ee4:	0f 90       	pop	r0
    1ee6:	0f 90       	pop	r0
    1ee8:	cf 91       	pop	r28
    1eea:	df 91       	pop	r29
    1eec:	08 95       	ret

00001eee <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1eee:	df 93       	push	r29
    1ef0:	cf 93       	push	r28
    1ef2:	00 d0       	rcall	.+0      	; 0x1ef4 <GPIO_writePin+0x6>
    1ef4:	00 d0       	rcall	.+0      	; 0x1ef6 <GPIO_writePin+0x8>
    1ef6:	0f 92       	push	r0
    1ef8:	cd b7       	in	r28, 0x3d	; 61
    1efa:	de b7       	in	r29, 0x3e	; 62
    1efc:	89 83       	std	Y+1, r24	; 0x01
    1efe:	6a 83       	std	Y+2, r22	; 0x02
    1f00:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1f02:	8a 81       	ldd	r24, Y+2	; 0x02
    1f04:	88 30       	cpi	r24, 0x08	; 8
    1f06:	08 f0       	brcs	.+2      	; 0x1f0a <GPIO_writePin+0x1c>
    1f08:	d5 c0       	rjmp	.+426    	; 0x20b4 <GPIO_writePin+0x1c6>
    1f0a:	89 81       	ldd	r24, Y+1	; 0x01
    1f0c:	84 30       	cpi	r24, 0x04	; 4
    1f0e:	08 f0       	brcs	.+2      	; 0x1f12 <GPIO_writePin+0x24>
    1f10:	d1 c0       	rjmp	.+418    	; 0x20b4 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* applying HIGH or LOW on the bin */
		switch(port_num)
    1f12:	89 81       	ldd	r24, Y+1	; 0x01
    1f14:	28 2f       	mov	r18, r24
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	3d 83       	std	Y+5, r19	; 0x05
    1f1a:	2c 83       	std	Y+4, r18	; 0x04
    1f1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f20:	81 30       	cpi	r24, 0x01	; 1
    1f22:	91 05       	cpc	r25, r1
    1f24:	09 f4       	brne	.+2      	; 0x1f28 <GPIO_writePin+0x3a>
    1f26:	43 c0       	rjmp	.+134    	; 0x1fae <GPIO_writePin+0xc0>
    1f28:	2c 81       	ldd	r18, Y+4	; 0x04
    1f2a:	3d 81       	ldd	r19, Y+5	; 0x05
    1f2c:	22 30       	cpi	r18, 0x02	; 2
    1f2e:	31 05       	cpc	r19, r1
    1f30:	2c f4       	brge	.+10     	; 0x1f3c <GPIO_writePin+0x4e>
    1f32:	8c 81       	ldd	r24, Y+4	; 0x04
    1f34:	9d 81       	ldd	r25, Y+5	; 0x05
    1f36:	00 97       	sbiw	r24, 0x00	; 0
    1f38:	71 f0       	breq	.+28     	; 0x1f56 <GPIO_writePin+0x68>
    1f3a:	bc c0       	rjmp	.+376    	; 0x20b4 <GPIO_writePin+0x1c6>
    1f3c:	2c 81       	ldd	r18, Y+4	; 0x04
    1f3e:	3d 81       	ldd	r19, Y+5	; 0x05
    1f40:	22 30       	cpi	r18, 0x02	; 2
    1f42:	31 05       	cpc	r19, r1
    1f44:	09 f4       	brne	.+2      	; 0x1f48 <GPIO_writePin+0x5a>
    1f46:	5f c0       	rjmp	.+190    	; 0x2006 <GPIO_writePin+0x118>
    1f48:	8c 81       	ldd	r24, Y+4	; 0x04
    1f4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f4c:	83 30       	cpi	r24, 0x03	; 3
    1f4e:	91 05       	cpc	r25, r1
    1f50:	09 f4       	brne	.+2      	; 0x1f54 <GPIO_writePin+0x66>
    1f52:	85 c0       	rjmp	.+266    	; 0x205e <GPIO_writePin+0x170>
    1f54:	af c0       	rjmp	.+350    	; 0x20b4 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1f56:	8b 81       	ldd	r24, Y+3	; 0x03
    1f58:	81 30       	cpi	r24, 0x01	; 1
    1f5a:	a1 f4       	brne	.+40     	; 0x1f84 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA, pin_num);
    1f5c:	ab e3       	ldi	r26, 0x3B	; 59
    1f5e:	b0 e0       	ldi	r27, 0x00	; 0
    1f60:	eb e3       	ldi	r30, 0x3B	; 59
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	80 81       	ld	r24, Z
    1f66:	48 2f       	mov	r20, r24
    1f68:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6a:	28 2f       	mov	r18, r24
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	02 2e       	mov	r0, r18
    1f74:	02 c0       	rjmp	.+4      	; 0x1f7a <GPIO_writePin+0x8c>
    1f76:	88 0f       	add	r24, r24
    1f78:	99 1f       	adc	r25, r25
    1f7a:	0a 94       	dec	r0
    1f7c:	e2 f7       	brpl	.-8      	; 0x1f76 <GPIO_writePin+0x88>
    1f7e:	84 2b       	or	r24, r20
    1f80:	8c 93       	st	X, r24
    1f82:	98 c0       	rjmp	.+304    	; 0x20b4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA, pin_num);
    1f84:	ab e3       	ldi	r26, 0x3B	; 59
    1f86:	b0 e0       	ldi	r27, 0x00	; 0
    1f88:	eb e3       	ldi	r30, 0x3B	; 59
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	80 81       	ld	r24, Z
    1f8e:	48 2f       	mov	r20, r24
    1f90:	8a 81       	ldd	r24, Y+2	; 0x02
    1f92:	28 2f       	mov	r18, r24
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	02 2e       	mov	r0, r18
    1f9c:	02 c0       	rjmp	.+4      	; 0x1fa2 <GPIO_writePin+0xb4>
    1f9e:	88 0f       	add	r24, r24
    1fa0:	99 1f       	adc	r25, r25
    1fa2:	0a 94       	dec	r0
    1fa4:	e2 f7       	brpl	.-8      	; 0x1f9e <GPIO_writePin+0xb0>
    1fa6:	80 95       	com	r24
    1fa8:	84 23       	and	r24, r20
    1faa:	8c 93       	st	X, r24
    1fac:	83 c0       	rjmp	.+262    	; 0x20b4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1fae:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb0:	81 30       	cpi	r24, 0x01	; 1
    1fb2:	a1 f4       	brne	.+40     	; 0x1fdc <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB, pin_num);
    1fb4:	a8 e3       	ldi	r26, 0x38	; 56
    1fb6:	b0 e0       	ldi	r27, 0x00	; 0
    1fb8:	e8 e3       	ldi	r30, 0x38	; 56
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	80 81       	ld	r24, Z
    1fbe:	48 2f       	mov	r20, r24
    1fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc2:	28 2f       	mov	r18, r24
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	81 e0       	ldi	r24, 0x01	; 1
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	02 2e       	mov	r0, r18
    1fcc:	02 c0       	rjmp	.+4      	; 0x1fd2 <GPIO_writePin+0xe4>
    1fce:	88 0f       	add	r24, r24
    1fd0:	99 1f       	adc	r25, r25
    1fd2:	0a 94       	dec	r0
    1fd4:	e2 f7       	brpl	.-8      	; 0x1fce <GPIO_writePin+0xe0>
    1fd6:	84 2b       	or	r24, r20
    1fd8:	8c 93       	st	X, r24
    1fda:	6c c0       	rjmp	.+216    	; 0x20b4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB, pin_num);
    1fdc:	a8 e3       	ldi	r26, 0x38	; 56
    1fde:	b0 e0       	ldi	r27, 0x00	; 0
    1fe0:	e8 e3       	ldi	r30, 0x38	; 56
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	80 81       	ld	r24, Z
    1fe6:	48 2f       	mov	r20, r24
    1fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fea:	28 2f       	mov	r18, r24
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	02 2e       	mov	r0, r18
    1ff4:	02 c0       	rjmp	.+4      	; 0x1ffa <GPIO_writePin+0x10c>
    1ff6:	88 0f       	add	r24, r24
    1ff8:	99 1f       	adc	r25, r25
    1ffa:	0a 94       	dec	r0
    1ffc:	e2 f7       	brpl	.-8      	; 0x1ff6 <GPIO_writePin+0x108>
    1ffe:	80 95       	com	r24
    2000:	84 23       	and	r24, r20
    2002:	8c 93       	st	X, r24
    2004:	57 c0       	rjmp	.+174    	; 0x20b4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    2006:	8b 81       	ldd	r24, Y+3	; 0x03
    2008:	81 30       	cpi	r24, 0x01	; 1
    200a:	a1 f4       	brne	.+40     	; 0x2034 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC, pin_num);
    200c:	a5 e3       	ldi	r26, 0x35	; 53
    200e:	b0 e0       	ldi	r27, 0x00	; 0
    2010:	e5 e3       	ldi	r30, 0x35	; 53
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	80 81       	ld	r24, Z
    2016:	48 2f       	mov	r20, r24
    2018:	8a 81       	ldd	r24, Y+2	; 0x02
    201a:	28 2f       	mov	r18, r24
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	02 2e       	mov	r0, r18
    2024:	02 c0       	rjmp	.+4      	; 0x202a <GPIO_writePin+0x13c>
    2026:	88 0f       	add	r24, r24
    2028:	99 1f       	adc	r25, r25
    202a:	0a 94       	dec	r0
    202c:	e2 f7       	brpl	.-8      	; 0x2026 <GPIO_writePin+0x138>
    202e:	84 2b       	or	r24, r20
    2030:	8c 93       	st	X, r24
    2032:	40 c0       	rjmp	.+128    	; 0x20b4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC, pin_num);
    2034:	a5 e3       	ldi	r26, 0x35	; 53
    2036:	b0 e0       	ldi	r27, 0x00	; 0
    2038:	e5 e3       	ldi	r30, 0x35	; 53
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	80 81       	ld	r24, Z
    203e:	48 2f       	mov	r20, r24
    2040:	8a 81       	ldd	r24, Y+2	; 0x02
    2042:	28 2f       	mov	r18, r24
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	02 2e       	mov	r0, r18
    204c:	02 c0       	rjmp	.+4      	; 0x2052 <GPIO_writePin+0x164>
    204e:	88 0f       	add	r24, r24
    2050:	99 1f       	adc	r25, r25
    2052:	0a 94       	dec	r0
    2054:	e2 f7       	brpl	.-8      	; 0x204e <GPIO_writePin+0x160>
    2056:	80 95       	com	r24
    2058:	84 23       	and	r24, r20
    205a:	8c 93       	st	X, r24
    205c:	2b c0       	rjmp	.+86     	; 0x20b4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    205e:	8b 81       	ldd	r24, Y+3	; 0x03
    2060:	81 30       	cpi	r24, 0x01	; 1
    2062:	a1 f4       	brne	.+40     	; 0x208c <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD, pin_num);
    2064:	a2 e3       	ldi	r26, 0x32	; 50
    2066:	b0 e0       	ldi	r27, 0x00	; 0
    2068:	e2 e3       	ldi	r30, 0x32	; 50
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	80 81       	ld	r24, Z
    206e:	48 2f       	mov	r20, r24
    2070:	8a 81       	ldd	r24, Y+2	; 0x02
    2072:	28 2f       	mov	r18, r24
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	02 2e       	mov	r0, r18
    207c:	02 c0       	rjmp	.+4      	; 0x2082 <GPIO_writePin+0x194>
    207e:	88 0f       	add	r24, r24
    2080:	99 1f       	adc	r25, r25
    2082:	0a 94       	dec	r0
    2084:	e2 f7       	brpl	.-8      	; 0x207e <GPIO_writePin+0x190>
    2086:	84 2b       	or	r24, r20
    2088:	8c 93       	st	X, r24
    208a:	14 c0       	rjmp	.+40     	; 0x20b4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD, pin_num);
    208c:	a2 e3       	ldi	r26, 0x32	; 50
    208e:	b0 e0       	ldi	r27, 0x00	; 0
    2090:	e2 e3       	ldi	r30, 0x32	; 50
    2092:	f0 e0       	ldi	r31, 0x00	; 0
    2094:	80 81       	ld	r24, Z
    2096:	48 2f       	mov	r20, r24
    2098:	8a 81       	ldd	r24, Y+2	; 0x02
    209a:	28 2f       	mov	r18, r24
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	81 e0       	ldi	r24, 0x01	; 1
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	02 2e       	mov	r0, r18
    20a4:	02 c0       	rjmp	.+4      	; 0x20aa <GPIO_writePin+0x1bc>
    20a6:	88 0f       	add	r24, r24
    20a8:	99 1f       	adc	r25, r25
    20aa:	0a 94       	dec	r0
    20ac:	e2 f7       	brpl	.-8      	; 0x20a6 <GPIO_writePin+0x1b8>
    20ae:	80 95       	com	r24
    20b0:	84 23       	and	r24, r20
    20b2:	8c 93       	st	X, r24
			}
			break;
		}
	}

}
    20b4:	0f 90       	pop	r0
    20b6:	0f 90       	pop	r0
    20b8:	0f 90       	pop	r0
    20ba:	0f 90       	pop	r0
    20bc:	0f 90       	pop	r0
    20be:	cf 91       	pop	r28
    20c0:	df 91       	pop	r29
    20c2:	08 95       	ret

000020c4 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    20c4:	df 93       	push	r29
    20c6:	cf 93       	push	r28
    20c8:	00 d0       	rcall	.+0      	; 0x20ca <GPIO_readPin+0x6>
    20ca:	00 d0       	rcall	.+0      	; 0x20cc <GPIO_readPin+0x8>
    20cc:	00 d0       	rcall	.+0      	; 0x20ce <GPIO_readPin+0xa>
    20ce:	cd b7       	in	r28, 0x3d	; 61
    20d0:	de b7       	in	r29, 0x3e	; 62
    20d2:	89 83       	std	Y+1, r24	; 0x01
    20d4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    20d6:	8a 81       	ldd	r24, Y+2	; 0x02
    20d8:	88 30       	cpi	r24, 0x08	; 8
    20da:	18 f4       	brcc	.+6      	; 0x20e2 <GPIO_readPin+0x1e>
    20dc:	89 81       	ldd	r24, Y+1	; 0x01
    20de:	84 30       	cpi	r24, 0x04	; 4
    20e0:	10 f0       	brcs	.+4      	; 0x20e6 <GPIO_readPin+0x22>
	{
		return LOGIC_LOW;
    20e2:	1d 82       	std	Y+5, r1	; 0x05
    20e4:	82 c0       	rjmp	.+260    	; 0x21ea <GPIO_readPin+0x126>
	}

	else
	{
		switch (port_num)
    20e6:	89 81       	ldd	r24, Y+1	; 0x01
    20e8:	28 2f       	mov	r18, r24
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	3c 83       	std	Y+4, r19	; 0x04
    20ee:	2b 83       	std	Y+3, r18	; 0x03
    20f0:	4b 81       	ldd	r20, Y+3	; 0x03
    20f2:	5c 81       	ldd	r21, Y+4	; 0x04
    20f4:	41 30       	cpi	r20, 0x01	; 1
    20f6:	51 05       	cpc	r21, r1
    20f8:	79 f1       	breq	.+94     	; 0x2158 <GPIO_readPin+0x94>
    20fa:	8b 81       	ldd	r24, Y+3	; 0x03
    20fc:	9c 81       	ldd	r25, Y+4	; 0x04
    20fe:	82 30       	cpi	r24, 0x02	; 2
    2100:	91 05       	cpc	r25, r1
    2102:	34 f4       	brge	.+12     	; 0x2110 <GPIO_readPin+0x4c>
    2104:	2b 81       	ldd	r18, Y+3	; 0x03
    2106:	3c 81       	ldd	r19, Y+4	; 0x04
    2108:	21 15       	cp	r18, r1
    210a:	31 05       	cpc	r19, r1
    210c:	69 f0       	breq	.+26     	; 0x2128 <GPIO_readPin+0x64>
    210e:	6c c0       	rjmp	.+216    	; 0x21e8 <GPIO_readPin+0x124>
    2110:	4b 81       	ldd	r20, Y+3	; 0x03
    2112:	5c 81       	ldd	r21, Y+4	; 0x04
    2114:	42 30       	cpi	r20, 0x02	; 2
    2116:	51 05       	cpc	r21, r1
    2118:	b9 f1       	breq	.+110    	; 0x2188 <GPIO_readPin+0xc4>
    211a:	8b 81       	ldd	r24, Y+3	; 0x03
    211c:	9c 81       	ldd	r25, Y+4	; 0x04
    211e:	83 30       	cpi	r24, 0x03	; 3
    2120:	91 05       	cpc	r25, r1
    2122:	09 f4       	brne	.+2      	; 0x2126 <GPIO_readPin+0x62>
    2124:	49 c0       	rjmp	.+146    	; 0x21b8 <GPIO_readPin+0xf4>
    2126:	60 c0       	rjmp	.+192    	; 0x21e8 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA, pin_num))
    2128:	e9 e3       	ldi	r30, 0x39	; 57
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	80 81       	ld	r24, Z
    212e:	28 2f       	mov	r18, r24
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	8a 81       	ldd	r24, Y+2	; 0x02
    2134:	88 2f       	mov	r24, r24
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	a9 01       	movw	r20, r18
    213a:	02 c0       	rjmp	.+4      	; 0x2140 <GPIO_readPin+0x7c>
    213c:	55 95       	asr	r21
    213e:	47 95       	ror	r20
    2140:	8a 95       	dec	r24
    2142:	e2 f7       	brpl	.-8      	; 0x213c <GPIO_readPin+0x78>
    2144:	ca 01       	movw	r24, r20
    2146:	81 70       	andi	r24, 0x01	; 1
    2148:	90 70       	andi	r25, 0x00	; 0
    214a:	88 23       	and	r24, r24
    214c:	19 f0       	breq	.+6      	; 0x2154 <GPIO_readPin+0x90>
			{
				return LOGIC_HIGH;
    214e:	51 e0       	ldi	r21, 0x01	; 1
    2150:	5d 83       	std	Y+5, r21	; 0x05
    2152:	4b c0       	rjmp	.+150    	; 0x21ea <GPIO_readPin+0x126>
			}
			else
			{
				return LOGIC_LOW;
    2154:	1d 82       	std	Y+5, r1	; 0x05
    2156:	49 c0       	rjmp	.+146    	; 0x21ea <GPIO_readPin+0x126>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB, pin_num))
    2158:	e6 e3       	ldi	r30, 0x36	; 54
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	80 81       	ld	r24, Z
    215e:	28 2f       	mov	r18, r24
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	8a 81       	ldd	r24, Y+2	; 0x02
    2164:	88 2f       	mov	r24, r24
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	a9 01       	movw	r20, r18
    216a:	02 c0       	rjmp	.+4      	; 0x2170 <GPIO_readPin+0xac>
    216c:	55 95       	asr	r21
    216e:	47 95       	ror	r20
    2170:	8a 95       	dec	r24
    2172:	e2 f7       	brpl	.-8      	; 0x216c <GPIO_readPin+0xa8>
    2174:	ca 01       	movw	r24, r20
    2176:	81 70       	andi	r24, 0x01	; 1
    2178:	90 70       	andi	r25, 0x00	; 0
    217a:	88 23       	and	r24, r24
    217c:	19 f0       	breq	.+6      	; 0x2184 <GPIO_readPin+0xc0>
			{
				return LOGIC_HIGH;
    217e:	51 e0       	ldi	r21, 0x01	; 1
    2180:	5d 83       	std	Y+5, r21	; 0x05
    2182:	33 c0       	rjmp	.+102    	; 0x21ea <GPIO_readPin+0x126>
			}
			else
			{
				return LOGIC_LOW;
    2184:	1d 82       	std	Y+5, r1	; 0x05
    2186:	31 c0       	rjmp	.+98     	; 0x21ea <GPIO_readPin+0x126>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC, pin_num))
    2188:	e3 e3       	ldi	r30, 0x33	; 51
    218a:	f0 e0       	ldi	r31, 0x00	; 0
    218c:	80 81       	ld	r24, Z
    218e:	28 2f       	mov	r18, r24
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	8a 81       	ldd	r24, Y+2	; 0x02
    2194:	88 2f       	mov	r24, r24
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	a9 01       	movw	r20, r18
    219a:	02 c0       	rjmp	.+4      	; 0x21a0 <GPIO_readPin+0xdc>
    219c:	55 95       	asr	r21
    219e:	47 95       	ror	r20
    21a0:	8a 95       	dec	r24
    21a2:	e2 f7       	brpl	.-8      	; 0x219c <GPIO_readPin+0xd8>
    21a4:	ca 01       	movw	r24, r20
    21a6:	81 70       	andi	r24, 0x01	; 1
    21a8:	90 70       	andi	r25, 0x00	; 0
    21aa:	88 23       	and	r24, r24
    21ac:	19 f0       	breq	.+6      	; 0x21b4 <GPIO_readPin+0xf0>
			{
				return LOGIC_HIGH;
    21ae:	51 e0       	ldi	r21, 0x01	; 1
    21b0:	5d 83       	std	Y+5, r21	; 0x05
    21b2:	1b c0       	rjmp	.+54     	; 0x21ea <GPIO_readPin+0x126>
			}
			else
			{
				return LOGIC_LOW;
    21b4:	1d 82       	std	Y+5, r1	; 0x05
    21b6:	19 c0       	rjmp	.+50     	; 0x21ea <GPIO_readPin+0x126>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND, pin_num))
    21b8:	e0 e3       	ldi	r30, 0x30	; 48
    21ba:	f0 e0       	ldi	r31, 0x00	; 0
    21bc:	80 81       	ld	r24, Z
    21be:	28 2f       	mov	r18, r24
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	8a 81       	ldd	r24, Y+2	; 0x02
    21c4:	88 2f       	mov	r24, r24
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	a9 01       	movw	r20, r18
    21ca:	02 c0       	rjmp	.+4      	; 0x21d0 <GPIO_readPin+0x10c>
    21cc:	55 95       	asr	r21
    21ce:	47 95       	ror	r20
    21d0:	8a 95       	dec	r24
    21d2:	e2 f7       	brpl	.-8      	; 0x21cc <GPIO_readPin+0x108>
    21d4:	ca 01       	movw	r24, r20
    21d6:	81 70       	andi	r24, 0x01	; 1
    21d8:	90 70       	andi	r25, 0x00	; 0
    21da:	88 23       	and	r24, r24
    21dc:	19 f0       	breq	.+6      	; 0x21e4 <GPIO_readPin+0x120>
			{
				return LOGIC_HIGH;
    21de:	51 e0       	ldi	r21, 0x01	; 1
    21e0:	5d 83       	std	Y+5, r21	; 0x05
    21e2:	03 c0       	rjmp	.+6      	; 0x21ea <GPIO_readPin+0x126>
			}
			else
			{
				return LOGIC_LOW;
    21e4:	1d 82       	std	Y+5, r1	; 0x05
    21e6:	01 c0       	rjmp	.+2      	; 0x21ea <GPIO_readPin+0x126>
    21e8:	02 c0       	rjmp	.+4      	; 0x21ee <GPIO_readPin+0x12a>
			}
			break;
		}
	}
}
    21ea:	8d 81       	ldd	r24, Y+5	; 0x05
    21ec:	8e 83       	std	Y+6, r24	; 0x06
    21ee:	8e 81       	ldd	r24, Y+6	; 0x06
    21f0:	26 96       	adiw	r28, 0x06	; 6
    21f2:	0f b6       	in	r0, 0x3f	; 63
    21f4:	f8 94       	cli
    21f6:	de bf       	out	0x3e, r29	; 62
    21f8:	0f be       	out	0x3f, r0	; 63
    21fa:	cd bf       	out	0x3d, r28	; 61
    21fc:	cf 91       	pop	r28
    21fe:	df 91       	pop	r29
    2200:	08 95       	ret

00002202 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2202:	df 93       	push	r29
    2204:	cf 93       	push	r28
    2206:	00 d0       	rcall	.+0      	; 0x2208 <GPIO_setupPortDirection+0x6>
    2208:	00 d0       	rcall	.+0      	; 0x220a <GPIO_setupPortDirection+0x8>
    220a:	cd b7       	in	r28, 0x3d	; 61
    220c:	de b7       	in	r29, 0x3e	; 62
    220e:	89 83       	std	Y+1, r24	; 0x01
    2210:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2212:	89 81       	ldd	r24, Y+1	; 0x01
    2214:	84 30       	cpi	r24, 0x04	; 4
    2216:	90 f5       	brcc	.+100    	; 0x227c <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2218:	89 81       	ldd	r24, Y+1	; 0x01
    221a:	28 2f       	mov	r18, r24
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	3c 83       	std	Y+4, r19	; 0x04
    2220:	2b 83       	std	Y+3, r18	; 0x03
    2222:	8b 81       	ldd	r24, Y+3	; 0x03
    2224:	9c 81       	ldd	r25, Y+4	; 0x04
    2226:	81 30       	cpi	r24, 0x01	; 1
    2228:	91 05       	cpc	r25, r1
    222a:	d1 f0       	breq	.+52     	; 0x2260 <GPIO_setupPortDirection+0x5e>
    222c:	2b 81       	ldd	r18, Y+3	; 0x03
    222e:	3c 81       	ldd	r19, Y+4	; 0x04
    2230:	22 30       	cpi	r18, 0x02	; 2
    2232:	31 05       	cpc	r19, r1
    2234:	2c f4       	brge	.+10     	; 0x2240 <GPIO_setupPortDirection+0x3e>
    2236:	8b 81       	ldd	r24, Y+3	; 0x03
    2238:	9c 81       	ldd	r25, Y+4	; 0x04
    223a:	00 97       	sbiw	r24, 0x00	; 0
    223c:	61 f0       	breq	.+24     	; 0x2256 <GPIO_setupPortDirection+0x54>
    223e:	1e c0       	rjmp	.+60     	; 0x227c <GPIO_setupPortDirection+0x7a>
    2240:	2b 81       	ldd	r18, Y+3	; 0x03
    2242:	3c 81       	ldd	r19, Y+4	; 0x04
    2244:	22 30       	cpi	r18, 0x02	; 2
    2246:	31 05       	cpc	r19, r1
    2248:	81 f0       	breq	.+32     	; 0x226a <GPIO_setupPortDirection+0x68>
    224a:	8b 81       	ldd	r24, Y+3	; 0x03
    224c:	9c 81       	ldd	r25, Y+4	; 0x04
    224e:	83 30       	cpi	r24, 0x03	; 3
    2250:	91 05       	cpc	r25, r1
    2252:	81 f0       	breq	.+32     	; 0x2274 <GPIO_setupPortDirection+0x72>
    2254:	13 c0       	rjmp	.+38     	; 0x227c <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2256:	ea e3       	ldi	r30, 0x3A	; 58
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	8a 81       	ldd	r24, Y+2	; 0x02
    225c:	80 83       	st	Z, r24
    225e:	0e c0       	rjmp	.+28     	; 0x227c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2260:	e7 e3       	ldi	r30, 0x37	; 55
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	8a 81       	ldd	r24, Y+2	; 0x02
    2266:	80 83       	st	Z, r24
    2268:	09 c0       	rjmp	.+18     	; 0x227c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    226a:	e4 e3       	ldi	r30, 0x34	; 52
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	8a 81       	ldd	r24, Y+2	; 0x02
    2270:	80 83       	st	Z, r24
    2272:	04 c0       	rjmp	.+8      	; 0x227c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2274:	e1 e3       	ldi	r30, 0x31	; 49
    2276:	f0 e0       	ldi	r31, 0x00	; 0
    2278:	8a 81       	ldd	r24, Y+2	; 0x02
    227a:	80 83       	st	Z, r24
			break;
		}
	}
}
    227c:	0f 90       	pop	r0
    227e:	0f 90       	pop	r0
    2280:	0f 90       	pop	r0
    2282:	0f 90       	pop	r0
    2284:	cf 91       	pop	r28
    2286:	df 91       	pop	r29
    2288:	08 95       	ret

0000228a <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    228a:	df 93       	push	r29
    228c:	cf 93       	push	r28
    228e:	00 d0       	rcall	.+0      	; 0x2290 <GPIO_writePort+0x6>
    2290:	00 d0       	rcall	.+0      	; 0x2292 <GPIO_writePort+0x8>
    2292:	cd b7       	in	r28, 0x3d	; 61
    2294:	de b7       	in	r29, 0x3e	; 62
    2296:	89 83       	std	Y+1, r24	; 0x01
    2298:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((port_num >= NUM_OF_PORTS))
    229a:	89 81       	ldd	r24, Y+1	; 0x01
    229c:	84 30       	cpi	r24, 0x04	; 4
    229e:	90 f5       	brcc	.+100    	; 0x2304 <GPIO_writePort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch (port_num)
    22a0:	89 81       	ldd	r24, Y+1	; 0x01
    22a2:	28 2f       	mov	r18, r24
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	3c 83       	std	Y+4, r19	; 0x04
    22a8:	2b 83       	std	Y+3, r18	; 0x03
    22aa:	8b 81       	ldd	r24, Y+3	; 0x03
    22ac:	9c 81       	ldd	r25, Y+4	; 0x04
    22ae:	81 30       	cpi	r24, 0x01	; 1
    22b0:	91 05       	cpc	r25, r1
    22b2:	d1 f0       	breq	.+52     	; 0x22e8 <GPIO_writePort+0x5e>
    22b4:	2b 81       	ldd	r18, Y+3	; 0x03
    22b6:	3c 81       	ldd	r19, Y+4	; 0x04
    22b8:	22 30       	cpi	r18, 0x02	; 2
    22ba:	31 05       	cpc	r19, r1
    22bc:	2c f4       	brge	.+10     	; 0x22c8 <GPIO_writePort+0x3e>
    22be:	8b 81       	ldd	r24, Y+3	; 0x03
    22c0:	9c 81       	ldd	r25, Y+4	; 0x04
    22c2:	00 97       	sbiw	r24, 0x00	; 0
    22c4:	61 f0       	breq	.+24     	; 0x22de <GPIO_writePort+0x54>
    22c6:	1e c0       	rjmp	.+60     	; 0x2304 <GPIO_writePort+0x7a>
    22c8:	2b 81       	ldd	r18, Y+3	; 0x03
    22ca:	3c 81       	ldd	r19, Y+4	; 0x04
    22cc:	22 30       	cpi	r18, 0x02	; 2
    22ce:	31 05       	cpc	r19, r1
    22d0:	81 f0       	breq	.+32     	; 0x22f2 <GPIO_writePort+0x68>
    22d2:	8b 81       	ldd	r24, Y+3	; 0x03
    22d4:	9c 81       	ldd	r25, Y+4	; 0x04
    22d6:	83 30       	cpi	r24, 0x03	; 3
    22d8:	91 05       	cpc	r25, r1
    22da:	81 f0       	breq	.+32     	; 0x22fc <GPIO_writePort+0x72>
    22dc:	13 c0       	rjmp	.+38     	; 0x2304 <GPIO_writePort+0x7a>
		{
			case PORTA_ID:
				PORTA = value;
    22de:	eb e3       	ldi	r30, 0x3B	; 59
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	8a 81       	ldd	r24, Y+2	; 0x02
    22e4:	80 83       	st	Z, r24
    22e6:	0e c0       	rjmp	.+28     	; 0x2304 <GPIO_writePort+0x7a>
				break;
			case PORTB_ID:
				PORTB = value;
    22e8:	e8 e3       	ldi	r30, 0x38	; 56
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	8a 81       	ldd	r24, Y+2	; 0x02
    22ee:	80 83       	st	Z, r24
    22f0:	09 c0       	rjmp	.+18     	; 0x2304 <GPIO_writePort+0x7a>
				break;
			case PORTC_ID:
				PORTC = value;
    22f2:	e5 e3       	ldi	r30, 0x35	; 53
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	8a 81       	ldd	r24, Y+2	; 0x02
    22f8:	80 83       	st	Z, r24
    22fa:	04 c0       	rjmp	.+8      	; 0x2304 <GPIO_writePort+0x7a>
				break;
			case PORTD_ID:
				PORTD = value;
    22fc:	e2 e3       	ldi	r30, 0x32	; 50
    22fe:	f0 e0       	ldi	r31, 0x00	; 0
    2300:	8a 81       	ldd	r24, Y+2	; 0x02
    2302:	80 83       	st	Z, r24
				break;
		}
	}
}
    2304:	0f 90       	pop	r0
    2306:	0f 90       	pop	r0
    2308:	0f 90       	pop	r0
    230a:	0f 90       	pop	r0
    230c:	cf 91       	pop	r28
    230e:	df 91       	pop	r29
    2310:	08 95       	ret

00002312 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2312:	df 93       	push	r29
    2314:	cf 93       	push	r28
    2316:	00 d0       	rcall	.+0      	; 0x2318 <GPIO_readPort+0x6>
    2318:	00 d0       	rcall	.+0      	; 0x231a <GPIO_readPort+0x8>
    231a:	0f 92       	push	r0
    231c:	cd b7       	in	r28, 0x3d	; 61
    231e:	de b7       	in	r29, 0x3e	; 62
    2320:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((port_num >= NUM_OF_PORTS))
    2322:	89 81       	ldd	r24, Y+1	; 0x01
    2324:	84 30       	cpi	r24, 0x04	; 4
    2326:	10 f0       	brcs	.+4      	; 0x232c <GPIO_readPort+0x1a>
	{
		return LOGIC_LOW;
    2328:	1c 82       	std	Y+4, r1	; 0x04
    232a:	34 c0       	rjmp	.+104    	; 0x2394 <GPIO_readPort+0x82>
	}
	else
	{
		switch (port_num)
    232c:	89 81       	ldd	r24, Y+1	; 0x01
    232e:	28 2f       	mov	r18, r24
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	3b 83       	std	Y+3, r19	; 0x03
    2334:	2a 83       	std	Y+2, r18	; 0x02
    2336:	8a 81       	ldd	r24, Y+2	; 0x02
    2338:	9b 81       	ldd	r25, Y+3	; 0x03
    233a:	81 30       	cpi	r24, 0x01	; 1
    233c:	91 05       	cpc	r25, r1
    233e:	d1 f0       	breq	.+52     	; 0x2374 <GPIO_readPort+0x62>
    2340:	2a 81       	ldd	r18, Y+2	; 0x02
    2342:	3b 81       	ldd	r19, Y+3	; 0x03
    2344:	22 30       	cpi	r18, 0x02	; 2
    2346:	31 05       	cpc	r19, r1
    2348:	2c f4       	brge	.+10     	; 0x2354 <GPIO_readPort+0x42>
    234a:	8a 81       	ldd	r24, Y+2	; 0x02
    234c:	9b 81       	ldd	r25, Y+3	; 0x03
    234e:	00 97       	sbiw	r24, 0x00	; 0
    2350:	61 f0       	breq	.+24     	; 0x236a <GPIO_readPort+0x58>
    2352:	1f c0       	rjmp	.+62     	; 0x2392 <GPIO_readPort+0x80>
    2354:	2a 81       	ldd	r18, Y+2	; 0x02
    2356:	3b 81       	ldd	r19, Y+3	; 0x03
    2358:	22 30       	cpi	r18, 0x02	; 2
    235a:	31 05       	cpc	r19, r1
    235c:	81 f0       	breq	.+32     	; 0x237e <GPIO_readPort+0x6c>
    235e:	8a 81       	ldd	r24, Y+2	; 0x02
    2360:	9b 81       	ldd	r25, Y+3	; 0x03
    2362:	83 30       	cpi	r24, 0x03	; 3
    2364:	91 05       	cpc	r25, r1
    2366:	81 f0       	breq	.+32     	; 0x2388 <GPIO_readPort+0x76>
    2368:	14 c0       	rjmp	.+40     	; 0x2392 <GPIO_readPort+0x80>
		{
			case PORTA_ID:
				return PINA;
    236a:	e9 e3       	ldi	r30, 0x39	; 57
    236c:	f0 e0       	ldi	r31, 0x00	; 0
    236e:	90 81       	ld	r25, Z
    2370:	9c 83       	std	Y+4, r25	; 0x04
    2372:	10 c0       	rjmp	.+32     	; 0x2394 <GPIO_readPort+0x82>
				break;
			case PORTB_ID:
				return PINB;
    2374:	e6 e3       	ldi	r30, 0x36	; 54
    2376:	f0 e0       	ldi	r31, 0x00	; 0
    2378:	20 81       	ld	r18, Z
    237a:	2c 83       	std	Y+4, r18	; 0x04
    237c:	0b c0       	rjmp	.+22     	; 0x2394 <GPIO_readPort+0x82>
				break;
			case PORTC_ID:
				return PINC;
    237e:	e3 e3       	ldi	r30, 0x33	; 51
    2380:	f0 e0       	ldi	r31, 0x00	; 0
    2382:	30 81       	ld	r19, Z
    2384:	3c 83       	std	Y+4, r19	; 0x04
    2386:	06 c0       	rjmp	.+12     	; 0x2394 <GPIO_readPort+0x82>
				break;
			case PORTD_ID:
				return PIND;
    2388:	e0 e3       	ldi	r30, 0x30	; 48
    238a:	f0 e0       	ldi	r31, 0x00	; 0
    238c:	80 81       	ld	r24, Z
    238e:	8c 83       	std	Y+4, r24	; 0x04
    2390:	01 c0       	rjmp	.+2      	; 0x2394 <GPIO_readPort+0x82>
    2392:	02 c0       	rjmp	.+4      	; 0x2398 <GPIO_readPort+0x86>
				break;
		}
	}

}
    2394:	9c 81       	ldd	r25, Y+4	; 0x04
    2396:	9d 83       	std	Y+5, r25	; 0x05
    2398:	8d 81       	ldd	r24, Y+5	; 0x05
    239a:	0f 90       	pop	r0
    239c:	0f 90       	pop	r0
    239e:	0f 90       	pop	r0
    23a0:	0f 90       	pop	r0
    23a2:	0f 90       	pop	r0
    23a4:	cf 91       	pop	r28
    23a6:	df 91       	pop	r29
    23a8:	08 95       	ret

000023aa <DcMotor_Init>:
uint8 fanState;

/*	Motor initialization, IN1, IN2, ENABLE pins are output
 *  initially, the fan state is OFF*/
void DcMotor_Init(void)
{
    23aa:	df 93       	push	r29
    23ac:	cf 93       	push	r28
    23ae:	cd b7       	in	r28, 0x3d	; 61
    23b0:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(MOTOR_ENABLE_PORT_ID, MOTOR_ENABLE_PIN_ID, PIN_OUTPUT);
    23b2:	81 e0       	ldi	r24, 0x01	; 1
    23b4:	63 e0       	ldi	r22, 0x03	; 3
    23b6:	41 e0       	ldi	r20, 0x01	; 1
    23b8:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_IN1_PORT_ID, MOTOR_IN1_PIN_ID, PIN_OUTPUT);
    23bc:	83 e0       	ldi	r24, 0x03	; 3
    23be:	66 e0       	ldi	r22, 0x06	; 6
    23c0:	41 e0       	ldi	r20, 0x01	; 1
    23c2:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_IN2_PORT_ID, MOTOR_IN2_PIN_ID, PIN_OUTPUT);
    23c6:	83 e0       	ldi	r24, 0x03	; 3
    23c8:	67 e0       	ldi	r22, 0x07	; 7
    23ca:	41 e0       	ldi	r20, 0x01	; 1
    23cc:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <GPIO_setupPinDirection>

	GPIO_writePin(MOTOR_IN1_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_LOW);
    23d0:	83 e0       	ldi	r24, 0x03	; 3
    23d2:	66 e0       	ldi	r22, 0x06	; 6
    23d4:	40 e0       	ldi	r20, 0x00	; 0
    23d6:	0e 94 77 0f 	call	0x1eee	; 0x1eee <GPIO_writePin>
	GPIO_writePin(MOTOR_IN2_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
    23da:	83 e0       	ldi	r24, 0x03	; 3
    23dc:	67 e0       	ldi	r22, 0x07	; 7
    23de:	40 e0       	ldi	r20, 0x00	; 0
    23e0:	0e 94 77 0f 	call	0x1eee	; 0x1eee <GPIO_writePin>

	fanState = LOGIC_LOW;
    23e4:	10 92 89 01 	sts	0x0189, r1
}
    23e8:	cf 91       	pop	r28
    23ea:	df 91       	pop	r29
    23ec:	08 95       	ret

000023ee <DcMotor_Rotate>:

/*checking the state of motor, and it's rotation speed*/
void DcMotor_Rotate(DcMotor_State state, uint8 speed)
{
    23ee:	df 93       	push	r29
    23f0:	cf 93       	push	r28
    23f2:	00 d0       	rcall	.+0      	; 0x23f4 <DcMotor_Rotate+0x6>
    23f4:	00 d0       	rcall	.+0      	; 0x23f6 <DcMotor_Rotate+0x8>
    23f6:	cd b7       	in	r28, 0x3d	; 61
    23f8:	de b7       	in	r29, 0x3e	; 62
    23fa:	89 83       	std	Y+1, r24	; 0x01
    23fc:	6a 83       	std	Y+2, r22	; 0x02
	switch (state) {
    23fe:	89 81       	ldd	r24, Y+1	; 0x01
    2400:	28 2f       	mov	r18, r24
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	3c 83       	std	Y+4, r19	; 0x04
    2406:	2b 83       	std	Y+3, r18	; 0x03
    2408:	8b 81       	ldd	r24, Y+3	; 0x03
    240a:	9c 81       	ldd	r25, Y+4	; 0x04
    240c:	81 30       	cpi	r24, 0x01	; 1
    240e:	91 05       	cpc	r25, r1
    2410:	b9 f0       	breq	.+46     	; 0x2440 <DcMotor_Rotate+0x52>
    2412:	2b 81       	ldd	r18, Y+3	; 0x03
    2414:	3c 81       	ldd	r19, Y+4	; 0x04
    2416:	22 30       	cpi	r18, 0x02	; 2
    2418:	31 05       	cpc	r19, r1
    241a:	01 f1       	breq	.+64     	; 0x245c <DcMotor_Rotate+0x6e>
    241c:	8b 81       	ldd	r24, Y+3	; 0x03
    241e:	9c 81       	ldd	r25, Y+4	; 0x04
    2420:	00 97       	sbiw	r24, 0x00	; 0
    2422:	41 f5       	brne	.+80     	; 0x2474 <DcMotor_Rotate+0x86>
		case CW:
			fanState = LOGIC_HIGH;
    2424:	81 e0       	ldi	r24, 0x01	; 1
    2426:	80 93 89 01 	sts	0x0189, r24
			GPIO_writePin(MOTOR_IN1_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_LOW);
    242a:	83 e0       	ldi	r24, 0x03	; 3
    242c:	66 e0       	ldi	r22, 0x06	; 6
    242e:	40 e0       	ldi	r20, 0x00	; 0
    2430:	0e 94 77 0f 	call	0x1eee	; 0x1eee <GPIO_writePin>
			GPIO_writePin(MOTOR_IN2_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_HIGH);
    2434:	83 e0       	ldi	r24, 0x03	; 3
    2436:	67 e0       	ldi	r22, 0x07	; 7
    2438:	41 e0       	ldi	r20, 0x01	; 1
    243a:	0e 94 77 0f 	call	0x1eee	; 0x1eee <GPIO_writePin>
    243e:	1a c0       	rjmp	.+52     	; 0x2474 <DcMotor_Rotate+0x86>
			break;
		case A_CW:
			fanState = LOGIC_HIGH;
    2440:	81 e0       	ldi	r24, 0x01	; 1
    2442:	80 93 89 01 	sts	0x0189, r24
			GPIO_writePin(MOTOR_IN1_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_HIGH);
    2446:	83 e0       	ldi	r24, 0x03	; 3
    2448:	66 e0       	ldi	r22, 0x06	; 6
    244a:	41 e0       	ldi	r20, 0x01	; 1
    244c:	0e 94 77 0f 	call	0x1eee	; 0x1eee <GPIO_writePin>
			GPIO_writePin(MOTOR_IN2_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
    2450:	83 e0       	ldi	r24, 0x03	; 3
    2452:	67 e0       	ldi	r22, 0x07	; 7
    2454:	40 e0       	ldi	r20, 0x00	; 0
    2456:	0e 94 77 0f 	call	0x1eee	; 0x1eee <GPIO_writePin>
    245a:	0c c0       	rjmp	.+24     	; 0x2474 <DcMotor_Rotate+0x86>
			break;
		case STOP:
			fanState = LOGIC_LOW;
    245c:	10 92 89 01 	sts	0x0189, r1
			GPIO_writePin(MOTOR_IN1_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_LOW);
    2460:	83 e0       	ldi	r24, 0x03	; 3
    2462:	66 e0       	ldi	r22, 0x06	; 6
    2464:	40 e0       	ldi	r20, 0x00	; 0
    2466:	0e 94 77 0f 	call	0x1eee	; 0x1eee <GPIO_writePin>
			GPIO_writePin(MOTOR_IN2_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
    246a:	83 e0       	ldi	r24, 0x03	; 3
    246c:	67 e0       	ldi	r22, 0x07	; 7
    246e:	40 e0       	ldi	r20, 0x00	; 0
    2470:	0e 94 77 0f 	call	0x1eee	; 0x1eee <GPIO_writePin>
			break;
	}

//	/*putting the speed to the duty cycle*/
//	PWM_Timer0_Start(speed);
}
    2474:	0f 90       	pop	r0
    2476:	0f 90       	pop	r0
    2478:	0f 90       	pop	r0
    247a:	0f 90       	pop	r0
    247c:	cf 91       	pop	r28
    247e:	df 91       	pop	r29
    2480:	08 95       	ret

00002482 <__udivmodsi4>:
    2482:	a1 e2       	ldi	r26, 0x21	; 33
    2484:	1a 2e       	mov	r1, r26
    2486:	aa 1b       	sub	r26, r26
    2488:	bb 1b       	sub	r27, r27
    248a:	fd 01       	movw	r30, r26
    248c:	0d c0       	rjmp	.+26     	; 0x24a8 <__udivmodsi4_ep>

0000248e <__udivmodsi4_loop>:
    248e:	aa 1f       	adc	r26, r26
    2490:	bb 1f       	adc	r27, r27
    2492:	ee 1f       	adc	r30, r30
    2494:	ff 1f       	adc	r31, r31
    2496:	a2 17       	cp	r26, r18
    2498:	b3 07       	cpc	r27, r19
    249a:	e4 07       	cpc	r30, r20
    249c:	f5 07       	cpc	r31, r21
    249e:	20 f0       	brcs	.+8      	; 0x24a8 <__udivmodsi4_ep>
    24a0:	a2 1b       	sub	r26, r18
    24a2:	b3 0b       	sbc	r27, r19
    24a4:	e4 0b       	sbc	r30, r20
    24a6:	f5 0b       	sbc	r31, r21

000024a8 <__udivmodsi4_ep>:
    24a8:	66 1f       	adc	r22, r22
    24aa:	77 1f       	adc	r23, r23
    24ac:	88 1f       	adc	r24, r24
    24ae:	99 1f       	adc	r25, r25
    24b0:	1a 94       	dec	r1
    24b2:	69 f7       	brne	.-38     	; 0x248e <__udivmodsi4_loop>
    24b4:	60 95       	com	r22
    24b6:	70 95       	com	r23
    24b8:	80 95       	com	r24
    24ba:	90 95       	com	r25
    24bc:	9b 01       	movw	r18, r22
    24be:	ac 01       	movw	r20, r24
    24c0:	bd 01       	movw	r22, r26
    24c2:	cf 01       	movw	r24, r30
    24c4:	08 95       	ret

000024c6 <__prologue_saves__>:
    24c6:	2f 92       	push	r2
    24c8:	3f 92       	push	r3
    24ca:	4f 92       	push	r4
    24cc:	5f 92       	push	r5
    24ce:	6f 92       	push	r6
    24d0:	7f 92       	push	r7
    24d2:	8f 92       	push	r8
    24d4:	9f 92       	push	r9
    24d6:	af 92       	push	r10
    24d8:	bf 92       	push	r11
    24da:	cf 92       	push	r12
    24dc:	df 92       	push	r13
    24de:	ef 92       	push	r14
    24e0:	ff 92       	push	r15
    24e2:	0f 93       	push	r16
    24e4:	1f 93       	push	r17
    24e6:	cf 93       	push	r28
    24e8:	df 93       	push	r29
    24ea:	cd b7       	in	r28, 0x3d	; 61
    24ec:	de b7       	in	r29, 0x3e	; 62
    24ee:	ca 1b       	sub	r28, r26
    24f0:	db 0b       	sbc	r29, r27
    24f2:	0f b6       	in	r0, 0x3f	; 63
    24f4:	f8 94       	cli
    24f6:	de bf       	out	0x3e, r29	; 62
    24f8:	0f be       	out	0x3f, r0	; 63
    24fa:	cd bf       	out	0x3d, r28	; 61
    24fc:	09 94       	ijmp

000024fe <__epilogue_restores__>:
    24fe:	2a 88       	ldd	r2, Y+18	; 0x12
    2500:	39 88       	ldd	r3, Y+17	; 0x11
    2502:	48 88       	ldd	r4, Y+16	; 0x10
    2504:	5f 84       	ldd	r5, Y+15	; 0x0f
    2506:	6e 84       	ldd	r6, Y+14	; 0x0e
    2508:	7d 84       	ldd	r7, Y+13	; 0x0d
    250a:	8c 84       	ldd	r8, Y+12	; 0x0c
    250c:	9b 84       	ldd	r9, Y+11	; 0x0b
    250e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2510:	b9 84       	ldd	r11, Y+9	; 0x09
    2512:	c8 84       	ldd	r12, Y+8	; 0x08
    2514:	df 80       	ldd	r13, Y+7	; 0x07
    2516:	ee 80       	ldd	r14, Y+6	; 0x06
    2518:	fd 80       	ldd	r15, Y+5	; 0x05
    251a:	0c 81       	ldd	r16, Y+4	; 0x04
    251c:	1b 81       	ldd	r17, Y+3	; 0x03
    251e:	aa 81       	ldd	r26, Y+2	; 0x02
    2520:	b9 81       	ldd	r27, Y+1	; 0x01
    2522:	ce 0f       	add	r28, r30
    2524:	d1 1d       	adc	r29, r1
    2526:	0f b6       	in	r0, 0x3f	; 63
    2528:	f8 94       	cli
    252a:	de bf       	out	0x3e, r29	; 62
    252c:	0f be       	out	0x3f, r0	; 63
    252e:	cd bf       	out	0x3d, r28	; 61
    2530:	ed 01       	movw	r28, r26
    2532:	08 95       	ret

00002534 <_exit>:
    2534:	f8 94       	cli

00002536 <__stop_program>:
    2536:	ff cf       	rjmp	.-2      	; 0x2536 <__stop_program>

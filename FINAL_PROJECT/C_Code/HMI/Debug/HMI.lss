
HMI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002fe8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000da  00800060  00002fe8  0000307c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  0080013a  0080013a  00003156  2**0
                  ALLOC
  3 .stab         00002d0c  00000000  00000000  00003158  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000142e  00000000  00000000  00005e64  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007292  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000073d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007542  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000918b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a076  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ae24  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000af84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b211  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b9df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 d4 0f 	jmp	0x1fa8	; 0x1fa8 <__vector_4>
      14:	0c 94 a1 0f 	jmp	0x1f42	; 0x1f42 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 6e 0f 	jmp	0x1edc	; 0x1edc <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 3b 0f 	jmp	0x1e76	; 0x1e76 <__vector_9>
      28:	0c 94 08 0f 	jmp	0x1e10	; 0x1e10 <__vector_10>
      2c:	0c 94 d5 0e 	jmp	0x1daa	; 0x1daa <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ee       	ldi	r30, 0xE8	; 232
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 33       	cpi	r26, 0x3A	; 58
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e3       	ldi	r26, 0x3A	; 58
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 34       	cpi	r26, 0x4F	; 79
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <main>
      8a:	0c 94 f2 17 	jmp	0x2fe4	; 0x2fe4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 76 17 	jmp	0x2eec	; 0x2eec <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e2       	ldi	r26, 0x2B	; 43
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 92 17 	jmp	0x2f24	; 0x2f24 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 82 17 	jmp	0x2f04	; 0x2f04 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 82 17 	jmp	0x2f04	; 0x2f04 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 76 17 	jmp	0x2eec	; 0x2eec <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e2       	ldi	r24, 0x2B	; 43
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 92 17 	jmp	0x2f24	; 0x2f24 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 82 17 	jmp	0x2f04	; 0x2f04 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 82 17 	jmp	0x2f04	; 0x2f04 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 82 17 	jmp	0x2f04	; 0x2f04 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 86 17 	jmp	0x2f0c	; 0x2f0c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 a2 17 	jmp	0x2f44	; 0x2f44 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <LCD_init>:
#include "common_macros.h"
#include <stdlib.h>

/*LCD initialization*/
void LCD_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2e 97       	sbiw	r28, 0x0e	; 14
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	/*Setting the direction of the main pins as OUTPUT*/
	GPIO_setupPinDirection(LCD_RS_PORT, LCD_RS_PIN, 		PIN_OUTPUT);
     b5a:	82 e0       	ldi	r24, 0x02	; 2
     b5c:	60 e0       	ldi	r22, 0x00	; 0
     b5e:	41 e0       	ldi	r20, 0x01	; 1
     b60:	0e 94 80 12 	call	0x2500	; 0x2500 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_Enable_PORT, LCD_Enable_PIN, PIN_OUTPUT);
     b64:	82 e0       	ldi	r24, 0x02	; 2
     b66:	61 e0       	ldi	r22, 0x01	; 1
     b68:	41 e0       	ldi	r20, 0x01	; 1
     b6a:	0e 94 80 12 	call	0x2500	; 0x2500 <GPIO_setupPinDirection>
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	a0 e7       	ldi	r26, 0x70	; 112
     b74:	b1 e4       	ldi	r27, 0x41	; 65
     b76:	8b 87       	std	Y+11, r24	; 0x0b
     b78:	9c 87       	std	Y+12, r25	; 0x0c
     b7a:	ad 87       	std	Y+13, r26	; 0x0d
     b7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b7e:	6b 85       	ldd	r22, Y+11	; 0x0b
     b80:	7c 85       	ldd	r23, Y+12	; 0x0c
     b82:	8d 85       	ldd	r24, Y+13	; 0x0d
     b84:	9e 85       	ldd	r25, Y+14	; 0x0e
     b86:	20 e0       	ldi	r18, 0x00	; 0
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	4a ef       	ldi	r20, 0xFA	; 250
     b8c:	54 e4       	ldi	r21, 0x44	; 68
     b8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     b92:	dc 01       	movw	r26, r24
     b94:	cb 01       	movw	r24, r22
     b96:	8f 83       	std	Y+7, r24	; 0x07
     b98:	98 87       	std	Y+8, r25	; 0x08
     b9a:	a9 87       	std	Y+9, r26	; 0x09
     b9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b9e:	6f 81       	ldd	r22, Y+7	; 0x07
     ba0:	78 85       	ldd	r23, Y+8	; 0x08
     ba2:	89 85       	ldd	r24, Y+9	; 0x09
     ba4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ba6:	20 e0       	ldi	r18, 0x00	; 0
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	40 e8       	ldi	r20, 0x80	; 128
     bac:	5f e3       	ldi	r21, 0x3F	; 63
     bae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bb2:	88 23       	and	r24, r24
     bb4:	2c f4       	brge	.+10     	; 0xbc0 <LCD_init+0x7a>
		__ticks = 1;
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	9e 83       	std	Y+6, r25	; 0x06
     bbc:	8d 83       	std	Y+5, r24	; 0x05
     bbe:	3f c0       	rjmp	.+126    	; 0xc3e <LCD_init+0xf8>
	else if (__tmp > 65535)
     bc0:	6f 81       	ldd	r22, Y+7	; 0x07
     bc2:	78 85       	ldd	r23, Y+8	; 0x08
     bc4:	89 85       	ldd	r24, Y+9	; 0x09
     bc6:	9a 85       	ldd	r25, Y+10	; 0x0a
     bc8:	20 e0       	ldi	r18, 0x00	; 0
     bca:	3f ef       	ldi	r19, 0xFF	; 255
     bcc:	4f e7       	ldi	r20, 0x7F	; 127
     bce:	57 e4       	ldi	r21, 0x47	; 71
     bd0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bd4:	18 16       	cp	r1, r24
     bd6:	4c f5       	brge	.+82     	; 0xc2a <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bd8:	6b 85       	ldd	r22, Y+11	; 0x0b
     bda:	7c 85       	ldd	r23, Y+12	; 0x0c
     bdc:	8d 85       	ldd	r24, Y+13	; 0x0d
     bde:	9e 85       	ldd	r25, Y+14	; 0x0e
     be0:	20 e0       	ldi	r18, 0x00	; 0
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	40 e2       	ldi	r20, 0x20	; 32
     be6:	51 e4       	ldi	r21, 0x41	; 65
     be8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bec:	dc 01       	movw	r26, r24
     bee:	cb 01       	movw	r24, r22
     bf0:	bc 01       	movw	r22, r24
     bf2:	cd 01       	movw	r24, r26
     bf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     bf8:	dc 01       	movw	r26, r24
     bfa:	cb 01       	movw	r24, r22
     bfc:	9e 83       	std	Y+6, r25	; 0x06
     bfe:	8d 83       	std	Y+5, r24	; 0x05
     c00:	0f c0       	rjmp	.+30     	; 0xc20 <LCD_init+0xda>
     c02:	88 ec       	ldi	r24, 0xC8	; 200
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	9c 83       	std	Y+4, r25	; 0x04
     c08:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c0a:	8b 81       	ldd	r24, Y+3	; 0x03
     c0c:	9c 81       	ldd	r25, Y+4	; 0x04
     c0e:	01 97       	sbiw	r24, 0x01	; 1
     c10:	f1 f7       	brne	.-4      	; 0xc0e <LCD_init+0xc8>
     c12:	9c 83       	std	Y+4, r25	; 0x04
     c14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c16:	8d 81       	ldd	r24, Y+5	; 0x05
     c18:	9e 81       	ldd	r25, Y+6	; 0x06
     c1a:	01 97       	sbiw	r24, 0x01	; 1
     c1c:	9e 83       	std	Y+6, r25	; 0x06
     c1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c20:	8d 81       	ldd	r24, Y+5	; 0x05
     c22:	9e 81       	ldd	r25, Y+6	; 0x06
     c24:	00 97       	sbiw	r24, 0x00	; 0
     c26:	69 f7       	brne	.-38     	; 0xc02 <LCD_init+0xbc>
     c28:	14 c0       	rjmp	.+40     	; 0xc52 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c2a:	6f 81       	ldd	r22, Y+7	; 0x07
     c2c:	78 85       	ldd	r23, Y+8	; 0x08
     c2e:	89 85       	ldd	r24, Y+9	; 0x09
     c30:	9a 85       	ldd	r25, Y+10	; 0x0a
     c32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c36:	dc 01       	movw	r26, r24
     c38:	cb 01       	movw	r24, r22
     c3a:	9e 83       	std	Y+6, r25	; 0x06
     c3c:	8d 83       	std	Y+5, r24	; 0x05
     c3e:	8d 81       	ldd	r24, Y+5	; 0x05
     c40:	9e 81       	ldd	r25, Y+6	; 0x06
     c42:	9a 83       	std	Y+2, r25	; 0x02
     c44:	89 83       	std	Y+1, r24	; 0x01
     c46:	89 81       	ldd	r24, Y+1	; 0x01
     c48:	9a 81       	ldd	r25, Y+2	; 0x02
     c4a:	01 97       	sbiw	r24, 0x01	; 1
     c4c:	f1 f7       	brne	.-4      	; 0xc4a <LCD_init+0x104>
     c4e:	9a 83       	std	Y+2, r25	; 0x02
     c50:	89 83       	std	Y+1, r24	; 0x01

	/* LCD Power ON delay (always > 15ms) */
	_delay_ms(15);
#if(LDC_MODE == 8)
	GPIO_setupPortDirection(LCD_Command_Data_PORT, PORT_OUTPUT);
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	6f ef       	ldi	r22, 0xFF	; 255
     c56:	0e 94 f5 14 	call	0x29ea	; 0x29ea <GPIO_setupPortDirection>
#endif


	/*Setting LCD modes & initial Setup*/
#if(LDC_MODE == 8)
	LCD_SendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
     c5a:	88 e3       	ldi	r24, 0x38	; 56
     c5c:	0e 94 3f 06 	call	0xc7e	; 0xc7e <LCD_SendCommand>
	/* Send for 4 bit initialization of LCD  */
	LCD_SendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
	LCD_SendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
	LCD_SendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
#endif
	LCD_SendCommand(LCD_CURSOR_OFF);
     c60:	8c e0       	ldi	r24, 0x0C	; 12
     c62:	0e 94 3f 06 	call	0xc7e	; 0xc7e <LCD_SendCommand>
	LCD_SendCommand(LCD_CLEAR_COMMAND);
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	0e 94 3f 06 	call	0xc7e	; 0xc7e <LCD_SendCommand>
}
     c6c:	2e 96       	adiw	r28, 0x0e	; 14
     c6e:	0f b6       	in	r0, 0x3f	; 63
     c70:	f8 94       	cli
     c72:	de bf       	out	0x3e, r29	; 62
     c74:	0f be       	out	0x3f, r0	; 63
     c76:	cd bf       	out	0x3d, r28	; 61
     c78:	cf 91       	pop	r28
     c7a:	df 91       	pop	r29
     c7c:	08 95       	ret

00000c7e <LCD_SendCommand>:

/*Sending required commands*/
void LCD_SendCommand(uint8 command)
{
     c7e:	df 93       	push	r29
     c80:	cf 93       	push	r28
     c82:	cd b7       	in	r28, 0x3d	; 61
     c84:	de b7       	in	r29, 0x3e	; 62
     c86:	e9 97       	sbiw	r28, 0x39	; 57
     c88:	0f b6       	in	r0, 0x3f	; 63
     c8a:	f8 94       	cli
     c8c:	de bf       	out	0x3e, r29	; 62
     c8e:	0f be       	out	0x3f, r0	; 63
     c90:	cd bf       	out	0x3d, r28	; 61
     c92:	89 af       	std	Y+57, r24	; 0x39
#if(LDC_MODE == 8)
	/*following this scenario from the Data Sheet Timing Diagram*/
	GPIO_writePin(LCD_RS_PORT, LCD_RS_PIN, LOGIC_LOW);
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	40 e0       	ldi	r20, 0x00	; 0
     c9a:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <GPIO_writePin>
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	a0 e8       	ldi	r26, 0x80	; 128
     ca4:	bf e3       	ldi	r27, 0x3F	; 63
     ca6:	8d ab       	std	Y+53, r24	; 0x35
     ca8:	9e ab       	std	Y+54, r25	; 0x36
     caa:	af ab       	std	Y+55, r26	; 0x37
     cac:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cae:	6d a9       	ldd	r22, Y+53	; 0x35
     cb0:	7e a9       	ldd	r23, Y+54	; 0x36
     cb2:	8f a9       	ldd	r24, Y+55	; 0x37
     cb4:	98 ad       	ldd	r25, Y+56	; 0x38
     cb6:	20 e0       	ldi	r18, 0x00	; 0
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	4a ef       	ldi	r20, 0xFA	; 250
     cbc:	54 e4       	ldi	r21, 0x44	; 68
     cbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cc2:	dc 01       	movw	r26, r24
     cc4:	cb 01       	movw	r24, r22
     cc6:	89 ab       	std	Y+49, r24	; 0x31
     cc8:	9a ab       	std	Y+50, r25	; 0x32
     cca:	ab ab       	std	Y+51, r26	; 0x33
     ccc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     cce:	69 a9       	ldd	r22, Y+49	; 0x31
     cd0:	7a a9       	ldd	r23, Y+50	; 0x32
     cd2:	8b a9       	ldd	r24, Y+51	; 0x33
     cd4:	9c a9       	ldd	r25, Y+52	; 0x34
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	40 e8       	ldi	r20, 0x80	; 128
     cdc:	5f e3       	ldi	r21, 0x3F	; 63
     cde:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ce2:	88 23       	and	r24, r24
     ce4:	2c f4       	brge	.+10     	; 0xcf0 <LCD_SendCommand+0x72>
		__ticks = 1;
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	98 ab       	std	Y+48, r25	; 0x30
     cec:	8f a7       	std	Y+47, r24	; 0x2f
     cee:	3f c0       	rjmp	.+126    	; 0xd6e <LCD_SendCommand+0xf0>
	else if (__tmp > 65535)
     cf0:	69 a9       	ldd	r22, Y+49	; 0x31
     cf2:	7a a9       	ldd	r23, Y+50	; 0x32
     cf4:	8b a9       	ldd	r24, Y+51	; 0x33
     cf6:	9c a9       	ldd	r25, Y+52	; 0x34
     cf8:	20 e0       	ldi	r18, 0x00	; 0
     cfa:	3f ef       	ldi	r19, 0xFF	; 255
     cfc:	4f e7       	ldi	r20, 0x7F	; 127
     cfe:	57 e4       	ldi	r21, 0x47	; 71
     d00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d04:	18 16       	cp	r1, r24
     d06:	4c f5       	brge	.+82     	; 0xd5a <LCD_SendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d08:	6d a9       	ldd	r22, Y+53	; 0x35
     d0a:	7e a9       	ldd	r23, Y+54	; 0x36
     d0c:	8f a9       	ldd	r24, Y+55	; 0x37
     d0e:	98 ad       	ldd	r25, Y+56	; 0x38
     d10:	20 e0       	ldi	r18, 0x00	; 0
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	40 e2       	ldi	r20, 0x20	; 32
     d16:	51 e4       	ldi	r21, 0x41	; 65
     d18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d1c:	dc 01       	movw	r26, r24
     d1e:	cb 01       	movw	r24, r22
     d20:	bc 01       	movw	r22, r24
     d22:	cd 01       	movw	r24, r26
     d24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d28:	dc 01       	movw	r26, r24
     d2a:	cb 01       	movw	r24, r22
     d2c:	98 ab       	std	Y+48, r25	; 0x30
     d2e:	8f a7       	std	Y+47, r24	; 0x2f
     d30:	0f c0       	rjmp	.+30     	; 0xd50 <LCD_SendCommand+0xd2>
     d32:	88 ec       	ldi	r24, 0xC8	; 200
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	9e a7       	std	Y+46, r25	; 0x2e
     d38:	8d a7       	std	Y+45, r24	; 0x2d
     d3a:	8d a5       	ldd	r24, Y+45	; 0x2d
     d3c:	9e a5       	ldd	r25, Y+46	; 0x2e
     d3e:	01 97       	sbiw	r24, 0x01	; 1
     d40:	f1 f7       	brne	.-4      	; 0xd3e <LCD_SendCommand+0xc0>
     d42:	9e a7       	std	Y+46, r25	; 0x2e
     d44:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d46:	8f a5       	ldd	r24, Y+47	; 0x2f
     d48:	98 a9       	ldd	r25, Y+48	; 0x30
     d4a:	01 97       	sbiw	r24, 0x01	; 1
     d4c:	98 ab       	std	Y+48, r25	; 0x30
     d4e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d50:	8f a5       	ldd	r24, Y+47	; 0x2f
     d52:	98 a9       	ldd	r25, Y+48	; 0x30
     d54:	00 97       	sbiw	r24, 0x00	; 0
     d56:	69 f7       	brne	.-38     	; 0xd32 <LCD_SendCommand+0xb4>
     d58:	14 c0       	rjmp	.+40     	; 0xd82 <LCD_SendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d5a:	69 a9       	ldd	r22, Y+49	; 0x31
     d5c:	7a a9       	ldd	r23, Y+50	; 0x32
     d5e:	8b a9       	ldd	r24, Y+51	; 0x33
     d60:	9c a9       	ldd	r25, Y+52	; 0x34
     d62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d66:	dc 01       	movw	r26, r24
     d68:	cb 01       	movw	r24, r22
     d6a:	98 ab       	std	Y+48, r25	; 0x30
     d6c:	8f a7       	std	Y+47, r24	; 0x2f
     d6e:	8f a5       	ldd	r24, Y+47	; 0x2f
     d70:	98 a9       	ldd	r25, Y+48	; 0x30
     d72:	9c a7       	std	Y+44, r25	; 0x2c
     d74:	8b a7       	std	Y+43, r24	; 0x2b
     d76:	8b a5       	ldd	r24, Y+43	; 0x2b
     d78:	9c a5       	ldd	r25, Y+44	; 0x2c
     d7a:	01 97       	sbiw	r24, 0x01	; 1
     d7c:	f1 f7       	brne	.-4      	; 0xd7a <LCD_SendCommand+0xfc>
     d7e:	9c a7       	std	Y+44, r25	; 0x2c
     d80:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_Enable_PORT, LCD_Enable_PIN, LOGIC_HIGH);
     d82:	82 e0       	ldi	r24, 0x02	; 2
     d84:	61 e0       	ldi	r22, 0x01	; 1
     d86:	41 e0       	ldi	r20, 0x01	; 1
     d88:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <GPIO_writePin>
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	a0 e8       	ldi	r26, 0x80	; 128
     d92:	bf e3       	ldi	r27, 0x3F	; 63
     d94:	8f a3       	std	Y+39, r24	; 0x27
     d96:	98 a7       	std	Y+40, r25	; 0x28
     d98:	a9 a7       	std	Y+41, r26	; 0x29
     d9a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d9c:	6f a1       	ldd	r22, Y+39	; 0x27
     d9e:	78 a5       	ldd	r23, Y+40	; 0x28
     da0:	89 a5       	ldd	r24, Y+41	; 0x29
     da2:	9a a5       	ldd	r25, Y+42	; 0x2a
     da4:	20 e0       	ldi	r18, 0x00	; 0
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	4a ef       	ldi	r20, 0xFA	; 250
     daa:	54 e4       	ldi	r21, 0x44	; 68
     dac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     db0:	dc 01       	movw	r26, r24
     db2:	cb 01       	movw	r24, r22
     db4:	8b a3       	std	Y+35, r24	; 0x23
     db6:	9c a3       	std	Y+36, r25	; 0x24
     db8:	ad a3       	std	Y+37, r26	; 0x25
     dba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     dbc:	6b a1       	ldd	r22, Y+35	; 0x23
     dbe:	7c a1       	ldd	r23, Y+36	; 0x24
     dc0:	8d a1       	ldd	r24, Y+37	; 0x25
     dc2:	9e a1       	ldd	r25, Y+38	; 0x26
     dc4:	20 e0       	ldi	r18, 0x00	; 0
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	40 e8       	ldi	r20, 0x80	; 128
     dca:	5f e3       	ldi	r21, 0x3F	; 63
     dcc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dd0:	88 23       	and	r24, r24
     dd2:	2c f4       	brge	.+10     	; 0xdde <LCD_SendCommand+0x160>
		__ticks = 1;
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	9a a3       	std	Y+34, r25	; 0x22
     dda:	89 a3       	std	Y+33, r24	; 0x21
     ddc:	3f c0       	rjmp	.+126    	; 0xe5c <LCD_SendCommand+0x1de>
	else if (__tmp > 65535)
     dde:	6b a1       	ldd	r22, Y+35	; 0x23
     de0:	7c a1       	ldd	r23, Y+36	; 0x24
     de2:	8d a1       	ldd	r24, Y+37	; 0x25
     de4:	9e a1       	ldd	r25, Y+38	; 0x26
     de6:	20 e0       	ldi	r18, 0x00	; 0
     de8:	3f ef       	ldi	r19, 0xFF	; 255
     dea:	4f e7       	ldi	r20, 0x7F	; 127
     dec:	57 e4       	ldi	r21, 0x47	; 71
     dee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     df2:	18 16       	cp	r1, r24
     df4:	4c f5       	brge	.+82     	; 0xe48 <LCD_SendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     df6:	6f a1       	ldd	r22, Y+39	; 0x27
     df8:	78 a5       	ldd	r23, Y+40	; 0x28
     dfa:	89 a5       	ldd	r24, Y+41	; 0x29
     dfc:	9a a5       	ldd	r25, Y+42	; 0x2a
     dfe:	20 e0       	ldi	r18, 0x00	; 0
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	40 e2       	ldi	r20, 0x20	; 32
     e04:	51 e4       	ldi	r21, 0x41	; 65
     e06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e0a:	dc 01       	movw	r26, r24
     e0c:	cb 01       	movw	r24, r22
     e0e:	bc 01       	movw	r22, r24
     e10:	cd 01       	movw	r24, r26
     e12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e16:	dc 01       	movw	r26, r24
     e18:	cb 01       	movw	r24, r22
     e1a:	9a a3       	std	Y+34, r25	; 0x22
     e1c:	89 a3       	std	Y+33, r24	; 0x21
     e1e:	0f c0       	rjmp	.+30     	; 0xe3e <LCD_SendCommand+0x1c0>
     e20:	88 ec       	ldi	r24, 0xC8	; 200
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	98 a3       	std	Y+32, r25	; 0x20
     e26:	8f 8f       	std	Y+31, r24	; 0x1f
     e28:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e2a:	98 a1       	ldd	r25, Y+32	; 0x20
     e2c:	01 97       	sbiw	r24, 0x01	; 1
     e2e:	f1 f7       	brne	.-4      	; 0xe2c <LCD_SendCommand+0x1ae>
     e30:	98 a3       	std	Y+32, r25	; 0x20
     e32:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e34:	89 a1       	ldd	r24, Y+33	; 0x21
     e36:	9a a1       	ldd	r25, Y+34	; 0x22
     e38:	01 97       	sbiw	r24, 0x01	; 1
     e3a:	9a a3       	std	Y+34, r25	; 0x22
     e3c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e3e:	89 a1       	ldd	r24, Y+33	; 0x21
     e40:	9a a1       	ldd	r25, Y+34	; 0x22
     e42:	00 97       	sbiw	r24, 0x00	; 0
     e44:	69 f7       	brne	.-38     	; 0xe20 <LCD_SendCommand+0x1a2>
     e46:	14 c0       	rjmp	.+40     	; 0xe70 <LCD_SendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e48:	6b a1       	ldd	r22, Y+35	; 0x23
     e4a:	7c a1       	ldd	r23, Y+36	; 0x24
     e4c:	8d a1       	ldd	r24, Y+37	; 0x25
     e4e:	9e a1       	ldd	r25, Y+38	; 0x26
     e50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e54:	dc 01       	movw	r26, r24
     e56:	cb 01       	movw	r24, r22
     e58:	9a a3       	std	Y+34, r25	; 0x22
     e5a:	89 a3       	std	Y+33, r24	; 0x21
     e5c:	89 a1       	ldd	r24, Y+33	; 0x21
     e5e:	9a a1       	ldd	r25, Y+34	; 0x22
     e60:	9e 8f       	std	Y+30, r25	; 0x1e
     e62:	8d 8f       	std	Y+29, r24	; 0x1d
     e64:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e66:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e68:	01 97       	sbiw	r24, 0x01	; 1
     e6a:	f1 f7       	brne	.-4      	; 0xe68 <LCD_SendCommand+0x1ea>
     e6c:	9e 8f       	std	Y+30, r25	; 0x1e
     e6e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePort(LCD_Command_Data_PORT, command);
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	69 ad       	ldd	r22, Y+57	; 0x39
     e74:	0e 94 39 15 	call	0x2a72	; 0x2a72 <GPIO_writePort>
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	a0 e8       	ldi	r26, 0x80	; 128
     e7e:	bf e3       	ldi	r27, 0x3F	; 63
     e80:	89 8f       	std	Y+25, r24	; 0x19
     e82:	9a 8f       	std	Y+26, r25	; 0x1a
     e84:	ab 8f       	std	Y+27, r26	; 0x1b
     e86:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e88:	69 8d       	ldd	r22, Y+25	; 0x19
     e8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e90:	20 e0       	ldi	r18, 0x00	; 0
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	4a ef       	ldi	r20, 0xFA	; 250
     e96:	54 e4       	ldi	r21, 0x44	; 68
     e98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e9c:	dc 01       	movw	r26, r24
     e9e:	cb 01       	movw	r24, r22
     ea0:	8d 8b       	std	Y+21, r24	; 0x15
     ea2:	9e 8b       	std	Y+22, r25	; 0x16
     ea4:	af 8b       	std	Y+23, r26	; 0x17
     ea6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ea8:	6d 89       	ldd	r22, Y+21	; 0x15
     eaa:	7e 89       	ldd	r23, Y+22	; 0x16
     eac:	8f 89       	ldd	r24, Y+23	; 0x17
     eae:	98 8d       	ldd	r25, Y+24	; 0x18
     eb0:	20 e0       	ldi	r18, 0x00	; 0
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	40 e8       	ldi	r20, 0x80	; 128
     eb6:	5f e3       	ldi	r21, 0x3F	; 63
     eb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ebc:	88 23       	and	r24, r24
     ebe:	2c f4       	brge	.+10     	; 0xeca <LCD_SendCommand+0x24c>
		__ticks = 1;
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	9c 8b       	std	Y+20, r25	; 0x14
     ec6:	8b 8b       	std	Y+19, r24	; 0x13
     ec8:	3f c0       	rjmp	.+126    	; 0xf48 <LCD_SendCommand+0x2ca>
	else if (__tmp > 65535)
     eca:	6d 89       	ldd	r22, Y+21	; 0x15
     ecc:	7e 89       	ldd	r23, Y+22	; 0x16
     ece:	8f 89       	ldd	r24, Y+23	; 0x17
     ed0:	98 8d       	ldd	r25, Y+24	; 0x18
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	3f ef       	ldi	r19, 0xFF	; 255
     ed6:	4f e7       	ldi	r20, 0x7F	; 127
     ed8:	57 e4       	ldi	r21, 0x47	; 71
     eda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ede:	18 16       	cp	r1, r24
     ee0:	4c f5       	brge	.+82     	; 0xf34 <LCD_SendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ee2:	69 8d       	ldd	r22, Y+25	; 0x19
     ee4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ee6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ee8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	40 e2       	ldi	r20, 0x20	; 32
     ef0:	51 e4       	ldi	r21, 0x41	; 65
     ef2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ef6:	dc 01       	movw	r26, r24
     ef8:	cb 01       	movw	r24, r22
     efa:	bc 01       	movw	r22, r24
     efc:	cd 01       	movw	r24, r26
     efe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f02:	dc 01       	movw	r26, r24
     f04:	cb 01       	movw	r24, r22
     f06:	9c 8b       	std	Y+20, r25	; 0x14
     f08:	8b 8b       	std	Y+19, r24	; 0x13
     f0a:	0f c0       	rjmp	.+30     	; 0xf2a <LCD_SendCommand+0x2ac>
     f0c:	88 ec       	ldi	r24, 0xC8	; 200
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	9a 8b       	std	Y+18, r25	; 0x12
     f12:	89 8b       	std	Y+17, r24	; 0x11
     f14:	89 89       	ldd	r24, Y+17	; 0x11
     f16:	9a 89       	ldd	r25, Y+18	; 0x12
     f18:	01 97       	sbiw	r24, 0x01	; 1
     f1a:	f1 f7       	brne	.-4      	; 0xf18 <LCD_SendCommand+0x29a>
     f1c:	9a 8b       	std	Y+18, r25	; 0x12
     f1e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f20:	8b 89       	ldd	r24, Y+19	; 0x13
     f22:	9c 89       	ldd	r25, Y+20	; 0x14
     f24:	01 97       	sbiw	r24, 0x01	; 1
     f26:	9c 8b       	std	Y+20, r25	; 0x14
     f28:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f2a:	8b 89       	ldd	r24, Y+19	; 0x13
     f2c:	9c 89       	ldd	r25, Y+20	; 0x14
     f2e:	00 97       	sbiw	r24, 0x00	; 0
     f30:	69 f7       	brne	.-38     	; 0xf0c <LCD_SendCommand+0x28e>
     f32:	14 c0       	rjmp	.+40     	; 0xf5c <LCD_SendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f34:	6d 89       	ldd	r22, Y+21	; 0x15
     f36:	7e 89       	ldd	r23, Y+22	; 0x16
     f38:	8f 89       	ldd	r24, Y+23	; 0x17
     f3a:	98 8d       	ldd	r25, Y+24	; 0x18
     f3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f40:	dc 01       	movw	r26, r24
     f42:	cb 01       	movw	r24, r22
     f44:	9c 8b       	std	Y+20, r25	; 0x14
     f46:	8b 8b       	std	Y+19, r24	; 0x13
     f48:	8b 89       	ldd	r24, Y+19	; 0x13
     f4a:	9c 89       	ldd	r25, Y+20	; 0x14
     f4c:	98 8b       	std	Y+16, r25	; 0x10
     f4e:	8f 87       	std	Y+15, r24	; 0x0f
     f50:	8f 85       	ldd	r24, Y+15	; 0x0f
     f52:	98 89       	ldd	r25, Y+16	; 0x10
     f54:	01 97       	sbiw	r24, 0x01	; 1
     f56:	f1 f7       	brne	.-4      	; 0xf54 <LCD_SendCommand+0x2d6>
     f58:	98 8b       	std	Y+16, r25	; 0x10
     f5a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_Enable_PORT, LCD_Enable_PIN, LOGIC_LOW);
     f5c:	82 e0       	ldi	r24, 0x02	; 2
     f5e:	61 e0       	ldi	r22, 0x01	; 1
     f60:	40 e0       	ldi	r20, 0x00	; 0
     f62:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <GPIO_writePin>
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	a0 e8       	ldi	r26, 0x80	; 128
     f6c:	bf e3       	ldi	r27, 0x3F	; 63
     f6e:	8b 87       	std	Y+11, r24	; 0x0b
     f70:	9c 87       	std	Y+12, r25	; 0x0c
     f72:	ad 87       	std	Y+13, r26	; 0x0d
     f74:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f76:	6b 85       	ldd	r22, Y+11	; 0x0b
     f78:	7c 85       	ldd	r23, Y+12	; 0x0c
     f7a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f7c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	4a ef       	ldi	r20, 0xFA	; 250
     f84:	54 e4       	ldi	r21, 0x44	; 68
     f86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f8a:	dc 01       	movw	r26, r24
     f8c:	cb 01       	movw	r24, r22
     f8e:	8f 83       	std	Y+7, r24	; 0x07
     f90:	98 87       	std	Y+8, r25	; 0x08
     f92:	a9 87       	std	Y+9, r26	; 0x09
     f94:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f96:	6f 81       	ldd	r22, Y+7	; 0x07
     f98:	78 85       	ldd	r23, Y+8	; 0x08
     f9a:	89 85       	ldd	r24, Y+9	; 0x09
     f9c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f9e:	20 e0       	ldi	r18, 0x00	; 0
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	40 e8       	ldi	r20, 0x80	; 128
     fa4:	5f e3       	ldi	r21, 0x3F	; 63
     fa6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     faa:	88 23       	and	r24, r24
     fac:	2c f4       	brge	.+10     	; 0xfb8 <LCD_SendCommand+0x33a>
		__ticks = 1;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	9e 83       	std	Y+6, r25	; 0x06
     fb4:	8d 83       	std	Y+5, r24	; 0x05
     fb6:	3f c0       	rjmp	.+126    	; 0x1036 <LCD_SendCommand+0x3b8>
	else if (__tmp > 65535)
     fb8:	6f 81       	ldd	r22, Y+7	; 0x07
     fba:	78 85       	ldd	r23, Y+8	; 0x08
     fbc:	89 85       	ldd	r24, Y+9	; 0x09
     fbe:	9a 85       	ldd	r25, Y+10	; 0x0a
     fc0:	20 e0       	ldi	r18, 0x00	; 0
     fc2:	3f ef       	ldi	r19, 0xFF	; 255
     fc4:	4f e7       	ldi	r20, 0x7F	; 127
     fc6:	57 e4       	ldi	r21, 0x47	; 71
     fc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fcc:	18 16       	cp	r1, r24
     fce:	4c f5       	brge	.+82     	; 0x1022 <LCD_SendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fd0:	6b 85       	ldd	r22, Y+11	; 0x0b
     fd2:	7c 85       	ldd	r23, Y+12	; 0x0c
     fd4:	8d 85       	ldd	r24, Y+13	; 0x0d
     fd6:	9e 85       	ldd	r25, Y+14	; 0x0e
     fd8:	20 e0       	ldi	r18, 0x00	; 0
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	40 e2       	ldi	r20, 0x20	; 32
     fde:	51 e4       	ldi	r21, 0x41	; 65
     fe0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fe4:	dc 01       	movw	r26, r24
     fe6:	cb 01       	movw	r24, r22
     fe8:	bc 01       	movw	r22, r24
     fea:	cd 01       	movw	r24, r26
     fec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ff0:	dc 01       	movw	r26, r24
     ff2:	cb 01       	movw	r24, r22
     ff4:	9e 83       	std	Y+6, r25	; 0x06
     ff6:	8d 83       	std	Y+5, r24	; 0x05
     ff8:	0f c0       	rjmp	.+30     	; 0x1018 <LCD_SendCommand+0x39a>
     ffa:	88 ec       	ldi	r24, 0xC8	; 200
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	9c 83       	std	Y+4, r25	; 0x04
    1000:	8b 83       	std	Y+3, r24	; 0x03
    1002:	8b 81       	ldd	r24, Y+3	; 0x03
    1004:	9c 81       	ldd	r25, Y+4	; 0x04
    1006:	01 97       	sbiw	r24, 0x01	; 1
    1008:	f1 f7       	brne	.-4      	; 0x1006 <LCD_SendCommand+0x388>
    100a:	9c 83       	std	Y+4, r25	; 0x04
    100c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    100e:	8d 81       	ldd	r24, Y+5	; 0x05
    1010:	9e 81       	ldd	r25, Y+6	; 0x06
    1012:	01 97       	sbiw	r24, 0x01	; 1
    1014:	9e 83       	std	Y+6, r25	; 0x06
    1016:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1018:	8d 81       	ldd	r24, Y+5	; 0x05
    101a:	9e 81       	ldd	r25, Y+6	; 0x06
    101c:	00 97       	sbiw	r24, 0x00	; 0
    101e:	69 f7       	brne	.-38     	; 0xffa <LCD_SendCommand+0x37c>
    1020:	14 c0       	rjmp	.+40     	; 0x104a <LCD_SendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1022:	6f 81       	ldd	r22, Y+7	; 0x07
    1024:	78 85       	ldd	r23, Y+8	; 0x08
    1026:	89 85       	ldd	r24, Y+9	; 0x09
    1028:	9a 85       	ldd	r25, Y+10	; 0x0a
    102a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    102e:	dc 01       	movw	r26, r24
    1030:	cb 01       	movw	r24, r22
    1032:	9e 83       	std	Y+6, r25	; 0x06
    1034:	8d 83       	std	Y+5, r24	; 0x05
    1036:	8d 81       	ldd	r24, Y+5	; 0x05
    1038:	9e 81       	ldd	r25, Y+6	; 0x06
    103a:	9a 83       	std	Y+2, r25	; 0x02
    103c:	89 83       	std	Y+1, r24	; 0x01
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	9a 81       	ldd	r25, Y+2	; 0x02
    1042:	01 97       	sbiw	r24, 0x01	; 1
    1044:	f1 f7       	brne	.-4      	; 0x1042 <LCD_SendCommand+0x3c4>
    1046:	9a 83       	std	Y+2, r25	; 0x02
    1048:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(LCD_Command_Data_PORT, LCD_Command_Data_FOURTH_PIN,   GET_VAR_BIT(command,3));
	_delay_ms(1);
	GPIO_writePin(LCD_Enable_PORT, LCD_Enable_PIN, LOGIC_LOW);
	_delay_ms(1);
#endif
}
    104a:	e9 96       	adiw	r28, 0x39	; 57
    104c:	0f b6       	in	r0, 0x3f	; 63
    104e:	f8 94       	cli
    1050:	de bf       	out	0x3e, r29	; 62
    1052:	0f be       	out	0x3f, r0	; 63
    1054:	cd bf       	out	0x3d, r28	; 61
    1056:	cf 91       	pop	r28
    1058:	df 91       	pop	r29
    105a:	08 95       	ret

0000105c <LCD_SendCharacter>:

/*Sending a specific character*/
void LCD_SendCharacter(uint8 character)
{
    105c:	df 93       	push	r29
    105e:	cf 93       	push	r28
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
    1064:	e9 97       	sbiw	r28, 0x39	; 57
    1066:	0f b6       	in	r0, 0x3f	; 63
    1068:	f8 94       	cli
    106a:	de bf       	out	0x3e, r29	; 62
    106c:	0f be       	out	0x3f, r0	; 63
    106e:	cd bf       	out	0x3d, r28	; 61
    1070:	89 af       	std	Y+57, r24	; 0x39
#if(LDC_MODE == 8)
	/*following this scenario from the Data Sheet Timing Diagram*/
	GPIO_writePin(LCD_RS_PORT, LCD_RS_PIN, LOGIC_HIGH);
    1072:	82 e0       	ldi	r24, 0x02	; 2
    1074:	60 e0       	ldi	r22, 0x00	; 0
    1076:	41 e0       	ldi	r20, 0x01	; 1
    1078:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <GPIO_writePin>
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	a0 e8       	ldi	r26, 0x80	; 128
    1082:	bf e3       	ldi	r27, 0x3F	; 63
    1084:	8d ab       	std	Y+53, r24	; 0x35
    1086:	9e ab       	std	Y+54, r25	; 0x36
    1088:	af ab       	std	Y+55, r26	; 0x37
    108a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    108c:	6d a9       	ldd	r22, Y+53	; 0x35
    108e:	7e a9       	ldd	r23, Y+54	; 0x36
    1090:	8f a9       	ldd	r24, Y+55	; 0x37
    1092:	98 ad       	ldd	r25, Y+56	; 0x38
    1094:	20 e0       	ldi	r18, 0x00	; 0
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	4a ef       	ldi	r20, 0xFA	; 250
    109a:	54 e4       	ldi	r21, 0x44	; 68
    109c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10a0:	dc 01       	movw	r26, r24
    10a2:	cb 01       	movw	r24, r22
    10a4:	89 ab       	std	Y+49, r24	; 0x31
    10a6:	9a ab       	std	Y+50, r25	; 0x32
    10a8:	ab ab       	std	Y+51, r26	; 0x33
    10aa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    10ac:	69 a9       	ldd	r22, Y+49	; 0x31
    10ae:	7a a9       	ldd	r23, Y+50	; 0x32
    10b0:	8b a9       	ldd	r24, Y+51	; 0x33
    10b2:	9c a9       	ldd	r25, Y+52	; 0x34
    10b4:	20 e0       	ldi	r18, 0x00	; 0
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	40 e8       	ldi	r20, 0x80	; 128
    10ba:	5f e3       	ldi	r21, 0x3F	; 63
    10bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10c0:	88 23       	and	r24, r24
    10c2:	2c f4       	brge	.+10     	; 0x10ce <LCD_SendCharacter+0x72>
		__ticks = 1;
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	98 ab       	std	Y+48, r25	; 0x30
    10ca:	8f a7       	std	Y+47, r24	; 0x2f
    10cc:	3f c0       	rjmp	.+126    	; 0x114c <LCD_SendCharacter+0xf0>
	else if (__tmp > 65535)
    10ce:	69 a9       	ldd	r22, Y+49	; 0x31
    10d0:	7a a9       	ldd	r23, Y+50	; 0x32
    10d2:	8b a9       	ldd	r24, Y+51	; 0x33
    10d4:	9c a9       	ldd	r25, Y+52	; 0x34
    10d6:	20 e0       	ldi	r18, 0x00	; 0
    10d8:	3f ef       	ldi	r19, 0xFF	; 255
    10da:	4f e7       	ldi	r20, 0x7F	; 127
    10dc:	57 e4       	ldi	r21, 0x47	; 71
    10de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10e2:	18 16       	cp	r1, r24
    10e4:	4c f5       	brge	.+82     	; 0x1138 <LCD_SendCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10e6:	6d a9       	ldd	r22, Y+53	; 0x35
    10e8:	7e a9       	ldd	r23, Y+54	; 0x36
    10ea:	8f a9       	ldd	r24, Y+55	; 0x37
    10ec:	98 ad       	ldd	r25, Y+56	; 0x38
    10ee:	20 e0       	ldi	r18, 0x00	; 0
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	40 e2       	ldi	r20, 0x20	; 32
    10f4:	51 e4       	ldi	r21, 0x41	; 65
    10f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10fa:	dc 01       	movw	r26, r24
    10fc:	cb 01       	movw	r24, r22
    10fe:	bc 01       	movw	r22, r24
    1100:	cd 01       	movw	r24, r26
    1102:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1106:	dc 01       	movw	r26, r24
    1108:	cb 01       	movw	r24, r22
    110a:	98 ab       	std	Y+48, r25	; 0x30
    110c:	8f a7       	std	Y+47, r24	; 0x2f
    110e:	0f c0       	rjmp	.+30     	; 0x112e <LCD_SendCharacter+0xd2>
    1110:	88 ec       	ldi	r24, 0xC8	; 200
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	9e a7       	std	Y+46, r25	; 0x2e
    1116:	8d a7       	std	Y+45, r24	; 0x2d
    1118:	8d a5       	ldd	r24, Y+45	; 0x2d
    111a:	9e a5       	ldd	r25, Y+46	; 0x2e
    111c:	01 97       	sbiw	r24, 0x01	; 1
    111e:	f1 f7       	brne	.-4      	; 0x111c <LCD_SendCharacter+0xc0>
    1120:	9e a7       	std	Y+46, r25	; 0x2e
    1122:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1124:	8f a5       	ldd	r24, Y+47	; 0x2f
    1126:	98 a9       	ldd	r25, Y+48	; 0x30
    1128:	01 97       	sbiw	r24, 0x01	; 1
    112a:	98 ab       	std	Y+48, r25	; 0x30
    112c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    112e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1130:	98 a9       	ldd	r25, Y+48	; 0x30
    1132:	00 97       	sbiw	r24, 0x00	; 0
    1134:	69 f7       	brne	.-38     	; 0x1110 <LCD_SendCharacter+0xb4>
    1136:	14 c0       	rjmp	.+40     	; 0x1160 <LCD_SendCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1138:	69 a9       	ldd	r22, Y+49	; 0x31
    113a:	7a a9       	ldd	r23, Y+50	; 0x32
    113c:	8b a9       	ldd	r24, Y+51	; 0x33
    113e:	9c a9       	ldd	r25, Y+52	; 0x34
    1140:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1144:	dc 01       	movw	r26, r24
    1146:	cb 01       	movw	r24, r22
    1148:	98 ab       	std	Y+48, r25	; 0x30
    114a:	8f a7       	std	Y+47, r24	; 0x2f
    114c:	8f a5       	ldd	r24, Y+47	; 0x2f
    114e:	98 a9       	ldd	r25, Y+48	; 0x30
    1150:	9c a7       	std	Y+44, r25	; 0x2c
    1152:	8b a7       	std	Y+43, r24	; 0x2b
    1154:	8b a5       	ldd	r24, Y+43	; 0x2b
    1156:	9c a5       	ldd	r25, Y+44	; 0x2c
    1158:	01 97       	sbiw	r24, 0x01	; 1
    115a:	f1 f7       	brne	.-4      	; 0x1158 <LCD_SendCharacter+0xfc>
    115c:	9c a7       	std	Y+44, r25	; 0x2c
    115e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_Enable_PORT, LCD_Enable_PIN, LOGIC_HIGH);
    1160:	82 e0       	ldi	r24, 0x02	; 2
    1162:	61 e0       	ldi	r22, 0x01	; 1
    1164:	41 e0       	ldi	r20, 0x01	; 1
    1166:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <GPIO_writePin>
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	a0 e8       	ldi	r26, 0x80	; 128
    1170:	bf e3       	ldi	r27, 0x3F	; 63
    1172:	8f a3       	std	Y+39, r24	; 0x27
    1174:	98 a7       	std	Y+40, r25	; 0x28
    1176:	a9 a7       	std	Y+41, r26	; 0x29
    1178:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    117a:	6f a1       	ldd	r22, Y+39	; 0x27
    117c:	78 a5       	ldd	r23, Y+40	; 0x28
    117e:	89 a5       	ldd	r24, Y+41	; 0x29
    1180:	9a a5       	ldd	r25, Y+42	; 0x2a
    1182:	20 e0       	ldi	r18, 0x00	; 0
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	4a ef       	ldi	r20, 0xFA	; 250
    1188:	54 e4       	ldi	r21, 0x44	; 68
    118a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    118e:	dc 01       	movw	r26, r24
    1190:	cb 01       	movw	r24, r22
    1192:	8b a3       	std	Y+35, r24	; 0x23
    1194:	9c a3       	std	Y+36, r25	; 0x24
    1196:	ad a3       	std	Y+37, r26	; 0x25
    1198:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    119a:	6b a1       	ldd	r22, Y+35	; 0x23
    119c:	7c a1       	ldd	r23, Y+36	; 0x24
    119e:	8d a1       	ldd	r24, Y+37	; 0x25
    11a0:	9e a1       	ldd	r25, Y+38	; 0x26
    11a2:	20 e0       	ldi	r18, 0x00	; 0
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	40 e8       	ldi	r20, 0x80	; 128
    11a8:	5f e3       	ldi	r21, 0x3F	; 63
    11aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11ae:	88 23       	and	r24, r24
    11b0:	2c f4       	brge	.+10     	; 0x11bc <LCD_SendCharacter+0x160>
		__ticks = 1;
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	9a a3       	std	Y+34, r25	; 0x22
    11b8:	89 a3       	std	Y+33, r24	; 0x21
    11ba:	3f c0       	rjmp	.+126    	; 0x123a <LCD_SendCharacter+0x1de>
	else if (__tmp > 65535)
    11bc:	6b a1       	ldd	r22, Y+35	; 0x23
    11be:	7c a1       	ldd	r23, Y+36	; 0x24
    11c0:	8d a1       	ldd	r24, Y+37	; 0x25
    11c2:	9e a1       	ldd	r25, Y+38	; 0x26
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	3f ef       	ldi	r19, 0xFF	; 255
    11c8:	4f e7       	ldi	r20, 0x7F	; 127
    11ca:	57 e4       	ldi	r21, 0x47	; 71
    11cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11d0:	18 16       	cp	r1, r24
    11d2:	4c f5       	brge	.+82     	; 0x1226 <LCD_SendCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11d4:	6f a1       	ldd	r22, Y+39	; 0x27
    11d6:	78 a5       	ldd	r23, Y+40	; 0x28
    11d8:	89 a5       	ldd	r24, Y+41	; 0x29
    11da:	9a a5       	ldd	r25, Y+42	; 0x2a
    11dc:	20 e0       	ldi	r18, 0x00	; 0
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	40 e2       	ldi	r20, 0x20	; 32
    11e2:	51 e4       	ldi	r21, 0x41	; 65
    11e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11e8:	dc 01       	movw	r26, r24
    11ea:	cb 01       	movw	r24, r22
    11ec:	bc 01       	movw	r22, r24
    11ee:	cd 01       	movw	r24, r26
    11f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11f4:	dc 01       	movw	r26, r24
    11f6:	cb 01       	movw	r24, r22
    11f8:	9a a3       	std	Y+34, r25	; 0x22
    11fa:	89 a3       	std	Y+33, r24	; 0x21
    11fc:	0f c0       	rjmp	.+30     	; 0x121c <LCD_SendCharacter+0x1c0>
    11fe:	88 ec       	ldi	r24, 0xC8	; 200
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	98 a3       	std	Y+32, r25	; 0x20
    1204:	8f 8f       	std	Y+31, r24	; 0x1f
    1206:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1208:	98 a1       	ldd	r25, Y+32	; 0x20
    120a:	01 97       	sbiw	r24, 0x01	; 1
    120c:	f1 f7       	brne	.-4      	; 0x120a <LCD_SendCharacter+0x1ae>
    120e:	98 a3       	std	Y+32, r25	; 0x20
    1210:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1212:	89 a1       	ldd	r24, Y+33	; 0x21
    1214:	9a a1       	ldd	r25, Y+34	; 0x22
    1216:	01 97       	sbiw	r24, 0x01	; 1
    1218:	9a a3       	std	Y+34, r25	; 0x22
    121a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    121c:	89 a1       	ldd	r24, Y+33	; 0x21
    121e:	9a a1       	ldd	r25, Y+34	; 0x22
    1220:	00 97       	sbiw	r24, 0x00	; 0
    1222:	69 f7       	brne	.-38     	; 0x11fe <LCD_SendCharacter+0x1a2>
    1224:	14 c0       	rjmp	.+40     	; 0x124e <LCD_SendCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1226:	6b a1       	ldd	r22, Y+35	; 0x23
    1228:	7c a1       	ldd	r23, Y+36	; 0x24
    122a:	8d a1       	ldd	r24, Y+37	; 0x25
    122c:	9e a1       	ldd	r25, Y+38	; 0x26
    122e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1232:	dc 01       	movw	r26, r24
    1234:	cb 01       	movw	r24, r22
    1236:	9a a3       	std	Y+34, r25	; 0x22
    1238:	89 a3       	std	Y+33, r24	; 0x21
    123a:	89 a1       	ldd	r24, Y+33	; 0x21
    123c:	9a a1       	ldd	r25, Y+34	; 0x22
    123e:	9e 8f       	std	Y+30, r25	; 0x1e
    1240:	8d 8f       	std	Y+29, r24	; 0x1d
    1242:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1244:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1246:	01 97       	sbiw	r24, 0x01	; 1
    1248:	f1 f7       	brne	.-4      	; 0x1246 <LCD_SendCharacter+0x1ea>
    124a:	9e 8f       	std	Y+30, r25	; 0x1e
    124c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePort(LCD_Command_Data_PORT, character);
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	69 ad       	ldd	r22, Y+57	; 0x39
    1252:	0e 94 39 15 	call	0x2a72	; 0x2a72 <GPIO_writePort>
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	a0 e8       	ldi	r26, 0x80	; 128
    125c:	bf e3       	ldi	r27, 0x3F	; 63
    125e:	89 8f       	std	Y+25, r24	; 0x19
    1260:	9a 8f       	std	Y+26, r25	; 0x1a
    1262:	ab 8f       	std	Y+27, r26	; 0x1b
    1264:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1266:	69 8d       	ldd	r22, Y+25	; 0x19
    1268:	7a 8d       	ldd	r23, Y+26	; 0x1a
    126a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    126c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	4a ef       	ldi	r20, 0xFA	; 250
    1274:	54 e4       	ldi	r21, 0x44	; 68
    1276:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    127a:	dc 01       	movw	r26, r24
    127c:	cb 01       	movw	r24, r22
    127e:	8d 8b       	std	Y+21, r24	; 0x15
    1280:	9e 8b       	std	Y+22, r25	; 0x16
    1282:	af 8b       	std	Y+23, r26	; 0x17
    1284:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1286:	6d 89       	ldd	r22, Y+21	; 0x15
    1288:	7e 89       	ldd	r23, Y+22	; 0x16
    128a:	8f 89       	ldd	r24, Y+23	; 0x17
    128c:	98 8d       	ldd	r25, Y+24	; 0x18
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	40 e8       	ldi	r20, 0x80	; 128
    1294:	5f e3       	ldi	r21, 0x3F	; 63
    1296:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    129a:	88 23       	and	r24, r24
    129c:	2c f4       	brge	.+10     	; 0x12a8 <LCD_SendCharacter+0x24c>
		__ticks = 1;
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	9c 8b       	std	Y+20, r25	; 0x14
    12a4:	8b 8b       	std	Y+19, r24	; 0x13
    12a6:	3f c0       	rjmp	.+126    	; 0x1326 <LCD_SendCharacter+0x2ca>
	else if (__tmp > 65535)
    12a8:	6d 89       	ldd	r22, Y+21	; 0x15
    12aa:	7e 89       	ldd	r23, Y+22	; 0x16
    12ac:	8f 89       	ldd	r24, Y+23	; 0x17
    12ae:	98 8d       	ldd	r25, Y+24	; 0x18
    12b0:	20 e0       	ldi	r18, 0x00	; 0
    12b2:	3f ef       	ldi	r19, 0xFF	; 255
    12b4:	4f e7       	ldi	r20, 0x7F	; 127
    12b6:	57 e4       	ldi	r21, 0x47	; 71
    12b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12bc:	18 16       	cp	r1, r24
    12be:	4c f5       	brge	.+82     	; 0x1312 <LCD_SendCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12c0:	69 8d       	ldd	r22, Y+25	; 0x19
    12c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12c8:	20 e0       	ldi	r18, 0x00	; 0
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	40 e2       	ldi	r20, 0x20	; 32
    12ce:	51 e4       	ldi	r21, 0x41	; 65
    12d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12d4:	dc 01       	movw	r26, r24
    12d6:	cb 01       	movw	r24, r22
    12d8:	bc 01       	movw	r22, r24
    12da:	cd 01       	movw	r24, r26
    12dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e0:	dc 01       	movw	r26, r24
    12e2:	cb 01       	movw	r24, r22
    12e4:	9c 8b       	std	Y+20, r25	; 0x14
    12e6:	8b 8b       	std	Y+19, r24	; 0x13
    12e8:	0f c0       	rjmp	.+30     	; 0x1308 <LCD_SendCharacter+0x2ac>
    12ea:	88 ec       	ldi	r24, 0xC8	; 200
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	9a 8b       	std	Y+18, r25	; 0x12
    12f0:	89 8b       	std	Y+17, r24	; 0x11
    12f2:	89 89       	ldd	r24, Y+17	; 0x11
    12f4:	9a 89       	ldd	r25, Y+18	; 0x12
    12f6:	01 97       	sbiw	r24, 0x01	; 1
    12f8:	f1 f7       	brne	.-4      	; 0x12f6 <LCD_SendCharacter+0x29a>
    12fa:	9a 8b       	std	Y+18, r25	; 0x12
    12fc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12fe:	8b 89       	ldd	r24, Y+19	; 0x13
    1300:	9c 89       	ldd	r25, Y+20	; 0x14
    1302:	01 97       	sbiw	r24, 0x01	; 1
    1304:	9c 8b       	std	Y+20, r25	; 0x14
    1306:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1308:	8b 89       	ldd	r24, Y+19	; 0x13
    130a:	9c 89       	ldd	r25, Y+20	; 0x14
    130c:	00 97       	sbiw	r24, 0x00	; 0
    130e:	69 f7       	brne	.-38     	; 0x12ea <LCD_SendCharacter+0x28e>
    1310:	14 c0       	rjmp	.+40     	; 0x133a <LCD_SendCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1312:	6d 89       	ldd	r22, Y+21	; 0x15
    1314:	7e 89       	ldd	r23, Y+22	; 0x16
    1316:	8f 89       	ldd	r24, Y+23	; 0x17
    1318:	98 8d       	ldd	r25, Y+24	; 0x18
    131a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    131e:	dc 01       	movw	r26, r24
    1320:	cb 01       	movw	r24, r22
    1322:	9c 8b       	std	Y+20, r25	; 0x14
    1324:	8b 8b       	std	Y+19, r24	; 0x13
    1326:	8b 89       	ldd	r24, Y+19	; 0x13
    1328:	9c 89       	ldd	r25, Y+20	; 0x14
    132a:	98 8b       	std	Y+16, r25	; 0x10
    132c:	8f 87       	std	Y+15, r24	; 0x0f
    132e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1330:	98 89       	ldd	r25, Y+16	; 0x10
    1332:	01 97       	sbiw	r24, 0x01	; 1
    1334:	f1 f7       	brne	.-4      	; 0x1332 <LCD_SendCharacter+0x2d6>
    1336:	98 8b       	std	Y+16, r25	; 0x10
    1338:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(LCD_Enable_PORT, LCD_Enable_PIN, LOGIC_LOW);
    133a:	82 e0       	ldi	r24, 0x02	; 2
    133c:	61 e0       	ldi	r22, 0x01	; 1
    133e:	40 e0       	ldi	r20, 0x00	; 0
    1340:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <GPIO_writePin>
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	a0 e8       	ldi	r26, 0x80	; 128
    134a:	bf e3       	ldi	r27, 0x3F	; 63
    134c:	8b 87       	std	Y+11, r24	; 0x0b
    134e:	9c 87       	std	Y+12, r25	; 0x0c
    1350:	ad 87       	std	Y+13, r26	; 0x0d
    1352:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1354:	6b 85       	ldd	r22, Y+11	; 0x0b
    1356:	7c 85       	ldd	r23, Y+12	; 0x0c
    1358:	8d 85       	ldd	r24, Y+13	; 0x0d
    135a:	9e 85       	ldd	r25, Y+14	; 0x0e
    135c:	20 e0       	ldi	r18, 0x00	; 0
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	4a ef       	ldi	r20, 0xFA	; 250
    1362:	54 e4       	ldi	r21, 0x44	; 68
    1364:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1368:	dc 01       	movw	r26, r24
    136a:	cb 01       	movw	r24, r22
    136c:	8f 83       	std	Y+7, r24	; 0x07
    136e:	98 87       	std	Y+8, r25	; 0x08
    1370:	a9 87       	std	Y+9, r26	; 0x09
    1372:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1374:	6f 81       	ldd	r22, Y+7	; 0x07
    1376:	78 85       	ldd	r23, Y+8	; 0x08
    1378:	89 85       	ldd	r24, Y+9	; 0x09
    137a:	9a 85       	ldd	r25, Y+10	; 0x0a
    137c:	20 e0       	ldi	r18, 0x00	; 0
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	40 e8       	ldi	r20, 0x80	; 128
    1382:	5f e3       	ldi	r21, 0x3F	; 63
    1384:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1388:	88 23       	and	r24, r24
    138a:	2c f4       	brge	.+10     	; 0x1396 <LCD_SendCharacter+0x33a>
		__ticks = 1;
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	9e 83       	std	Y+6, r25	; 0x06
    1392:	8d 83       	std	Y+5, r24	; 0x05
    1394:	3f c0       	rjmp	.+126    	; 0x1414 <LCD_SendCharacter+0x3b8>
	else if (__tmp > 65535)
    1396:	6f 81       	ldd	r22, Y+7	; 0x07
    1398:	78 85       	ldd	r23, Y+8	; 0x08
    139a:	89 85       	ldd	r24, Y+9	; 0x09
    139c:	9a 85       	ldd	r25, Y+10	; 0x0a
    139e:	20 e0       	ldi	r18, 0x00	; 0
    13a0:	3f ef       	ldi	r19, 0xFF	; 255
    13a2:	4f e7       	ldi	r20, 0x7F	; 127
    13a4:	57 e4       	ldi	r21, 0x47	; 71
    13a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13aa:	18 16       	cp	r1, r24
    13ac:	4c f5       	brge	.+82     	; 0x1400 <LCD_SendCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    13b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    13b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    13b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	40 e2       	ldi	r20, 0x20	; 32
    13bc:	51 e4       	ldi	r21, 0x41	; 65
    13be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13c2:	dc 01       	movw	r26, r24
    13c4:	cb 01       	movw	r24, r22
    13c6:	bc 01       	movw	r22, r24
    13c8:	cd 01       	movw	r24, r26
    13ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13ce:	dc 01       	movw	r26, r24
    13d0:	cb 01       	movw	r24, r22
    13d2:	9e 83       	std	Y+6, r25	; 0x06
    13d4:	8d 83       	std	Y+5, r24	; 0x05
    13d6:	0f c0       	rjmp	.+30     	; 0x13f6 <LCD_SendCharacter+0x39a>
    13d8:	88 ec       	ldi	r24, 0xC8	; 200
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	9c 83       	std	Y+4, r25	; 0x04
    13de:	8b 83       	std	Y+3, r24	; 0x03
    13e0:	8b 81       	ldd	r24, Y+3	; 0x03
    13e2:	9c 81       	ldd	r25, Y+4	; 0x04
    13e4:	01 97       	sbiw	r24, 0x01	; 1
    13e6:	f1 f7       	brne	.-4      	; 0x13e4 <LCD_SendCharacter+0x388>
    13e8:	9c 83       	std	Y+4, r25	; 0x04
    13ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ec:	8d 81       	ldd	r24, Y+5	; 0x05
    13ee:	9e 81       	ldd	r25, Y+6	; 0x06
    13f0:	01 97       	sbiw	r24, 0x01	; 1
    13f2:	9e 83       	std	Y+6, r25	; 0x06
    13f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13f6:	8d 81       	ldd	r24, Y+5	; 0x05
    13f8:	9e 81       	ldd	r25, Y+6	; 0x06
    13fa:	00 97       	sbiw	r24, 0x00	; 0
    13fc:	69 f7       	brne	.-38     	; 0x13d8 <LCD_SendCharacter+0x37c>
    13fe:	14 c0       	rjmp	.+40     	; 0x1428 <LCD_SendCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1400:	6f 81       	ldd	r22, Y+7	; 0x07
    1402:	78 85       	ldd	r23, Y+8	; 0x08
    1404:	89 85       	ldd	r24, Y+9	; 0x09
    1406:	9a 85       	ldd	r25, Y+10	; 0x0a
    1408:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    140c:	dc 01       	movw	r26, r24
    140e:	cb 01       	movw	r24, r22
    1410:	9e 83       	std	Y+6, r25	; 0x06
    1412:	8d 83       	std	Y+5, r24	; 0x05
    1414:	8d 81       	ldd	r24, Y+5	; 0x05
    1416:	9e 81       	ldd	r25, Y+6	; 0x06
    1418:	9a 83       	std	Y+2, r25	; 0x02
    141a:	89 83       	std	Y+1, r24	; 0x01
    141c:	89 81       	ldd	r24, Y+1	; 0x01
    141e:	9a 81       	ldd	r25, Y+2	; 0x02
    1420:	01 97       	sbiw	r24, 0x01	; 1
    1422:	f1 f7       	brne	.-4      	; 0x1420 <LCD_SendCharacter+0x3c4>
    1424:	9a 83       	std	Y+2, r25	; 0x02
    1426:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(LCD_Command_Data_PORT, LCD_Command_Data_FOURTH_PIN,   GET_VAR_BIT(character,3));
	_delay_ms(1);
	GPIO_writePin(LCD_Enable_PORT, LCD_Enable_PIN, LOGIC_LOW);
	_delay_ms(1);
#endif
}
    1428:	e9 96       	adiw	r28, 0x39	; 57
    142a:	0f b6       	in	r0, 0x3f	; 63
    142c:	f8 94       	cli
    142e:	de bf       	out	0x3e, r29	; 62
    1430:	0f be       	out	0x3f, r0	; 63
    1432:	cd bf       	out	0x3d, r28	; 61
    1434:	cf 91       	pop	r28
    1436:	df 91       	pop	r29
    1438:	08 95       	ret

0000143a <LCD_SendString>:

/*Sending a specific string*/
void LCD_SendString(uint8 *strPtr)
{
    143a:	df 93       	push	r29
    143c:	cf 93       	push	r28
    143e:	00 d0       	rcall	.+0      	; 0x1440 <LCD_SendString+0x6>
    1440:	0f 92       	push	r0
    1442:	cd b7       	in	r28, 0x3d	; 61
    1444:	de b7       	in	r29, 0x3e	; 62
    1446:	9b 83       	std	Y+3, r25	; 0x03
    1448:	8a 83       	std	Y+2, r24	; 0x02
	/*Looping on the string elements and sending them One By One*/
	uint8 var = 0;
    144a:	19 82       	std	Y+1, r1	; 0x01
    144c:	0e c0       	rjmp	.+28     	; 0x146a <LCD_SendString+0x30>
	while (strPtr[var] != '\0') {
		LCD_SendCharacter(strPtr[var]);	/*Sending each character*/
    144e:	89 81       	ldd	r24, Y+1	; 0x01
    1450:	28 2f       	mov	r18, r24
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	8a 81       	ldd	r24, Y+2	; 0x02
    1456:	9b 81       	ldd	r25, Y+3	; 0x03
    1458:	fc 01       	movw	r30, r24
    145a:	e2 0f       	add	r30, r18
    145c:	f3 1f       	adc	r31, r19
    145e:	80 81       	ld	r24, Z
    1460:	0e 94 2e 08 	call	0x105c	; 0x105c <LCD_SendCharacter>
		var++;
    1464:	89 81       	ldd	r24, Y+1	; 0x01
    1466:	8f 5f       	subi	r24, 0xFF	; 255
    1468:	89 83       	std	Y+1, r24	; 0x01
/*Sending a specific string*/
void LCD_SendString(uint8 *strPtr)
{
	/*Looping on the string elements and sending them One By One*/
	uint8 var = 0;
	while (strPtr[var] != '\0') {
    146a:	89 81       	ldd	r24, Y+1	; 0x01
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	8a 81       	ldd	r24, Y+2	; 0x02
    1472:	9b 81       	ldd	r25, Y+3	; 0x03
    1474:	fc 01       	movw	r30, r24
    1476:	e2 0f       	add	r30, r18
    1478:	f3 1f       	adc	r31, r19
    147a:	80 81       	ld	r24, Z
    147c:	88 23       	and	r24, r24
    147e:	39 f7       	brne	.-50     	; 0x144e <LCD_SendString+0x14>
		LCD_SendCharacter(strPtr[var]);	/*Sending each character*/
		var++;
	}
}
    1480:	0f 90       	pop	r0
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	cf 91       	pop	r28
    1488:	df 91       	pop	r29
    148a:	08 95       	ret

0000148c <LCD_MoveCursor>:

/*Setting the cursor (displaying at row & column) */
void LCD_MoveCursor(uint8 row, uint8 col)
{
    148c:	df 93       	push	r29
    148e:	cf 93       	push	r28
    1490:	00 d0       	rcall	.+0      	; 0x1492 <LCD_MoveCursor+0x6>
    1492:	00 d0       	rcall	.+0      	; 0x1494 <LCD_MoveCursor+0x8>
    1494:	0f 92       	push	r0
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
    149a:	8a 83       	std	Y+2, r24	; 0x02
    149c:	6b 83       	std	Y+3, r22	; 0x03
	/* Calculate the required address in the LCD DDRAM */
	uint8 LCD_Cursor_Address;
	switch (row) {
    149e:	8a 81       	ldd	r24, Y+2	; 0x02
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	3d 83       	std	Y+5, r19	; 0x05
    14a6:	2c 83       	std	Y+4, r18	; 0x04
    14a8:	8c 81       	ldd	r24, Y+4	; 0x04
    14aa:	9d 81       	ldd	r25, Y+5	; 0x05
    14ac:	81 30       	cpi	r24, 0x01	; 1
    14ae:	91 05       	cpc	r25, r1
    14b0:	c1 f0       	breq	.+48     	; 0x14e2 <LCD_MoveCursor+0x56>
    14b2:	2c 81       	ldd	r18, Y+4	; 0x04
    14b4:	3d 81       	ldd	r19, Y+5	; 0x05
    14b6:	22 30       	cpi	r18, 0x02	; 2
    14b8:	31 05       	cpc	r19, r1
    14ba:	2c f4       	brge	.+10     	; 0x14c6 <LCD_MoveCursor+0x3a>
    14bc:	8c 81       	ldd	r24, Y+4	; 0x04
    14be:	9d 81       	ldd	r25, Y+5	; 0x05
    14c0:	00 97       	sbiw	r24, 0x00	; 0
    14c2:	61 f0       	breq	.+24     	; 0x14dc <LCD_MoveCursor+0x50>
    14c4:	19 c0       	rjmp	.+50     	; 0x14f8 <LCD_MoveCursor+0x6c>
    14c6:	2c 81       	ldd	r18, Y+4	; 0x04
    14c8:	3d 81       	ldd	r19, Y+5	; 0x05
    14ca:	22 30       	cpi	r18, 0x02	; 2
    14cc:	31 05       	cpc	r19, r1
    14ce:	69 f0       	breq	.+26     	; 0x14ea <LCD_MoveCursor+0x5e>
    14d0:	8c 81       	ldd	r24, Y+4	; 0x04
    14d2:	9d 81       	ldd	r25, Y+5	; 0x05
    14d4:	83 30       	cpi	r24, 0x03	; 3
    14d6:	91 05       	cpc	r25, r1
    14d8:	61 f0       	breq	.+24     	; 0x14f2 <LCD_MoveCursor+0x66>
    14da:	0e c0       	rjmp	.+28     	; 0x14f8 <LCD_MoveCursor+0x6c>
		case 0:
			LCD_Cursor_Address = col + LCD_First_Row_address;
    14dc:	8b 81       	ldd	r24, Y+3	; 0x03
    14de:	89 83       	std	Y+1, r24	; 0x01
    14e0:	0b c0       	rjmp	.+22     	; 0x14f8 <LCD_MoveCursor+0x6c>
			break;
		case 1:
			LCD_Cursor_Address = col + LCD_Second_Row_address;
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	80 5c       	subi	r24, 0xC0	; 192
    14e6:	89 83       	std	Y+1, r24	; 0x01
    14e8:	07 c0       	rjmp	.+14     	; 0x14f8 <LCD_MoveCursor+0x6c>
			break;
		case 2:
			LCD_Cursor_Address = col + LCD_Third_Row_address;
    14ea:	8b 81       	ldd	r24, Y+3	; 0x03
    14ec:	80 5f       	subi	r24, 0xF0	; 240
    14ee:	89 83       	std	Y+1, r24	; 0x01
    14f0:	03 c0       	rjmp	.+6      	; 0x14f8 <LCD_MoveCursor+0x6c>
			break;
		case 3:
			LCD_Cursor_Address = col + LCD_Fourth_Row_address;
    14f2:	8b 81       	ldd	r24, Y+3	; 0x03
    14f4:	80 5b       	subi	r24, 0xB0	; 176
    14f6:	89 83       	std	Y+1, r24	; 0x01
			break;
	}

	/* Move the LCD cursor to this specific address */
	LCD_SendCommand(LCD_Cursor_Address | LCD_SET_CURSOR_LOCATION);
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
    14fa:	80 68       	ori	r24, 0x80	; 128
    14fc:	0e 94 3f 06 	call	0xc7e	; 0xc7e <LCD_SendCommand>
}
    1500:	0f 90       	pop	r0
    1502:	0f 90       	pop	r0
    1504:	0f 90       	pop	r0
    1506:	0f 90       	pop	r0
    1508:	0f 90       	pop	r0
    150a:	cf 91       	pop	r28
    150c:	df 91       	pop	r29
    150e:	08 95       	ret

00001510 <LCD_SendStringAtRowColumn>:

/*Display the required string in a specific row and column index on the screen*/
void LCD_SendStringAtRowColumn(uint8 row,uint8 col,const char *Str)
{
    1510:	df 93       	push	r29
    1512:	cf 93       	push	r28
    1514:	00 d0       	rcall	.+0      	; 0x1516 <LCD_SendStringAtRowColumn+0x6>
    1516:	00 d0       	rcall	.+0      	; 0x1518 <LCD_SendStringAtRowColumn+0x8>
    1518:	cd b7       	in	r28, 0x3d	; 61
    151a:	de b7       	in	r29, 0x3e	; 62
    151c:	89 83       	std	Y+1, r24	; 0x01
    151e:	6a 83       	std	Y+2, r22	; 0x02
    1520:	5c 83       	std	Y+4, r21	; 0x04
    1522:	4b 83       	std	Y+3, r20	; 0x03
	/*First we set the cursor, Then we display the string*/
	LCD_MoveCursor(row, col);
    1524:	89 81       	ldd	r24, Y+1	; 0x01
    1526:	6a 81       	ldd	r22, Y+2	; 0x02
    1528:	0e 94 46 0a 	call	0x148c	; 0x148c <LCD_MoveCursor>
	LCD_SendString(Str);
    152c:	8b 81       	ldd	r24, Y+3	; 0x03
    152e:	9c 81       	ldd	r25, Y+4	; 0x04
    1530:	0e 94 1d 0a 	call	0x143a	; 0x143a <LCD_SendString>
}
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	0f 90       	pop	r0
    153a:	0f 90       	pop	r0
    153c:	cf 91       	pop	r28
    153e:	df 91       	pop	r29
    1540:	08 95       	ret

00001542 <LCD_intgerToString>:

/*display any number as string*/
void LCD_intgerToString(uint8 data)
{
    1542:	df 93       	push	r29
    1544:	cf 93       	push	r28
    1546:	cd b7       	in	r28, 0x3d	; 61
    1548:	de b7       	in	r29, 0x3e	; 62
    154a:	61 97       	sbiw	r28, 0x11	; 17
    154c:	0f b6       	in	r0, 0x3f	; 63
    154e:	f8 94       	cli
    1550:	de bf       	out	0x3e, r29	; 62
    1552:	0f be       	out	0x3f, r0	; 63
    1554:	cd bf       	out	0x3d, r28	; 61
    1556:	89 8b       	std	Y+17, r24	; 0x11
	uint8 ASCII_Str[16];			/*an array to hold that string*/
	itoa(data, ASCII_Str, 10);		/*A function that turns each digit in a number into its ASCII*/
    1558:	89 89       	ldd	r24, Y+17	; 0x11
    155a:	88 2f       	mov	r24, r24
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	9e 01       	movw	r18, r28
    1560:	2f 5f       	subi	r18, 0xFF	; 255
    1562:	3f 4f       	sbci	r19, 0xFF	; 255
    1564:	b9 01       	movw	r22, r18
    1566:	4a e0       	ldi	r20, 0x0A	; 10
    1568:	50 e0       	ldi	r21, 0x00	; 0
    156a:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <itoa>
	LCD_SendString(ASCII_Str);
    156e:	ce 01       	movw	r24, r28
    1570:	01 96       	adiw	r24, 0x01	; 1
    1572:	0e 94 1d 0a 	call	0x143a	; 0x143a <LCD_SendString>
}
    1576:	61 96       	adiw	r28, 0x11	; 17
    1578:	0f b6       	in	r0, 0x3f	; 63
    157a:	f8 94       	cli
    157c:	de bf       	out	0x3e, r29	; 62
    157e:	0f be       	out	0x3f, r0	; 63
    1580:	cd bf       	out	0x3d, r28	; 61
    1582:	cf 91       	pop	r28
    1584:	df 91       	pop	r29
    1586:	08 95       	ret

00001588 <LCD_SendCharacterAtRowColumn>:

/*Display the required character in a specific row and column index on the screen*/
void LCD_SendCharacterAtRowColumn(uint8 row,uint8 col, uint8 character)
{
    1588:	df 93       	push	r29
    158a:	cf 93       	push	r28
    158c:	00 d0       	rcall	.+0      	; 0x158e <LCD_SendCharacterAtRowColumn+0x6>
    158e:	0f 92       	push	r0
    1590:	cd b7       	in	r28, 0x3d	; 61
    1592:	de b7       	in	r29, 0x3e	; 62
    1594:	89 83       	std	Y+1, r24	; 0x01
    1596:	6a 83       	std	Y+2, r22	; 0x02
    1598:	4b 83       	std	Y+3, r20	; 0x03
	/*First we set the cursor, Then we display the string*/
		LCD_MoveCursor(row, col);
    159a:	89 81       	ldd	r24, Y+1	; 0x01
    159c:	6a 81       	ldd	r22, Y+2	; 0x02
    159e:	0e 94 46 0a 	call	0x148c	; 0x148c <LCD_MoveCursor>
		LCD_SendCharacter(character);
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	0e 94 2e 08 	call	0x105c	; 0x105c <LCD_SendCharacter>
}
    15a8:	0f 90       	pop	r0
    15aa:	0f 90       	pop	r0
    15ac:	0f 90       	pop	r0
    15ae:	cf 91       	pop	r28
    15b0:	df 91       	pop	r29
    15b2:	08 95       	ret

000015b4 <LCD_ClearScreen>:

/*Send the clear screen command*/
void LCD_ClearScreen(void)
{
    15b4:	df 93       	push	r29
    15b6:	cf 93       	push	r28
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
	LCD_SendCommand(LCD_CLEAR_COMMAND);
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	0e 94 3f 06 	call	0xc7e	; 0xc7e <LCD_SendCommand>
}
    15c2:	cf 91       	pop	r28
    15c4:	df 91       	pop	r29
    15c6:	08 95       	ret

000015c8 <main>:
void phaseTwo(void);    /* Password verification and error tracking*/
void phaseThree(void);  /* Options to open door or change password*/
void phaseFour(void);   /* Door operation status display*/
void phaseFive(void);   /* System lock display after multiple failed attempts*/
int main(void)
{
    15c8:	df 93       	push	r29
    15ca:	cf 93       	push	r28
    15cc:	cd b7       	in	r28, 0x3d	; 61
    15ce:	de b7       	in	r29, 0x3e	; 62
    15d0:	2a 97       	sbiw	r28, 0x0a	; 10
    15d2:	0f b6       	in	r0, 0x3f	; 63
    15d4:	f8 94       	cli
    15d6:	de bf       	out	0x3e, r29	; 62
    15d8:	0f be       	out	0x3f, r0	; 63
    15da:	cd bf       	out	0x3d, r28	; 61
    // UART configuration: Baud rate 9600, No parity, 8 data bits, 1 stop bit
    UART_Config UARTRuntime = {9600, DISABLED, EIGHT_BITS, ONE_BIT};
    15dc:	ce 01       	movw	r24, r28
    15de:	01 96       	adiw	r24, 0x01	; 1
    15e0:	9f 83       	std	Y+7, r25	; 0x07
    15e2:	8e 83       	std	Y+6, r24	; 0x06
    15e4:	e4 e3       	ldi	r30, 0x34	; 52
    15e6:	f1 e0       	ldi	r31, 0x01	; 1
    15e8:	f9 87       	std	Y+9, r31	; 0x09
    15ea:	e8 87       	std	Y+8, r30	; 0x08
    15ec:	f5 e0       	ldi	r31, 0x05	; 5
    15ee:	fa 87       	std	Y+10, r31	; 0x0a
    15f0:	e8 85       	ldd	r30, Y+8	; 0x08
    15f2:	f9 85       	ldd	r31, Y+9	; 0x09
    15f4:	00 80       	ld	r0, Z
    15f6:	88 85       	ldd	r24, Y+8	; 0x08
    15f8:	99 85       	ldd	r25, Y+9	; 0x09
    15fa:	01 96       	adiw	r24, 0x01	; 1
    15fc:	99 87       	std	Y+9, r25	; 0x09
    15fe:	88 87       	std	Y+8, r24	; 0x08
    1600:	ee 81       	ldd	r30, Y+6	; 0x06
    1602:	ff 81       	ldd	r31, Y+7	; 0x07
    1604:	00 82       	st	Z, r0
    1606:	8e 81       	ldd	r24, Y+6	; 0x06
    1608:	9f 81       	ldd	r25, Y+7	; 0x07
    160a:	01 96       	adiw	r24, 0x01	; 1
    160c:	9f 83       	std	Y+7, r25	; 0x07
    160e:	8e 83       	std	Y+6, r24	; 0x06
    1610:	9a 85       	ldd	r25, Y+10	; 0x0a
    1612:	91 50       	subi	r25, 0x01	; 1
    1614:	9a 87       	std	Y+10, r25	; 0x0a
    1616:	ea 85       	ldd	r30, Y+10	; 0x0a
    1618:	ee 23       	and	r30, r30
    161a:	51 f7       	brne	.-44     	; 0x15f0 <main+0x28>

    // Initialize the LCD display
    LCD_init();
    161c:	0e 94 a3 05 	call	0xb46	; 0xb46 <LCD_init>

    // Initialize UART communication with specified settings
    UART_Init(&UARTRuntime);
    1620:	ce 01       	movw	r24, r28
    1622:	01 96       	adiw	r24, 0x01	; 1
    1624:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <UART_Init>

    // Main control loop
    while(1)
    {
        // If in phase 1 or reset phase (6), handle initialization or reset logic
        if(PhasesSwitch == 1 || PhasesSwitch == 6)
    1628:	80 91 33 01 	lds	r24, 0x0133
    162c:	81 30       	cpi	r24, 0x01	; 1
    162e:	21 f0       	breq	.+8      	; 0x1638 <main+0x70>
    1630:	80 91 33 01 	lds	r24, 0x0133
    1634:	86 30       	cpi	r24, 0x06	; 6
    1636:	19 f4       	brne	.+6      	; 0x163e <main+0x76>
        {
            phaseOne();
    1638:	0e 94 3b 0b 	call	0x1676	; 0x1676 <phaseOne>
    163c:	f5 cf       	rjmp	.-22     	; 0x1628 <main+0x60>
        }

        // If in phase 2, handle password verification
        else if(PhasesSwitch == 2)
    163e:	80 91 33 01 	lds	r24, 0x0133
    1642:	82 30       	cpi	r24, 0x02	; 2
    1644:	19 f4       	brne	.+6      	; 0x164c <main+0x84>
        {
            phaseTwo();
    1646:	0e 94 b2 0c 	call	0x1964	; 0x1964 <phaseTwo>
    164a:	ee cf       	rjmp	.-36     	; 0x1628 <main+0x60>
        }

        // If in phase 3, display options for door or password change
        else if(PhasesSwitch == 3)
    164c:	80 91 33 01 	lds	r24, 0x0133
    1650:	83 30       	cpi	r24, 0x03	; 3
    1652:	19 f4       	brne	.+6      	; 0x165a <main+0x92>
        {
            phaseThree();
    1654:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <phaseThree>
    1658:	e7 cf       	rjmp	.-50     	; 0x1628 <main+0x60>
        }

        // If in phase 4, display door state messages
        else if(PhasesSwitch == 4)
    165a:	80 91 33 01 	lds	r24, 0x0133
    165e:	84 30       	cpi	r24, 0x04	; 4
    1660:	19 f4       	brne	.+6      	; 0x1668 <main+0xa0>
        {
            phaseFour();
    1662:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <phaseFour>
    1666:	e0 cf       	rjmp	.-64     	; 0x1628 <main+0x60>
        }

        // If in phase 5, activate lock mode due to failed password attempts
        else if(PhasesSwitch == 5)
    1668:	80 91 33 01 	lds	r24, 0x0133
    166c:	85 30       	cpi	r24, 0x05	; 5
    166e:	e1 f6       	brne	.-72     	; 0x1628 <main+0x60>
        {
            phaseFive();
    1670:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <phaseFive>
    1674:	d9 cf       	rjmp	.-78     	; 0x1628 <main+0x60>

00001676 <phaseOne>:

/*
 * This function is responsible for displaying the "PLZ ENTER PASS" message when entering the password.
 * It is also shown when clicking (+) or (-) in phase three, and when unmatched passwords occur.
 */
void phaseOne(void) {
    1676:	df 93       	push	r29
    1678:	cf 93       	push	r28
    167a:	cd b7       	in	r28, 0x3d	; 61
    167c:	de b7       	in	r29, 0x3e	; 62
    167e:	6e 97       	sbiw	r28, 0x1e	; 30
    1680:	0f b6       	in	r0, 0x3f	; 63
    1682:	f8 94       	cli
    1684:	de bf       	out	0x3e, r29	; 62
    1686:	0f be       	out	0x3f, r0	; 63
    1688:	cd bf       	out	0x3d, r28	; 61
    uint8 var;  /* Variables for temporary storage of key input and verification */
    static uint8 passDigit, initialPassLimit; /* Variables to store the pressed key and count of entered characters */

    /* Clear the LCD display */
    LCD_ClearScreen();
    168a:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <LCD_ClearScreen>

    /* Move the LCD cursor to the first row, first column */
    LCD_MoveCursor(0, 0);
    168e:	80 e0       	ldi	r24, 0x00	; 0
    1690:	60 e0       	ldi	r22, 0x00	; 0
    1692:	0e 94 46 0a 	call	0x148c	; 0x148c <LCD_MoveCursor>

    /* Display the message prompting the user to enter the password */
    LCD_SendString("PLZ enter pass:");
    1696:	80 e6       	ldi	r24, 0x60	; 96
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	0e 94 1d 0a 	call	0x143a	; 0x143a <LCD_SendString>
    169e:	98 c0       	rjmp	.+304    	; 0x17d0 <phaseOne+0x15a>

    /* Loop until the '=' key is pressed or 5 characters have been entered */
    while (KEYPAD_getPressedKey() != '=' || initialPassLimit < 5) {
        /* Get the key pressed from the keypad */
    	passDigit = KEYPAD_getPressedKey();
    16a0:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <KEYPAD_getPressedKey>
    16a4:	80 93 3b 01 	sts	0x013B, r24

        /* Check if the key is a valid number (0-9) and ensure less than 5 characters have been entered */
        if ((passDigit <= 9) && (passDigit >= 0) && initialPassLimit < 5) {
    16a8:	80 91 3b 01 	lds	r24, 0x013B
    16ac:	8a 30       	cpi	r24, 0x0A	; 10
    16ae:	08 f0       	brcs	.+2      	; 0x16b2 <phaseOne+0x3c>
    16b0:	8f c0       	rjmp	.+286    	; 0x17d0 <phaseOne+0x15a>
    16b2:	80 91 3a 01 	lds	r24, 0x013A
    16b6:	85 30       	cpi	r24, 0x05	; 5
    16b8:	08 f0       	brcs	.+2      	; 0x16bc <phaseOne+0x46>
    16ba:	8a c0       	rjmp	.+276    	; 0x17d0 <phaseOne+0x15a>
            /* Move the cursor to the corresponding position in the second row */
            LCD_MoveCursor(1, initialPassLimit);
    16bc:	90 91 3a 01 	lds	r25, 0x013A
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	69 2f       	mov	r22, r25
    16c4:	0e 94 46 0a 	call	0x148c	; 0x148c <LCD_MoveCursor>

            /* Display a '*' character for each entered digit (masks the actual input) */
            LCD_SendCharacter('*');
    16c8:	8a e2       	ldi	r24, 0x2A	; 42
    16ca:	0e 94 2e 08 	call	0x105c	; 0x105c <LCD_SendCharacter>

            /* Store the pressed key in the password array */
            passSetArr[initialPassLimit] = passDigit;
    16ce:	80 91 3a 01 	lds	r24, 0x013A
    16d2:	88 2f       	mov	r24, r24
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	20 91 3b 01 	lds	r18, 0x013B
    16da:	fc 01       	movw	r30, r24
    16dc:	eb 5b       	subi	r30, 0xBB	; 187
    16de:	fe 4f       	sbci	r31, 0xFE	; 254
    16e0:	20 83       	st	Z, r18

            /* Increment the count to move to the next position on the display */
            initialPassLimit++;
    16e2:	80 91 3a 01 	lds	r24, 0x013A
    16e6:	8f 5f       	subi	r24, 0xFF	; 255
    16e8:	80 93 3a 01 	sts	0x013A, r24
    16ec:	80 e0       	ldi	r24, 0x00	; 0
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	aa e7       	ldi	r26, 0x7A	; 122
    16f2:	b3 e4       	ldi	r27, 0x43	; 67
    16f4:	89 8f       	std	Y+25, r24	; 0x19
    16f6:	9a 8f       	std	Y+26, r25	; 0x1a
    16f8:	ab 8f       	std	Y+27, r26	; 0x1b
    16fa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16fc:	69 8d       	ldd	r22, Y+25	; 0x19
    16fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1700:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1702:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1704:	20 e0       	ldi	r18, 0x00	; 0
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	4a ef       	ldi	r20, 0xFA	; 250
    170a:	54 e4       	ldi	r21, 0x44	; 68
    170c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1710:	dc 01       	movw	r26, r24
    1712:	cb 01       	movw	r24, r22
    1714:	8d 8b       	std	Y+21, r24	; 0x15
    1716:	9e 8b       	std	Y+22, r25	; 0x16
    1718:	af 8b       	std	Y+23, r26	; 0x17
    171a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    171c:	6d 89       	ldd	r22, Y+21	; 0x15
    171e:	7e 89       	ldd	r23, Y+22	; 0x16
    1720:	8f 89       	ldd	r24, Y+23	; 0x17
    1722:	98 8d       	ldd	r25, Y+24	; 0x18
    1724:	20 e0       	ldi	r18, 0x00	; 0
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	40 e8       	ldi	r20, 0x80	; 128
    172a:	5f e3       	ldi	r21, 0x3F	; 63
    172c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1730:	88 23       	and	r24, r24
    1732:	2c f4       	brge	.+10     	; 0x173e <phaseOne+0xc8>
		__ticks = 1;
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	9c 8b       	std	Y+20, r25	; 0x14
    173a:	8b 8b       	std	Y+19, r24	; 0x13
    173c:	3f c0       	rjmp	.+126    	; 0x17bc <phaseOne+0x146>
	else if (__tmp > 65535)
    173e:	6d 89       	ldd	r22, Y+21	; 0x15
    1740:	7e 89       	ldd	r23, Y+22	; 0x16
    1742:	8f 89       	ldd	r24, Y+23	; 0x17
    1744:	98 8d       	ldd	r25, Y+24	; 0x18
    1746:	20 e0       	ldi	r18, 0x00	; 0
    1748:	3f ef       	ldi	r19, 0xFF	; 255
    174a:	4f e7       	ldi	r20, 0x7F	; 127
    174c:	57 e4       	ldi	r21, 0x47	; 71
    174e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1752:	18 16       	cp	r1, r24
    1754:	4c f5       	brge	.+82     	; 0x17a8 <phaseOne+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1756:	69 8d       	ldd	r22, Y+25	; 0x19
    1758:	7a 8d       	ldd	r23, Y+26	; 0x1a
    175a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    175c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    175e:	20 e0       	ldi	r18, 0x00	; 0
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	40 e2       	ldi	r20, 0x20	; 32
    1764:	51 e4       	ldi	r21, 0x41	; 65
    1766:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    176a:	dc 01       	movw	r26, r24
    176c:	cb 01       	movw	r24, r22
    176e:	bc 01       	movw	r22, r24
    1770:	cd 01       	movw	r24, r26
    1772:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1776:	dc 01       	movw	r26, r24
    1778:	cb 01       	movw	r24, r22
    177a:	9c 8b       	std	Y+20, r25	; 0x14
    177c:	8b 8b       	std	Y+19, r24	; 0x13
    177e:	0f c0       	rjmp	.+30     	; 0x179e <phaseOne+0x128>
    1780:	88 ec       	ldi	r24, 0xC8	; 200
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	9a 8b       	std	Y+18, r25	; 0x12
    1786:	89 8b       	std	Y+17, r24	; 0x11
    1788:	89 89       	ldd	r24, Y+17	; 0x11
    178a:	9a 89       	ldd	r25, Y+18	; 0x12
    178c:	01 97       	sbiw	r24, 0x01	; 1
    178e:	f1 f7       	brne	.-4      	; 0x178c <phaseOne+0x116>
    1790:	9a 8b       	std	Y+18, r25	; 0x12
    1792:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1794:	8b 89       	ldd	r24, Y+19	; 0x13
    1796:	9c 89       	ldd	r25, Y+20	; 0x14
    1798:	01 97       	sbiw	r24, 0x01	; 1
    179a:	9c 8b       	std	Y+20, r25	; 0x14
    179c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    179e:	8b 89       	ldd	r24, Y+19	; 0x13
    17a0:	9c 89       	ldd	r25, Y+20	; 0x14
    17a2:	00 97       	sbiw	r24, 0x00	; 0
    17a4:	69 f7       	brne	.-38     	; 0x1780 <phaseOne+0x10a>
    17a6:	14 c0       	rjmp	.+40     	; 0x17d0 <phaseOne+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17a8:	6d 89       	ldd	r22, Y+21	; 0x15
    17aa:	7e 89       	ldd	r23, Y+22	; 0x16
    17ac:	8f 89       	ldd	r24, Y+23	; 0x17
    17ae:	98 8d       	ldd	r25, Y+24	; 0x18
    17b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b4:	dc 01       	movw	r26, r24
    17b6:	cb 01       	movw	r24, r22
    17b8:	9c 8b       	std	Y+20, r25	; 0x14
    17ba:	8b 8b       	std	Y+19, r24	; 0x13
    17bc:	8b 89       	ldd	r24, Y+19	; 0x13
    17be:	9c 89       	ldd	r25, Y+20	; 0x14
    17c0:	98 8b       	std	Y+16, r25	; 0x10
    17c2:	8f 87       	std	Y+15, r24	; 0x0f
    17c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    17c6:	98 89       	ldd	r25, Y+16	; 0x10
    17c8:	01 97       	sbiw	r24, 0x01	; 1
    17ca:	f1 f7       	brne	.-4      	; 0x17c8 <phaseOne+0x152>
    17cc:	98 8b       	std	Y+16, r25	; 0x10
    17ce:	8f 87       	std	Y+15, r24	; 0x0f

    /* Display the message prompting the user to enter the password */
    LCD_SendString("PLZ enter pass:");

    /* Loop until the '=' key is pressed or 5 characters have been entered */
    while (KEYPAD_getPressedKey() != '=' || initialPassLimit < 5) {
    17d0:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <KEYPAD_getPressedKey>
    17d4:	8d 33       	cpi	r24, 0x3D	; 61
    17d6:	09 f0       	breq	.+2      	; 0x17da <phaseOne+0x164>
    17d8:	63 cf       	rjmp	.-314    	; 0x16a0 <phaseOne+0x2a>
    17da:	80 91 3a 01 	lds	r24, 0x013A
    17de:	85 30       	cpi	r24, 0x05	; 5
    17e0:	08 f4       	brcc	.+2      	; 0x17e4 <phaseOne+0x16e>
    17e2:	5e cf       	rjmp	.-324    	; 0x16a0 <phaseOne+0x2a>
            _delay_ms(250);
        }
    }

    /* Check if the '=' key was pressed and exactly 5 characters have been entered */
    if (KEYPAD_getPressedKey() == '=' && initialPassLimit == 5) {
    17e4:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <KEYPAD_getPressedKey>
    17e8:	8d 33       	cpi	r24, 0x3D	; 61
    17ea:	09 f0       	breq	.+2      	; 0x17ee <phaseOne+0x178>
    17ec:	b2 c0       	rjmp	.+356    	; 0x1952 <phaseOne+0x2dc>
    17ee:	80 91 3a 01 	lds	r24, 0x013A
    17f2:	85 30       	cpi	r24, 0x05	; 5
    17f4:	09 f0       	breq	.+2      	; 0x17f8 <phaseOne+0x182>
    17f6:	ad c0       	rjmp	.+346    	; 0x1952 <phaseOne+0x2dc>
        /* If in phase 6, send the password for verification */
        if (PhasesSwitch == 6) {
    17f8:	80 91 33 01 	lds	r24, 0x0133
    17fc:	86 30       	cpi	r24, 0x06	; 6
    17fe:	09 f0       	breq	.+2      	; 0x1802 <phaseOne+0x18c>
    1800:	a3 c0       	rjmp	.+326    	; 0x1948 <phaseOne+0x2d2>
            UART_sendByte('F');  /* Indicate that password entry has started */
    1802:	86 e4       	ldi	r24, 0x46	; 70
    1804:	0e 94 ee 11 	call	0x23dc	; 0x23dc <UART_sendByte>
            for (var = 0; var < 5; ++var) {
    1808:	1e 8e       	std	Y+30, r1	; 0x1e
    180a:	7e c0       	rjmp	.+252    	; 0x1908 <phaseOne+0x292>
                UART_sendByte(passSetArr[var]);  /* Send each digit of the password */
    180c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    180e:	88 2f       	mov	r24, r24
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	fc 01       	movw	r30, r24
    1814:	eb 5b       	subi	r30, 0xBB	; 187
    1816:	fe 4f       	sbci	r31, 0xFE	; 254
    1818:	80 81       	ld	r24, Z
    181a:	0e 94 ee 11 	call	0x23dc	; 0x23dc <UART_sendByte>
    181e:	80 e0       	ldi	r24, 0x00	; 0
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	a0 e2       	ldi	r26, 0x20	; 32
    1824:	b1 e4       	ldi	r27, 0x41	; 65
    1826:	8b 87       	std	Y+11, r24	; 0x0b
    1828:	9c 87       	std	Y+12, r25	; 0x0c
    182a:	ad 87       	std	Y+13, r26	; 0x0d
    182c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    182e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1830:	7c 85       	ldd	r23, Y+12	; 0x0c
    1832:	8d 85       	ldd	r24, Y+13	; 0x0d
    1834:	9e 85       	ldd	r25, Y+14	; 0x0e
    1836:	20 e0       	ldi	r18, 0x00	; 0
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	4a ef       	ldi	r20, 0xFA	; 250
    183c:	54 e4       	ldi	r21, 0x44	; 68
    183e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1842:	dc 01       	movw	r26, r24
    1844:	cb 01       	movw	r24, r22
    1846:	8f 83       	std	Y+7, r24	; 0x07
    1848:	98 87       	std	Y+8, r25	; 0x08
    184a:	a9 87       	std	Y+9, r26	; 0x09
    184c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    184e:	6f 81       	ldd	r22, Y+7	; 0x07
    1850:	78 85       	ldd	r23, Y+8	; 0x08
    1852:	89 85       	ldd	r24, Y+9	; 0x09
    1854:	9a 85       	ldd	r25, Y+10	; 0x0a
    1856:	20 e0       	ldi	r18, 0x00	; 0
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	40 e8       	ldi	r20, 0x80	; 128
    185c:	5f e3       	ldi	r21, 0x3F	; 63
    185e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1862:	88 23       	and	r24, r24
    1864:	2c f4       	brge	.+10     	; 0x1870 <phaseOne+0x1fa>
		__ticks = 1;
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	9e 83       	std	Y+6, r25	; 0x06
    186c:	8d 83       	std	Y+5, r24	; 0x05
    186e:	3f c0       	rjmp	.+126    	; 0x18ee <phaseOne+0x278>
	else if (__tmp > 65535)
    1870:	6f 81       	ldd	r22, Y+7	; 0x07
    1872:	78 85       	ldd	r23, Y+8	; 0x08
    1874:	89 85       	ldd	r24, Y+9	; 0x09
    1876:	9a 85       	ldd	r25, Y+10	; 0x0a
    1878:	20 e0       	ldi	r18, 0x00	; 0
    187a:	3f ef       	ldi	r19, 0xFF	; 255
    187c:	4f e7       	ldi	r20, 0x7F	; 127
    187e:	57 e4       	ldi	r21, 0x47	; 71
    1880:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1884:	18 16       	cp	r1, r24
    1886:	4c f5       	brge	.+82     	; 0x18da <phaseOne+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1888:	6b 85       	ldd	r22, Y+11	; 0x0b
    188a:	7c 85       	ldd	r23, Y+12	; 0x0c
    188c:	8d 85       	ldd	r24, Y+13	; 0x0d
    188e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1890:	20 e0       	ldi	r18, 0x00	; 0
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	40 e2       	ldi	r20, 0x20	; 32
    1896:	51 e4       	ldi	r21, 0x41	; 65
    1898:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    189c:	dc 01       	movw	r26, r24
    189e:	cb 01       	movw	r24, r22
    18a0:	bc 01       	movw	r22, r24
    18a2:	cd 01       	movw	r24, r26
    18a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a8:	dc 01       	movw	r26, r24
    18aa:	cb 01       	movw	r24, r22
    18ac:	9e 83       	std	Y+6, r25	; 0x06
    18ae:	8d 83       	std	Y+5, r24	; 0x05
    18b0:	0f c0       	rjmp	.+30     	; 0x18d0 <phaseOne+0x25a>
    18b2:	88 ec       	ldi	r24, 0xC8	; 200
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	9c 83       	std	Y+4, r25	; 0x04
    18b8:	8b 83       	std	Y+3, r24	; 0x03
    18ba:	8b 81       	ldd	r24, Y+3	; 0x03
    18bc:	9c 81       	ldd	r25, Y+4	; 0x04
    18be:	01 97       	sbiw	r24, 0x01	; 1
    18c0:	f1 f7       	brne	.-4      	; 0x18be <phaseOne+0x248>
    18c2:	9c 83       	std	Y+4, r25	; 0x04
    18c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18c6:	8d 81       	ldd	r24, Y+5	; 0x05
    18c8:	9e 81       	ldd	r25, Y+6	; 0x06
    18ca:	01 97       	sbiw	r24, 0x01	; 1
    18cc:	9e 83       	std	Y+6, r25	; 0x06
    18ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18d0:	8d 81       	ldd	r24, Y+5	; 0x05
    18d2:	9e 81       	ldd	r25, Y+6	; 0x06
    18d4:	00 97       	sbiw	r24, 0x00	; 0
    18d6:	69 f7       	brne	.-38     	; 0x18b2 <phaseOne+0x23c>
    18d8:	14 c0       	rjmp	.+40     	; 0x1902 <phaseOne+0x28c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18da:	6f 81       	ldd	r22, Y+7	; 0x07
    18dc:	78 85       	ldd	r23, Y+8	; 0x08
    18de:	89 85       	ldd	r24, Y+9	; 0x09
    18e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    18e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e6:	dc 01       	movw	r26, r24
    18e8:	cb 01       	movw	r24, r22
    18ea:	9e 83       	std	Y+6, r25	; 0x06
    18ec:	8d 83       	std	Y+5, r24	; 0x05
    18ee:	8d 81       	ldd	r24, Y+5	; 0x05
    18f0:	9e 81       	ldd	r25, Y+6	; 0x06
    18f2:	9a 83       	std	Y+2, r25	; 0x02
    18f4:	89 83       	std	Y+1, r24	; 0x01
    18f6:	89 81       	ldd	r24, Y+1	; 0x01
    18f8:	9a 81       	ldd	r25, Y+2	; 0x02
    18fa:	01 97       	sbiw	r24, 0x01	; 1
    18fc:	f1 f7       	brne	.-4      	; 0x18fa <phaseOne+0x284>
    18fe:	9a 83       	std	Y+2, r25	; 0x02
    1900:	89 83       	std	Y+1, r24	; 0x01
    /* Check if the '=' key was pressed and exactly 5 characters have been entered */
    if (KEYPAD_getPressedKey() == '=' && initialPassLimit == 5) {
        /* If in phase 6, send the password for verification */
        if (PhasesSwitch == 6) {
            UART_sendByte('F');  /* Indicate that password entry has started */
            for (var = 0; var < 5; ++var) {
    1902:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1904:	8f 5f       	subi	r24, 0xFF	; 255
    1906:	8e 8f       	std	Y+30, r24	; 0x1e
    1908:	8e 8d       	ldd	r24, Y+30	; 0x1e
    190a:	85 30       	cpi	r24, 0x05	; 5
    190c:	08 f4       	brcc	.+2      	; 0x1910 <phaseOne+0x29a>
    190e:	7e cf       	rjmp	.-260    	; 0x180c <phaseOne+0x196>
                _delay_ms(10);  /* Short delay between sends */
            }

            /* Wait for a response from the HMI */
            while (1) {
                uint8 temp = UART_recieveByte();  /* Receive a byte from UART */
    1910:	0e 94 05 12 	call	0x240a	; 0x240a <UART_recieveByte>
    1914:	8d 8f       	std	Y+29, r24	; 0x1d
                if (temp == 'Z') {
    1916:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1918:	8a 35       	cpi	r24, 0x5A	; 90
    191a:	99 f0       	breq	.+38     	; 0x1942 <phaseOne+0x2cc>
                    break;  /* Exit the loop on valid response */
                } else if (temp == 'X') {
    191c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    191e:	88 35       	cpi	r24, 0x58	; 88
    1920:	41 f4       	brne	.+16     	; 0x1932 <phaseOne+0x2bc>
                    LCD_ClearScreen();  /* Clear the display on mismatch */
    1922:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <LCD_ClearScreen>
                    initialPassLimit = 0;  /* Reset password limit */
    1926:	10 92 3a 01 	sts	0x013A, r1
                    PhasesSwitch = 4;   /* Transition to phase 4 */
    192a:	84 e0       	ldi	r24, 0x04	; 4
    192c:	80 93 33 01 	sts	0x0133, r24
    1930:	08 c0       	rjmp	.+16     	; 0x1942 <phaseOne+0x2cc>
                    break;  /* Exit the loop */
                } else if (temp == Alarm_BYTE) {
    1932:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1934:	84 36       	cpi	r24, 0x64	; 100
    1936:	61 f7       	brne	.-40     	; 0x1910 <phaseOne+0x29a>
                    /* Handle alarm condition */
                	initialPassLimit = 0;  /* Reset password limit */
    1938:	10 92 3a 01 	sts	0x013A, r1
                    PhasesSwitch = 5;   /* Transition to alarm phase */
    193c:	85 e0       	ldi	r24, 0x05	; 5
    193e:	80 93 33 01 	sts	0x0133, r24
                    break;  /* Exit the loop */
                }
            }
            initialPassLimit = 0;  /* Reset password limit after processing */
    1942:	10 92 3a 01 	sts	0x013A, r1
    1946:	05 c0       	rjmp	.+10     	; 0x1952 <phaseOne+0x2dc>
        } else {
        	initialPassLimit = 0;  /* Reset password limit */
    1948:	10 92 3a 01 	sts	0x013A, r1
            PhasesSwitch = 2;    /* Transition to phase 2 */
    194c:	82 e0       	ldi	r24, 0x02	; 2
    194e:	80 93 33 01 	sts	0x0133, r24
        }
    }
}
    1952:	6e 96       	adiw	r28, 0x1e	; 30
    1954:	0f b6       	in	r0, 0x3f	; 63
    1956:	f8 94       	cli
    1958:	de bf       	out	0x3e, r29	; 62
    195a:	0f be       	out	0x3f, r0	; 63
    195c:	cd bf       	out	0x3d, r28	; 61
    195e:	cf 91       	pop	r28
    1960:	df 91       	pop	r29
    1962:	08 95       	ret

00001964 <phaseTwo>:


/*
 * This phase is responsible for displaying the "Re_enter pass" message when confirming the password.
 */
void phaseTwo(void) {
    1964:	df 93       	push	r29
    1966:	cf 93       	push	r28
    1968:	cd b7       	in	r28, 0x3d	; 61
    196a:	de b7       	in	r29, 0x3e	; 62
    196c:	6f 97       	sbiw	r28, 0x1f	; 31
    196e:	0f b6       	in	r0, 0x3f	; 63
    1970:	f8 94       	cli
    1972:	de bf       	out	0x3e, r29	; 62
    1974:	0f be       	out	0x3f, r0	; 63
    1976:	cd bf       	out	0x3d, r28	; 61
    uint8 var, wrongPass = 0, passLimit = 0;  /* Variables for tracking the number of entered characters and error state */
    1978:	1e 8e       	std	Y+30, r1	; 0x1e
    197a:	1d 8e       	std	Y+29, r1	; 0x1d
    static uint8 passDigit;  /* Variable to store the pressed key */

    /* Clear the LCD display */
    LCD_ClearScreen();
    197c:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <LCD_ClearScreen>

    /* Move the LCD cursor to the first row, first column */
    LCD_MoveCursor(0, 0);
    1980:	80 e0       	ldi	r24, 0x00	; 0
    1982:	60 e0       	ldi	r22, 0x00	; 0
    1984:	0e 94 46 0a 	call	0x148c	; 0x148c <LCD_MoveCursor>

    /* Display the message prompting the user to re-enter the password */
    LCD_SendString("Re_enter pass:  ");
    1988:	80 e7       	ldi	r24, 0x70	; 112
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	0e 94 1d 0a 	call	0x143a	; 0x143a <LCD_SendString>
    1990:	92 c0       	rjmp	.+292    	; 0x1ab6 <phaseTwo+0x152>

    /* Loop until the '=' key is pressed or 5 characters have been entered */
    while (KEYPAD_getPressedKey() != '=' || passLimit < 5) {
        /* Get the key pressed from the keypad */
    	passDigit = KEYPAD_getPressedKey();
    1992:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <KEYPAD_getPressedKey>
    1996:	80 93 3c 01 	sts	0x013C, r24

        /* Check if the key is a valid number (0-9) and ensure less than 5 characters have been entered */
        if ((passDigit <= 9) && (passDigit >= 0) && passLimit < 5) {
    199a:	80 91 3c 01 	lds	r24, 0x013C
    199e:	8a 30       	cpi	r24, 0x0A	; 10
    19a0:	08 f0       	brcs	.+2      	; 0x19a4 <phaseTwo+0x40>
    19a2:	89 c0       	rjmp	.+274    	; 0x1ab6 <phaseTwo+0x152>
    19a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19a6:	85 30       	cpi	r24, 0x05	; 5
    19a8:	08 f0       	brcs	.+2      	; 0x19ac <phaseTwo+0x48>
    19aa:	85 c0       	rjmp	.+266    	; 0x1ab6 <phaseTwo+0x152>
            /* Move the cursor to the corresponding position in the second row */
            LCD_MoveCursor(1, passLimit);
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	6d 8d       	ldd	r22, Y+29	; 0x1d
    19b0:	0e 94 46 0a 	call	0x148c	; 0x148c <LCD_MoveCursor>

            /* Display a '*' character for each entered digit (masks the actual input) */
            LCD_SendCharacter('*');
    19b4:	8a e2       	ldi	r24, 0x2A	; 42
    19b6:	0e 94 2e 08 	call	0x105c	; 0x105c <LCD_SendCharacter>

            /* Store the pressed key in the comparison array */
            passCompareArr[passLimit] = passDigit;
    19ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19bc:	88 2f       	mov	r24, r24
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	20 91 3c 01 	lds	r18, 0x013C
    19c4:	fc 01       	movw	r30, r24
    19c6:	e6 5b       	subi	r30, 0xB6	; 182
    19c8:	fe 4f       	sbci	r31, 0xFE	; 254
    19ca:	20 83       	st	Z, r18

            /* Increment the count to move to the next position on the display */
            passLimit++;
    19cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19ce:	8f 5f       	subi	r24, 0xFF	; 255
    19d0:	8d 8f       	std	Y+29, r24	; 0x1d
    19d2:	80 e0       	ldi	r24, 0x00	; 0
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	aa e7       	ldi	r26, 0x7A	; 122
    19d8:	b3 e4       	ldi	r27, 0x43	; 67
    19da:	89 8f       	std	Y+25, r24	; 0x19
    19dc:	9a 8f       	std	Y+26, r25	; 0x1a
    19de:	ab 8f       	std	Y+27, r26	; 0x1b
    19e0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e2:	69 8d       	ldd	r22, Y+25	; 0x19
    19e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	4a ef       	ldi	r20, 0xFA	; 250
    19f0:	54 e4       	ldi	r21, 0x44	; 68
    19f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f6:	dc 01       	movw	r26, r24
    19f8:	cb 01       	movw	r24, r22
    19fa:	8d 8b       	std	Y+21, r24	; 0x15
    19fc:	9e 8b       	std	Y+22, r25	; 0x16
    19fe:	af 8b       	std	Y+23, r26	; 0x17
    1a00:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a02:	6d 89       	ldd	r22, Y+21	; 0x15
    1a04:	7e 89       	ldd	r23, Y+22	; 0x16
    1a06:	8f 89       	ldd	r24, Y+23	; 0x17
    1a08:	98 8d       	ldd	r25, Y+24	; 0x18
    1a0a:	20 e0       	ldi	r18, 0x00	; 0
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	40 e8       	ldi	r20, 0x80	; 128
    1a10:	5f e3       	ldi	r21, 0x3F	; 63
    1a12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a16:	88 23       	and	r24, r24
    1a18:	2c f4       	brge	.+10     	; 0x1a24 <phaseTwo+0xc0>
		__ticks = 1;
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	9c 8b       	std	Y+20, r25	; 0x14
    1a20:	8b 8b       	std	Y+19, r24	; 0x13
    1a22:	3f c0       	rjmp	.+126    	; 0x1aa2 <phaseTwo+0x13e>
	else if (__tmp > 65535)
    1a24:	6d 89       	ldd	r22, Y+21	; 0x15
    1a26:	7e 89       	ldd	r23, Y+22	; 0x16
    1a28:	8f 89       	ldd	r24, Y+23	; 0x17
    1a2a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
    1a2e:	3f ef       	ldi	r19, 0xFF	; 255
    1a30:	4f e7       	ldi	r20, 0x7F	; 127
    1a32:	57 e4       	ldi	r21, 0x47	; 71
    1a34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a38:	18 16       	cp	r1, r24
    1a3a:	4c f5       	brge	.+82     	; 0x1a8e <phaseTwo+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a3c:	69 8d       	ldd	r22, Y+25	; 0x19
    1a3e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a42:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a44:	20 e0       	ldi	r18, 0x00	; 0
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	40 e2       	ldi	r20, 0x20	; 32
    1a4a:	51 e4       	ldi	r21, 0x41	; 65
    1a4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a50:	dc 01       	movw	r26, r24
    1a52:	cb 01       	movw	r24, r22
    1a54:	bc 01       	movw	r22, r24
    1a56:	cd 01       	movw	r24, r26
    1a58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	cb 01       	movw	r24, r22
    1a60:	9c 8b       	std	Y+20, r25	; 0x14
    1a62:	8b 8b       	std	Y+19, r24	; 0x13
    1a64:	0f c0       	rjmp	.+30     	; 0x1a84 <phaseTwo+0x120>
    1a66:	88 ec       	ldi	r24, 0xC8	; 200
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	9a 8b       	std	Y+18, r25	; 0x12
    1a6c:	89 8b       	std	Y+17, r24	; 0x11
    1a6e:	89 89       	ldd	r24, Y+17	; 0x11
    1a70:	9a 89       	ldd	r25, Y+18	; 0x12
    1a72:	01 97       	sbiw	r24, 0x01	; 1
    1a74:	f1 f7       	brne	.-4      	; 0x1a72 <phaseTwo+0x10e>
    1a76:	9a 8b       	std	Y+18, r25	; 0x12
    1a78:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a7a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a7c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a7e:	01 97       	sbiw	r24, 0x01	; 1
    1a80:	9c 8b       	std	Y+20, r25	; 0x14
    1a82:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a84:	8b 89       	ldd	r24, Y+19	; 0x13
    1a86:	9c 89       	ldd	r25, Y+20	; 0x14
    1a88:	00 97       	sbiw	r24, 0x00	; 0
    1a8a:	69 f7       	brne	.-38     	; 0x1a66 <phaseTwo+0x102>
    1a8c:	14 c0       	rjmp	.+40     	; 0x1ab6 <phaseTwo+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a8e:	6d 89       	ldd	r22, Y+21	; 0x15
    1a90:	7e 89       	ldd	r23, Y+22	; 0x16
    1a92:	8f 89       	ldd	r24, Y+23	; 0x17
    1a94:	98 8d       	ldd	r25, Y+24	; 0x18
    1a96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	9c 8b       	std	Y+20, r25	; 0x14
    1aa0:	8b 8b       	std	Y+19, r24	; 0x13
    1aa2:	8b 89       	ldd	r24, Y+19	; 0x13
    1aa4:	9c 89       	ldd	r25, Y+20	; 0x14
    1aa6:	98 8b       	std	Y+16, r25	; 0x10
    1aa8:	8f 87       	std	Y+15, r24	; 0x0f
    1aaa:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aac:	98 89       	ldd	r25, Y+16	; 0x10
    1aae:	01 97       	sbiw	r24, 0x01	; 1
    1ab0:	f1 f7       	brne	.-4      	; 0x1aae <phaseTwo+0x14a>
    1ab2:	98 8b       	std	Y+16, r25	; 0x10
    1ab4:	8f 87       	std	Y+15, r24	; 0x0f

    /* Display the message prompting the user to re-enter the password */
    LCD_SendString("Re_enter pass:  ");

    /* Loop until the '=' key is pressed or 5 characters have been entered */
    while (KEYPAD_getPressedKey() != '=' || passLimit < 5) {
    1ab6:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <KEYPAD_getPressedKey>
    1aba:	8d 33       	cpi	r24, 0x3D	; 61
    1abc:	09 f0       	breq	.+2      	; 0x1ac0 <phaseTwo+0x15c>
    1abe:	69 cf       	rjmp	.-302    	; 0x1992 <phaseTwo+0x2e>
    1ac0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ac2:	85 30       	cpi	r24, 0x05	; 5
    1ac4:	08 f4       	brcc	.+2      	; 0x1ac8 <phaseTwo+0x164>
    1ac6:	65 cf       	rjmp	.-310    	; 0x1992 <phaseTwo+0x2e>
            _delay_ms(250);
        }
    }

    /* Check if the '=' key was pressed and exactly 5 characters have been entered */
    if (KEYPAD_getPressedKey() == '=' && passLimit == 5) {
    1ac8:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <KEYPAD_getPressedKey>
    1acc:	8d 33       	cpi	r24, 0x3D	; 61
    1ace:	09 f0       	breq	.+2      	; 0x1ad2 <phaseTwo+0x16e>
    1ad0:	b0 c0       	rjmp	.+352    	; 0x1c32 <phaseTwo+0x2ce>
    1ad2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ad4:	85 30       	cpi	r24, 0x05	; 5
    1ad6:	09 f0       	breq	.+2      	; 0x1ada <phaseTwo+0x176>
    1ad8:	ac c0       	rjmp	.+344    	; 0x1c32 <phaseTwo+0x2ce>
        /* Compare the entered password with the stored password */
        for (var = 0; var < 5; ++var) {
    1ada:	1f 8e       	std	Y+31, r1	; 0x1f
    1adc:	16 c0       	rjmp	.+44     	; 0x1b0a <phaseTwo+0x1a6>
            if (passSetArr[var] != passCompareArr[var]) {
    1ade:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ae0:	88 2f       	mov	r24, r24
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	fc 01       	movw	r30, r24
    1ae6:	eb 5b       	subi	r30, 0xBB	; 187
    1ae8:	fe 4f       	sbci	r31, 0xFE	; 254
    1aea:	20 81       	ld	r18, Z
    1aec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1aee:	88 2f       	mov	r24, r24
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	fc 01       	movw	r30, r24
    1af4:	e6 5b       	subi	r30, 0xB6	; 182
    1af6:	fe 4f       	sbci	r31, 0xFE	; 254
    1af8:	80 81       	ld	r24, Z
    1afa:	28 17       	cp	r18, r24
    1afc:	19 f0       	breq	.+6      	; 0x1b04 <phaseTwo+0x1a0>
                passLimit = 0;  /* Reset password limit on mismatch */
    1afe:	1d 8e       	std	Y+29, r1	; 0x1d
                wrongPass = 1;  /* Set flag indicating the passwords do not match */
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	8e 8f       	std	Y+30, r24	; 0x1e
    }

    /* Check if the '=' key was pressed and exactly 5 characters have been entered */
    if (KEYPAD_getPressedKey() == '=' && passLimit == 5) {
        /* Compare the entered password with the stored password */
        for (var = 0; var < 5; ++var) {
    1b04:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b06:	8f 5f       	subi	r24, 0xFF	; 255
    1b08:	8f 8f       	std	Y+31, r24	; 0x1f
    1b0a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b0c:	85 30       	cpi	r24, 0x05	; 5
    1b0e:	38 f3       	brcs	.-50     	; 0x1ade <phaseTwo+0x17a>
                wrongPass = 1;  /* Set flag indicating the passwords do not match */
            }
        }

        /* If a mismatch occurred, transition back to phase 1 */
        if (wrongPass == 1) {
    1b10:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b12:	81 30       	cpi	r24, 0x01	; 1
    1b14:	21 f4       	brne	.+8      	; 0x1b1e <phaseTwo+0x1ba>
            PhasesSwitch = 1;  /* Transition to phase 1 for re-entry */
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	80 93 33 01 	sts	0x0133, r24
    1b1c:	8a c0       	rjmp	.+276    	; 0x1c32 <phaseTwo+0x2ce>
        } else {
            /* If passwords match, send confirmation to the HMI */
            UART_sendByte('S');  /* Indicate successful password entry */
    1b1e:	83 e5       	ldi	r24, 0x53	; 83
    1b20:	0e 94 ee 11 	call	0x23dc	; 0x23dc <UART_sendByte>
            for (var = 0; var < 5; ++var) {
    1b24:	1f 8e       	std	Y+31, r1	; 0x1f
    1b26:	7e c0       	rjmp	.+252    	; 0x1c24 <phaseTwo+0x2c0>
                UART_sendByte(passSetArr[var]);  /* Send the stored password for verification */
    1b28:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b2a:	88 2f       	mov	r24, r24
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	fc 01       	movw	r30, r24
    1b30:	eb 5b       	subi	r30, 0xBB	; 187
    1b32:	fe 4f       	sbci	r31, 0xFE	; 254
    1b34:	80 81       	ld	r24, Z
    1b36:	0e 94 ee 11 	call	0x23dc	; 0x23dc <UART_sendByte>
    1b3a:	80 e0       	ldi	r24, 0x00	; 0
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	a0 e2       	ldi	r26, 0x20	; 32
    1b40:	b1 e4       	ldi	r27, 0x41	; 65
    1b42:	8b 87       	std	Y+11, r24	; 0x0b
    1b44:	9c 87       	std	Y+12, r25	; 0x0c
    1b46:	ad 87       	std	Y+13, r26	; 0x0d
    1b48:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	4a ef       	ldi	r20, 0xFA	; 250
    1b58:	54 e4       	ldi	r21, 0x44	; 68
    1b5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b5e:	dc 01       	movw	r26, r24
    1b60:	cb 01       	movw	r24, r22
    1b62:	8f 83       	std	Y+7, r24	; 0x07
    1b64:	98 87       	std	Y+8, r25	; 0x08
    1b66:	a9 87       	std	Y+9, r26	; 0x09
    1b68:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b6c:	78 85       	ldd	r23, Y+8	; 0x08
    1b6e:	89 85       	ldd	r24, Y+9	; 0x09
    1b70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b72:	20 e0       	ldi	r18, 0x00	; 0
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	40 e8       	ldi	r20, 0x80	; 128
    1b78:	5f e3       	ldi	r21, 0x3F	; 63
    1b7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b7e:	88 23       	and	r24, r24
    1b80:	2c f4       	brge	.+10     	; 0x1b8c <phaseTwo+0x228>
		__ticks = 1;
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	9e 83       	std	Y+6, r25	; 0x06
    1b88:	8d 83       	std	Y+5, r24	; 0x05
    1b8a:	3f c0       	rjmp	.+126    	; 0x1c0a <phaseTwo+0x2a6>
	else if (__tmp > 65535)
    1b8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b8e:	78 85       	ldd	r23, Y+8	; 0x08
    1b90:	89 85       	ldd	r24, Y+9	; 0x09
    1b92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	3f ef       	ldi	r19, 0xFF	; 255
    1b98:	4f e7       	ldi	r20, 0x7F	; 127
    1b9a:	57 e4       	ldi	r21, 0x47	; 71
    1b9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ba0:	18 16       	cp	r1, r24
    1ba2:	4c f5       	brge	.+82     	; 0x1bf6 <phaseTwo+0x292>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ba4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ba6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ba8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1baa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	40 e2       	ldi	r20, 0x20	; 32
    1bb2:	51 e4       	ldi	r21, 0x41	; 65
    1bb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb8:	dc 01       	movw	r26, r24
    1bba:	cb 01       	movw	r24, r22
    1bbc:	bc 01       	movw	r22, r24
    1bbe:	cd 01       	movw	r24, r26
    1bc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	cb 01       	movw	r24, r22
    1bc8:	9e 83       	std	Y+6, r25	; 0x06
    1bca:	8d 83       	std	Y+5, r24	; 0x05
    1bcc:	0f c0       	rjmp	.+30     	; 0x1bec <phaseTwo+0x288>
    1bce:	88 ec       	ldi	r24, 0xC8	; 200
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	9c 83       	std	Y+4, r25	; 0x04
    1bd4:	8b 83       	std	Y+3, r24	; 0x03
    1bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bda:	01 97       	sbiw	r24, 0x01	; 1
    1bdc:	f1 f7       	brne	.-4      	; 0x1bda <phaseTwo+0x276>
    1bde:	9c 83       	std	Y+4, r25	; 0x04
    1be0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be2:	8d 81       	ldd	r24, Y+5	; 0x05
    1be4:	9e 81       	ldd	r25, Y+6	; 0x06
    1be6:	01 97       	sbiw	r24, 0x01	; 1
    1be8:	9e 83       	std	Y+6, r25	; 0x06
    1bea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bec:	8d 81       	ldd	r24, Y+5	; 0x05
    1bee:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf0:	00 97       	sbiw	r24, 0x00	; 0
    1bf2:	69 f7       	brne	.-38     	; 0x1bce <phaseTwo+0x26a>
    1bf4:	14 c0       	rjmp	.+40     	; 0x1c1e <phaseTwo+0x2ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bf6:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf8:	78 85       	ldd	r23, Y+8	; 0x08
    1bfa:	89 85       	ldd	r24, Y+9	; 0x09
    1bfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	9e 83       	std	Y+6, r25	; 0x06
    1c08:	8d 83       	std	Y+5, r24	; 0x05
    1c0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c0e:	9a 83       	std	Y+2, r25	; 0x02
    1c10:	89 83       	std	Y+1, r24	; 0x01
    1c12:	89 81       	ldd	r24, Y+1	; 0x01
    1c14:	9a 81       	ldd	r25, Y+2	; 0x02
    1c16:	01 97       	sbiw	r24, 0x01	; 1
    1c18:	f1 f7       	brne	.-4      	; 0x1c16 <phaseTwo+0x2b2>
    1c1a:	9a 83       	std	Y+2, r25	; 0x02
    1c1c:	89 83       	std	Y+1, r24	; 0x01
        if (wrongPass == 1) {
            PhasesSwitch = 1;  /* Transition to phase 1 for re-entry */
        } else {
            /* If passwords match, send confirmation to the HMI */
            UART_sendByte('S');  /* Indicate successful password entry */
            for (var = 0; var < 5; ++var) {
    1c1e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c20:	8f 5f       	subi	r24, 0xFF	; 255
    1c22:	8f 8f       	std	Y+31, r24	; 0x1f
    1c24:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c26:	85 30       	cpi	r24, 0x05	; 5
    1c28:	08 f4       	brcc	.+2      	; 0x1c2c <phaseTwo+0x2c8>
    1c2a:	7e cf       	rjmp	.-260    	; 0x1b28 <phaseTwo+0x1c4>
                UART_sendByte(passSetArr[var]);  /* Send the stored password for verification */
                _delay_ms(10);  /* Short delay between sends */
            }
            PhasesSwitch = 3;  /* Transition to phase 3 */
    1c2c:	83 e0       	ldi	r24, 0x03	; 3
    1c2e:	80 93 33 01 	sts	0x0133, r24
        }
    }
}
    1c32:	6f 96       	adiw	r28, 0x1f	; 31
    1c34:	0f b6       	in	r0, 0x3f	; 63
    1c36:	f8 94       	cli
    1c38:	de bf       	out	0x3e, r29	; 62
    1c3a:	0f be       	out	0x3f, r0	; 63
    1c3c:	cd bf       	out	0x3d, r28	; 61
    1c3e:	cf 91       	pop	r28
    1c40:	df 91       	pop	r29
    1c42:	08 95       	ret

00001c44 <phaseThree>:
 * sends the '+' command over UART to the Main Controller to start the door-opening process.
 * If the '-' key is pressed, it clears the screen, transitions to phase 1,
 * and sends the '-' command over UART to initiate the password change process.
 */
void phaseThree(void)
{
    1c44:	df 93       	push	r29
    1c46:	cf 93       	push	r28
    1c48:	cd b7       	in	r28, 0x3d	; 61
    1c4a:	de b7       	in	r29, 0x3e	; 62
    LCD_MoveCursor(0, 0);
    1c4c:	80 e0       	ldi	r24, 0x00	; 0
    1c4e:	60 e0       	ldi	r22, 0x00	; 0
    1c50:	0e 94 46 0a 	call	0x148c	; 0x148c <LCD_MoveCursor>
    LCD_SendString("+ : Open Door   ");
    1c54:	81 e8       	ldi	r24, 0x81	; 129
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	0e 94 1d 0a 	call	0x143a	; 0x143a <LCD_SendString>
    LCD_MoveCursor(1, 0);
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	60 e0       	ldi	r22, 0x00	; 0
    1c60:	0e 94 46 0a 	call	0x148c	; 0x148c <LCD_MoveCursor>
    LCD_SendString("- : Change Pass ");
    1c64:	82 e9       	ldi	r24, 0x92	; 146
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	0e 94 1d 0a 	call	0x143a	; 0x143a <LCD_SendString>

    if (KEYPAD_getPressedKey() == '+')
    1c6c:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <KEYPAD_getPressedKey>
    1c70:	8b 32       	cpi	r24, 0x2B	; 43
    1c72:	49 f4       	brne	.+18     	; 0x1c86 <phaseThree+0x42>
    {
        LCD_ClearScreen();
    1c74:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <LCD_ClearScreen>
        PhasesSwitch = 6;    // Switch to door opening phase
    1c78:	86 e0       	ldi	r24, 0x06	; 6
    1c7a:	80 93 33 01 	sts	0x0133, r24
        UART_sendByte('+');  // Notify Main Controller to open the door
    1c7e:	8b e2       	ldi	r24, 0x2B	; 43
    1c80:	0e 94 ee 11 	call	0x23dc	; 0x23dc <UART_sendByte>
    1c84:	0c c0       	rjmp	.+24     	; 0x1c9e <phaseThree+0x5a>
    }
    else if (KEYPAD_getPressedKey() == '-')
    1c86:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <KEYPAD_getPressedKey>
    1c8a:	8d 32       	cpi	r24, 0x2D	; 45
    1c8c:	41 f4       	brne	.+16     	; 0x1c9e <phaseThree+0x5a>
    {
        LCD_ClearScreen();
    1c8e:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <LCD_ClearScreen>
        PhasesSwitch = 1;    // Switch to password change phase
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	80 93 33 01 	sts	0x0133, r24
        UART_sendByte('-');  // Notify Main Controller to start password change
    1c98:	8d e2       	ldi	r24, 0x2D	; 45
    1c9a:	0e 94 ee 11 	call	0x23dc	; 0x23dc <UART_sendByte>
    }
}
    1c9e:	cf 91       	pop	r28
    1ca0:	df 91       	pop	r29
    1ca2:	08 95       	ret

00001ca4 <phaseFour>:
 * The function listens for a byte sent from the Main Controller through UART
 * to update the LCD display with the current state of the door operation.
 * If no valid state is received, it returns to phase 3.
 */
void phaseFour(void)
{
    1ca4:	df 93       	push	r29
    1ca6:	cf 93       	push	r28
    1ca8:	00 d0       	rcall	.+0      	; 0x1caa <phaseFour+0x6>
    1caa:	cd b7       	in	r28, 0x3d	; 61
    1cac:	de b7       	in	r29, 0x3e	; 62
    static UARTDoorState doorState;
    doorState = UART_recieveByte();  // Receive door state byte from Main Controller
    1cae:	0e 94 05 12 	call	0x240a	; 0x240a <UART_recieveByte>
    1cb2:	80 93 3d 01 	sts	0x013D, r24

    switch (doorState)
    1cb6:	80 91 3d 01 	lds	r24, 0x013D
    1cba:	28 2f       	mov	r18, r24
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	3a 83       	std	Y+2, r19	; 0x02
    1cc0:	29 83       	std	Y+1, r18	; 0x01
    1cc2:	89 81       	ldd	r24, Y+1	; 0x01
    1cc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc6:	82 36       	cpi	r24, 0x62	; 98
    1cc8:	91 05       	cpc	r25, r1
    1cca:	d9 f0       	breq	.+54     	; 0x1d02 <phaseFour+0x5e>
    1ccc:	29 81       	ldd	r18, Y+1	; 0x01
    1cce:	3a 81       	ldd	r19, Y+2	; 0x02
    1cd0:	23 36       	cpi	r18, 0x63	; 99
    1cd2:	31 05       	cpc	r19, r1
    1cd4:	39 f1       	breq	.+78     	; 0x1d24 <phaseFour+0x80>
    1cd6:	89 81       	ldd	r24, Y+1	; 0x01
    1cd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cda:	81 36       	cpi	r24, 0x61	; 97
    1cdc:	91 05       	cpc	r25, r1
    1cde:	99 f5       	brne	.+102    	; 0x1d46 <phaseFour+0xa2>
    {
    case OPEN_BYTE:
        LCD_MoveCursor(0, 0);
    1ce0:	80 e0       	ldi	r24, 0x00	; 0
    1ce2:	60 e0       	ldi	r22, 0x00	; 0
    1ce4:	0e 94 46 0a 	call	0x148c	; 0x148c <LCD_MoveCursor>
        LCD_SendString("Door Unlocking  ");
    1ce8:	83 ea       	ldi	r24, 0xA3	; 163
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	0e 94 1d 0a 	call	0x143a	; 0x143a <LCD_SendString>
        LCD_MoveCursor(1, 0);
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	60 e0       	ldi	r22, 0x00	; 0
    1cf4:	0e 94 46 0a 	call	0x148c	; 0x148c <LCD_MoveCursor>
        LCD_SendString("Please wait..   ");
    1cf8:	84 eb       	ldi	r24, 0xB4	; 180
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	0e 94 1d 0a 	call	0x143a	; 0x143a <LCD_SendString>
    1d00:	25 c0       	rjmp	.+74     	; 0x1d4c <phaseFour+0xa8>
        break;
    case WAIT_BYTE:
        LCD_MoveCursor(0, 0);
    1d02:	80 e0       	ldi	r24, 0x00	; 0
    1d04:	60 e0       	ldi	r22, 0x00	; 0
    1d06:	0e 94 46 0a 	call	0x148c	; 0x148c <LCD_MoveCursor>
        LCD_SendString("Wait For People ");
    1d0a:	85 ec       	ldi	r24, 0xC5	; 197
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	0e 94 1d 0a 	call	0x143a	; 0x143a <LCD_SendString>
        LCD_MoveCursor(1, 0);
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	60 e0       	ldi	r22, 0x00	; 0
    1d16:	0e 94 46 0a 	call	0x148c	; 0x148c <LCD_MoveCursor>
        LCD_SendString("   to enter..   ");
    1d1a:	86 ed       	ldi	r24, 0xD6	; 214
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	0e 94 1d 0a 	call	0x143a	; 0x143a <LCD_SendString>
    1d22:	14 c0       	rjmp	.+40     	; 0x1d4c <phaseFour+0xa8>
        break;
    case CLOSE_BYTE:
        LCD_MoveCursor(0, 0);
    1d24:	80 e0       	ldi	r24, 0x00	; 0
    1d26:	60 e0       	ldi	r22, 0x00	; 0
    1d28:	0e 94 46 0a 	call	0x148c	; 0x148c <LCD_MoveCursor>
        LCD_SendString("  Door locking  ");
    1d2c:	87 ee       	ldi	r24, 0xE7	; 231
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	0e 94 1d 0a 	call	0x143a	; 0x143a <LCD_SendString>
        LCD_MoveCursor(1, 0);
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	60 e0       	ldi	r22, 0x00	; 0
    1d38:	0e 94 46 0a 	call	0x148c	; 0x148c <LCD_MoveCursor>
        LCD_SendString("                ");
    1d3c:	88 ef       	ldi	r24, 0xF8	; 248
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	0e 94 1d 0a 	call	0x143a	; 0x143a <LCD_SendString>
    1d44:	03 c0       	rjmp	.+6      	; 0x1d4c <phaseFour+0xa8>
        break;
    default:
        PhasesSwitch = 3;  // Return to main options if no valid byte is received
    1d46:	83 e0       	ldi	r24, 0x03	; 3
    1d48:	80 93 33 01 	sts	0x0133, r24
        break;
    }
}
    1d4c:	0f 90       	pop	r0
    1d4e:	0f 90       	pop	r0
    1d50:	cf 91       	pop	r28
    1d52:	df 91       	pop	r29
    1d54:	08 95       	ret

00001d56 <phaseFive>:
 * it resets PhasesSwitch to 3, returning the system to the main options.
 * It also toggles a bit on PORTA, PIN0, which could be used for a visual
 * or audible indicator that the system is locked.
 */
void phaseFive(void)
{
    1d56:	df 93       	push	r29
    1d58:	cf 93       	push	r28
    1d5a:	cd b7       	in	r28, 0x3d	; 61
    1d5c:	de b7       	in	r29, 0x3e	; 62
	static UARTDoorState alarmState;
    LCD_MoveCursor(0, 0);
    1d5e:	80 e0       	ldi	r24, 0x00	; 0
    1d60:	60 e0       	ldi	r22, 0x00	; 0
    1d62:	0e 94 46 0a 	call	0x148c	; 0x148c <LCD_MoveCursor>
    LCD_SendString("SYSTEM LOCKED   ");
    1d66:	89 e0       	ldi	r24, 0x09	; 9
    1d68:	91 e0       	ldi	r25, 0x01	; 1
    1d6a:	0e 94 1d 0a 	call	0x143a	; 0x143a <LCD_SendString>
    LCD_MoveCursor(1, 0);
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	60 e0       	ldi	r22, 0x00	; 0
    1d72:	0e 94 46 0a 	call	0x148c	; 0x148c <LCD_MoveCursor>
    LCD_SendString("Wait for 1 min  ");
    1d76:	8a e1       	ldi	r24, 0x1A	; 26
    1d78:	91 e0       	ldi	r25, 0x01	; 1
    1d7a:	0e 94 1d 0a 	call	0x143a	; 0x143a <LCD_SendString>

    TOGGLE_BIT(PORTA, 0);  // Toggle indicator for system locked state
    1d7e:	ab e3       	ldi	r26, 0x3B	; 59
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	eb e3       	ldi	r30, 0x3B	; 59
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	90 81       	ld	r25, Z
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	89 27       	eor	r24, r25
    1d8c:	8c 93       	st	X, r24
    alarmState = UART_recieveByte();  // Receive state from Main Controller
    1d8e:	0e 94 05 12 	call	0x240a	; 0x240a <UART_recieveByte>
    1d92:	80 93 3e 01 	sts	0x013E, r24

    if (alarmState == OPEN_BYTE)
    1d96:	80 91 3e 01 	lds	r24, 0x013E
    1d9a:	81 36       	cpi	r24, 0x61	; 97
    1d9c:	19 f4       	brne	.+6      	; 0x1da4 <phaseFive+0x4e>
    {
        PhasesSwitch = 3;  // Return to main options upon unlock
    1d9e:	83 e0       	ldi	r24, 0x03	; 3
    1da0:	80 93 33 01 	sts	0x0133, r24
    }
}
    1da4:	cf 91       	pop	r28
    1da6:	df 91       	pop	r29
    1da8:	08 95       	ret

00001daa <__vector_11>:
static volatile void (*g_CallBackTimer0)(void) = NULL_PTR;
static volatile void (*g_CallBackTimer1)(void) = NULL_PTR;
static volatile void (*g_CallBackTimer2)(void) = NULL_PTR;

ISR(TIMER0_OVF_vect)
{
    1daa:	1f 92       	push	r1
    1dac:	0f 92       	push	r0
    1dae:	0f b6       	in	r0, 0x3f	; 63
    1db0:	0f 92       	push	r0
    1db2:	11 24       	eor	r1, r1
    1db4:	2f 93       	push	r18
    1db6:	3f 93       	push	r19
    1db8:	4f 93       	push	r20
    1dba:	5f 93       	push	r21
    1dbc:	6f 93       	push	r22
    1dbe:	7f 93       	push	r23
    1dc0:	8f 93       	push	r24
    1dc2:	9f 93       	push	r25
    1dc4:	af 93       	push	r26
    1dc6:	bf 93       	push	r27
    1dc8:	ef 93       	push	r30
    1dca:	ff 93       	push	r31
    1dcc:	df 93       	push	r29
    1dce:	cf 93       	push	r28
    1dd0:	cd b7       	in	r28, 0x3d	; 61
    1dd2:	de b7       	in	r29, 0x3e	; 62
    if(g_CallBackTimer0 != NULL_PTR)
    1dd4:	80 91 3f 01 	lds	r24, 0x013F
    1dd8:	90 91 40 01 	lds	r25, 0x0140
    1ddc:	00 97       	sbiw	r24, 0x00	; 0
    1dde:	29 f0       	breq	.+10     	; 0x1dea <__vector_11+0x40>
    {
        /** Call the callback function */
        (*g_CallBackTimer0)();
    1de0:	e0 91 3f 01 	lds	r30, 0x013F
    1de4:	f0 91 40 01 	lds	r31, 0x0140
    1de8:	09 95       	icall
    }
}
    1dea:	cf 91       	pop	r28
    1dec:	df 91       	pop	r29
    1dee:	ff 91       	pop	r31
    1df0:	ef 91       	pop	r30
    1df2:	bf 91       	pop	r27
    1df4:	af 91       	pop	r26
    1df6:	9f 91       	pop	r25
    1df8:	8f 91       	pop	r24
    1dfa:	7f 91       	pop	r23
    1dfc:	6f 91       	pop	r22
    1dfe:	5f 91       	pop	r21
    1e00:	4f 91       	pop	r20
    1e02:	3f 91       	pop	r19
    1e04:	2f 91       	pop	r18
    1e06:	0f 90       	pop	r0
    1e08:	0f be       	out	0x3f, r0	; 63
    1e0a:	0f 90       	pop	r0
    1e0c:	1f 90       	pop	r1
    1e0e:	18 95       	reti

00001e10 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    1e10:	1f 92       	push	r1
    1e12:	0f 92       	push	r0
    1e14:	0f b6       	in	r0, 0x3f	; 63
    1e16:	0f 92       	push	r0
    1e18:	11 24       	eor	r1, r1
    1e1a:	2f 93       	push	r18
    1e1c:	3f 93       	push	r19
    1e1e:	4f 93       	push	r20
    1e20:	5f 93       	push	r21
    1e22:	6f 93       	push	r22
    1e24:	7f 93       	push	r23
    1e26:	8f 93       	push	r24
    1e28:	9f 93       	push	r25
    1e2a:	af 93       	push	r26
    1e2c:	bf 93       	push	r27
    1e2e:	ef 93       	push	r30
    1e30:	ff 93       	push	r31
    1e32:	df 93       	push	r29
    1e34:	cf 93       	push	r28
    1e36:	cd b7       	in	r28, 0x3d	; 61
    1e38:	de b7       	in	r29, 0x3e	; 62
    if(g_CallBackTimer0 != NULL_PTR)
    1e3a:	80 91 3f 01 	lds	r24, 0x013F
    1e3e:	90 91 40 01 	lds	r25, 0x0140
    1e42:	00 97       	sbiw	r24, 0x00	; 0
    1e44:	29 f0       	breq	.+10     	; 0x1e50 <__vector_10+0x40>
    {
        /** Call the callback function */
        (*g_CallBackTimer0)();
    1e46:	e0 91 3f 01 	lds	r30, 0x013F
    1e4a:	f0 91 40 01 	lds	r31, 0x0140
    1e4e:	09 95       	icall
    }
}
    1e50:	cf 91       	pop	r28
    1e52:	df 91       	pop	r29
    1e54:	ff 91       	pop	r31
    1e56:	ef 91       	pop	r30
    1e58:	bf 91       	pop	r27
    1e5a:	af 91       	pop	r26
    1e5c:	9f 91       	pop	r25
    1e5e:	8f 91       	pop	r24
    1e60:	7f 91       	pop	r23
    1e62:	6f 91       	pop	r22
    1e64:	5f 91       	pop	r21
    1e66:	4f 91       	pop	r20
    1e68:	3f 91       	pop	r19
    1e6a:	2f 91       	pop	r18
    1e6c:	0f 90       	pop	r0
    1e6e:	0f be       	out	0x3f, r0	; 63
    1e70:	0f 90       	pop	r0
    1e72:	1f 90       	pop	r1
    1e74:	18 95       	reti

00001e76 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    1e76:	1f 92       	push	r1
    1e78:	0f 92       	push	r0
    1e7a:	0f b6       	in	r0, 0x3f	; 63
    1e7c:	0f 92       	push	r0
    1e7e:	11 24       	eor	r1, r1
    1e80:	2f 93       	push	r18
    1e82:	3f 93       	push	r19
    1e84:	4f 93       	push	r20
    1e86:	5f 93       	push	r21
    1e88:	6f 93       	push	r22
    1e8a:	7f 93       	push	r23
    1e8c:	8f 93       	push	r24
    1e8e:	9f 93       	push	r25
    1e90:	af 93       	push	r26
    1e92:	bf 93       	push	r27
    1e94:	ef 93       	push	r30
    1e96:	ff 93       	push	r31
    1e98:	df 93       	push	r29
    1e9a:	cf 93       	push	r28
    1e9c:	cd b7       	in	r28, 0x3d	; 61
    1e9e:	de b7       	in	r29, 0x3e	; 62
    if(g_CallBackTimer1 != NULL_PTR)
    1ea0:	80 91 41 01 	lds	r24, 0x0141
    1ea4:	90 91 42 01 	lds	r25, 0x0142
    1ea8:	00 97       	sbiw	r24, 0x00	; 0
    1eaa:	29 f0       	breq	.+10     	; 0x1eb6 <__vector_9+0x40>
    {
        /** Call the callback function */
        (*g_CallBackTimer1)();
    1eac:	e0 91 41 01 	lds	r30, 0x0141
    1eb0:	f0 91 42 01 	lds	r31, 0x0142
    1eb4:	09 95       	icall
    }
}
    1eb6:	cf 91       	pop	r28
    1eb8:	df 91       	pop	r29
    1eba:	ff 91       	pop	r31
    1ebc:	ef 91       	pop	r30
    1ebe:	bf 91       	pop	r27
    1ec0:	af 91       	pop	r26
    1ec2:	9f 91       	pop	r25
    1ec4:	8f 91       	pop	r24
    1ec6:	7f 91       	pop	r23
    1ec8:	6f 91       	pop	r22
    1eca:	5f 91       	pop	r21
    1ecc:	4f 91       	pop	r20
    1ece:	3f 91       	pop	r19
    1ed0:	2f 91       	pop	r18
    1ed2:	0f 90       	pop	r0
    1ed4:	0f be       	out	0x3f, r0	; 63
    1ed6:	0f 90       	pop	r0
    1ed8:	1f 90       	pop	r1
    1eda:	18 95       	reti

00001edc <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    1edc:	1f 92       	push	r1
    1ede:	0f 92       	push	r0
    1ee0:	0f b6       	in	r0, 0x3f	; 63
    1ee2:	0f 92       	push	r0
    1ee4:	11 24       	eor	r1, r1
    1ee6:	2f 93       	push	r18
    1ee8:	3f 93       	push	r19
    1eea:	4f 93       	push	r20
    1eec:	5f 93       	push	r21
    1eee:	6f 93       	push	r22
    1ef0:	7f 93       	push	r23
    1ef2:	8f 93       	push	r24
    1ef4:	9f 93       	push	r25
    1ef6:	af 93       	push	r26
    1ef8:	bf 93       	push	r27
    1efa:	ef 93       	push	r30
    1efc:	ff 93       	push	r31
    1efe:	df 93       	push	r29
    1f00:	cf 93       	push	r28
    1f02:	cd b7       	in	r28, 0x3d	; 61
    1f04:	de b7       	in	r29, 0x3e	; 62
    if(g_CallBackTimer1 != NULL_PTR)
    1f06:	80 91 41 01 	lds	r24, 0x0141
    1f0a:	90 91 42 01 	lds	r25, 0x0142
    1f0e:	00 97       	sbiw	r24, 0x00	; 0
    1f10:	29 f0       	breq	.+10     	; 0x1f1c <__vector_7+0x40>
    {
        /** Call the callback function */
        (*g_CallBackTimer1)();
    1f12:	e0 91 41 01 	lds	r30, 0x0141
    1f16:	f0 91 42 01 	lds	r31, 0x0142
    1f1a:	09 95       	icall
    }
}
    1f1c:	cf 91       	pop	r28
    1f1e:	df 91       	pop	r29
    1f20:	ff 91       	pop	r31
    1f22:	ef 91       	pop	r30
    1f24:	bf 91       	pop	r27
    1f26:	af 91       	pop	r26
    1f28:	9f 91       	pop	r25
    1f2a:	8f 91       	pop	r24
    1f2c:	7f 91       	pop	r23
    1f2e:	6f 91       	pop	r22
    1f30:	5f 91       	pop	r21
    1f32:	4f 91       	pop	r20
    1f34:	3f 91       	pop	r19
    1f36:	2f 91       	pop	r18
    1f38:	0f 90       	pop	r0
    1f3a:	0f be       	out	0x3f, r0	; 63
    1f3c:	0f 90       	pop	r0
    1f3e:	1f 90       	pop	r1
    1f40:	18 95       	reti

00001f42 <__vector_5>:

ISR(TIMER2_OVF_vect)
{
    1f42:	1f 92       	push	r1
    1f44:	0f 92       	push	r0
    1f46:	0f b6       	in	r0, 0x3f	; 63
    1f48:	0f 92       	push	r0
    1f4a:	11 24       	eor	r1, r1
    1f4c:	2f 93       	push	r18
    1f4e:	3f 93       	push	r19
    1f50:	4f 93       	push	r20
    1f52:	5f 93       	push	r21
    1f54:	6f 93       	push	r22
    1f56:	7f 93       	push	r23
    1f58:	8f 93       	push	r24
    1f5a:	9f 93       	push	r25
    1f5c:	af 93       	push	r26
    1f5e:	bf 93       	push	r27
    1f60:	ef 93       	push	r30
    1f62:	ff 93       	push	r31
    1f64:	df 93       	push	r29
    1f66:	cf 93       	push	r28
    1f68:	cd b7       	in	r28, 0x3d	; 61
    1f6a:	de b7       	in	r29, 0x3e	; 62
    if(g_CallBackTimer2 != NULL_PTR)
    1f6c:	80 91 43 01 	lds	r24, 0x0143
    1f70:	90 91 44 01 	lds	r25, 0x0144
    1f74:	00 97       	sbiw	r24, 0x00	; 0
    1f76:	29 f0       	breq	.+10     	; 0x1f82 <__vector_5+0x40>
    {
        /** Call the callback function */
        (*g_CallBackTimer2)();
    1f78:	e0 91 43 01 	lds	r30, 0x0143
    1f7c:	f0 91 44 01 	lds	r31, 0x0144
    1f80:	09 95       	icall
    }
}
    1f82:	cf 91       	pop	r28
    1f84:	df 91       	pop	r29
    1f86:	ff 91       	pop	r31
    1f88:	ef 91       	pop	r30
    1f8a:	bf 91       	pop	r27
    1f8c:	af 91       	pop	r26
    1f8e:	9f 91       	pop	r25
    1f90:	8f 91       	pop	r24
    1f92:	7f 91       	pop	r23
    1f94:	6f 91       	pop	r22
    1f96:	5f 91       	pop	r21
    1f98:	4f 91       	pop	r20
    1f9a:	3f 91       	pop	r19
    1f9c:	2f 91       	pop	r18
    1f9e:	0f 90       	pop	r0
    1fa0:	0f be       	out	0x3f, r0	; 63
    1fa2:	0f 90       	pop	r0
    1fa4:	1f 90       	pop	r1
    1fa6:	18 95       	reti

00001fa8 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    1fa8:	1f 92       	push	r1
    1faa:	0f 92       	push	r0
    1fac:	0f b6       	in	r0, 0x3f	; 63
    1fae:	0f 92       	push	r0
    1fb0:	11 24       	eor	r1, r1
    1fb2:	2f 93       	push	r18
    1fb4:	3f 93       	push	r19
    1fb6:	4f 93       	push	r20
    1fb8:	5f 93       	push	r21
    1fba:	6f 93       	push	r22
    1fbc:	7f 93       	push	r23
    1fbe:	8f 93       	push	r24
    1fc0:	9f 93       	push	r25
    1fc2:	af 93       	push	r26
    1fc4:	bf 93       	push	r27
    1fc6:	ef 93       	push	r30
    1fc8:	ff 93       	push	r31
    1fca:	df 93       	push	r29
    1fcc:	cf 93       	push	r28
    1fce:	cd b7       	in	r28, 0x3d	; 61
    1fd0:	de b7       	in	r29, 0x3e	; 62
    if(g_CallBackTimer2 != NULL_PTR)
    1fd2:	80 91 43 01 	lds	r24, 0x0143
    1fd6:	90 91 44 01 	lds	r25, 0x0144
    1fda:	00 97       	sbiw	r24, 0x00	; 0
    1fdc:	29 f0       	breq	.+10     	; 0x1fe8 <__vector_4+0x40>
    {
        /** Call the callback function */
        (*g_CallBackTimer2)();
    1fde:	e0 91 43 01 	lds	r30, 0x0143
    1fe2:	f0 91 44 01 	lds	r31, 0x0144
    1fe6:	09 95       	icall
    }
}
    1fe8:	cf 91       	pop	r28
    1fea:	df 91       	pop	r29
    1fec:	ff 91       	pop	r31
    1fee:	ef 91       	pop	r30
    1ff0:	bf 91       	pop	r27
    1ff2:	af 91       	pop	r26
    1ff4:	9f 91       	pop	r25
    1ff6:	8f 91       	pop	r24
    1ff8:	7f 91       	pop	r23
    1ffa:	6f 91       	pop	r22
    1ffc:	5f 91       	pop	r21
    1ffe:	4f 91       	pop	r20
    2000:	3f 91       	pop	r19
    2002:	2f 91       	pop	r18
    2004:	0f 90       	pop	r0
    2006:	0f be       	out	0x3f, r0	; 63
    2008:	0f 90       	pop	r0
    200a:	1f 90       	pop	r1
    200c:	18 95       	reti

0000200e <Timer_init>:
 * based on the configuration provided in the Timer_ConfigType structure.
 * It sets the timer mode (Normal or Compare Match), configures the clock source,
 * enables interrupts as needed, loads compare match values, and clears the timer counter.
 */
void Timer_init(const Timer_ConfigType * Config_Ptr)
{
    200e:	df 93       	push	r29
    2010:	cf 93       	push	r28
    2012:	00 d0       	rcall	.+0      	; 0x2014 <Timer_init+0x6>
    2014:	00 d0       	rcall	.+0      	; 0x2016 <Timer_init+0x8>
    2016:	cd b7       	in	r28, 0x3d	; 61
    2018:	de b7       	in	r29, 0x3e	; 62
    201a:	9a 83       	std	Y+2, r25	; 0x02
    201c:	89 83       	std	Y+1, r24	; 0x01
	switch (Config_Ptr ->timer_ID)
    201e:	e9 81       	ldd	r30, Y+1	; 0x01
    2020:	fa 81       	ldd	r31, Y+2	; 0x02
    2022:	84 81       	ldd	r24, Z+4	; 0x04
    2024:	28 2f       	mov	r18, r24
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	3c 83       	std	Y+4, r19	; 0x04
    202a:	2b 83       	std	Y+3, r18	; 0x03
    202c:	8b 81       	ldd	r24, Y+3	; 0x03
    202e:	9c 81       	ldd	r25, Y+4	; 0x04
    2030:	81 30       	cpi	r24, 0x01	; 1
    2032:	91 05       	cpc	r25, r1
    2034:	09 f4       	brne	.+2      	; 0x2038 <Timer_init+0x2a>
    2036:	42 c0       	rjmp	.+132    	; 0x20bc <Timer_init+0xae>
    2038:	2b 81       	ldd	r18, Y+3	; 0x03
    203a:	3c 81       	ldd	r19, Y+4	; 0x04
    203c:	22 30       	cpi	r18, 0x02	; 2
    203e:	31 05       	cpc	r19, r1
    2040:	09 f4       	brne	.+2      	; 0x2044 <Timer_init+0x36>
    2042:	7a c0       	rjmp	.+244    	; 0x2138 <Timer_init+0x12a>
    2044:	8b 81       	ldd	r24, Y+3	; 0x03
    2046:	9c 81       	ldd	r25, Y+4	; 0x04
    2048:	00 97       	sbiw	r24, 0x00	; 0
    204a:	09 f0       	breq	.+2      	; 0x204e <Timer_init+0x40>
    204c:	aa c0       	rjmp	.+340    	; 0x21a2 <Timer_init+0x194>
	{
		case Timer_0:
			/* Clear Timer 0 counter */
			TCNT0 = Config_Ptr -> timer_InitialValue;
    204e:	a2 e5       	ldi	r26, 0x52	; 82
    2050:	b0 e0       	ldi	r27, 0x00	; 0
    2052:	e9 81       	ldd	r30, Y+1	; 0x01
    2054:	fa 81       	ldd	r31, Y+2	; 0x02
    2056:	80 81       	ld	r24, Z
    2058:	91 81       	ldd	r25, Z+1	; 0x01
    205a:	8c 93       	st	X, r24

			/* Check if Timer 0 is in Normal Mode */
			if(Config_Ptr -> timer_mode == NORMAL_MODE) {
    205c:	e9 81       	ldd	r30, Y+1	; 0x01
    205e:	fa 81       	ldd	r31, Y+2	; 0x02
    2060:	86 81       	ldd	r24, Z+6	; 0x06
    2062:	88 23       	and	r24, r24
    2064:	79 f4       	brne	.+30     	; 0x2084 <Timer_init+0x76>
				/* Enable Timer 0 Overflow Interrupt */
				TIMSK |= (1 << TOIE0);
    2066:	a9 e5       	ldi	r26, 0x59	; 89
    2068:	b0 e0       	ldi	r27, 0x00	; 0
    206a:	e9 e5       	ldi	r30, 0x59	; 89
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	80 81       	ld	r24, Z
    2070:	81 60       	ori	r24, 0x01	; 1
    2072:	8c 93       	st	X, r24
				/* Set Timer 0 to Normal Mode and configure the clock source */
				TCCR0 = (1 << FOC0) | (Config_Ptr -> timer_clock);
    2074:	a3 e5       	ldi	r26, 0x53	; 83
    2076:	b0 e0       	ldi	r27, 0x00	; 0
    2078:	e9 81       	ldd	r30, Y+1	; 0x01
    207a:	fa 81       	ldd	r31, Y+2	; 0x02
    207c:	85 81       	ldd	r24, Z+5	; 0x05
    207e:	80 68       	ori	r24, 0x80	; 128
    2080:	8c 93       	st	X, r24
    2082:	8f c0       	rjmp	.+286    	; 0x21a2 <Timer_init+0x194>
			}
			/* Check if Timer 0 is in Compare Match Mode */
			else if(Config_Ptr -> timer_mode == COMPARE_MODE) {
    2084:	e9 81       	ldd	r30, Y+1	; 0x01
    2086:	fa 81       	ldd	r31, Y+2	; 0x02
    2088:	86 81       	ldd	r24, Z+6	; 0x06
    208a:	81 30       	cpi	r24, 0x01	; 1
    208c:	09 f0       	breq	.+2      	; 0x2090 <Timer_init+0x82>
    208e:	89 c0       	rjmp	.+274    	; 0x21a2 <Timer_init+0x194>
				/* Set the compare match value for Timer 0 */
				OCR0 = Config_Ptr -> timer_compare_MatchValue;
    2090:	ac e5       	ldi	r26, 0x5C	; 92
    2092:	b0 e0       	ldi	r27, 0x00	; 0
    2094:	e9 81       	ldd	r30, Y+1	; 0x01
    2096:	fa 81       	ldd	r31, Y+2	; 0x02
    2098:	82 81       	ldd	r24, Z+2	; 0x02
    209a:	93 81       	ldd	r25, Z+3	; 0x03
    209c:	8c 93       	st	X, r24
				/* Enable Timer 0 Compare Match Interrupt */
				TIMSK |= (1 << OCIE0);
    209e:	a9 e5       	ldi	r26, 0x59	; 89
    20a0:	b0 e0       	ldi	r27, 0x00	; 0
    20a2:	e9 e5       	ldi	r30, 0x59	; 89
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	80 81       	ld	r24, Z
    20a8:	82 60       	ori	r24, 0x02	; 2
    20aa:	8c 93       	st	X, r24
				/* Set Timer 0 to Compare Match Mode and configure the clock source */
				TCCR0 = (1 << FOC0) | (1 << WGM01) | (Config_Ptr -> timer_clock);
    20ac:	a3 e5       	ldi	r26, 0x53	; 83
    20ae:	b0 e0       	ldi	r27, 0x00	; 0
    20b0:	e9 81       	ldd	r30, Y+1	; 0x01
    20b2:	fa 81       	ldd	r31, Y+2	; 0x02
    20b4:	85 81       	ldd	r24, Z+5	; 0x05
    20b6:	88 68       	ori	r24, 0x88	; 136
    20b8:	8c 93       	st	X, r24
    20ba:	73 c0       	rjmp	.+230    	; 0x21a2 <Timer_init+0x194>
			}
			break;

		case Timer_1:
			/* Clear Timer 1 counter */
			TCNT1 = Config_Ptr -> timer_InitialValue;
    20bc:	ac e4       	ldi	r26, 0x4C	; 76
    20be:	b0 e0       	ldi	r27, 0x00	; 0
    20c0:	e9 81       	ldd	r30, Y+1	; 0x01
    20c2:	fa 81       	ldd	r31, Y+2	; 0x02
    20c4:	80 81       	ld	r24, Z
    20c6:	91 81       	ldd	r25, Z+1	; 0x01
    20c8:	11 96       	adiw	r26, 0x01	; 1
    20ca:	9c 93       	st	X, r25
    20cc:	8e 93       	st	-X, r24

			/* Check if Timer 1 is in Normal Mode */
			if(Config_Ptr -> timer_mode == NORMAL_MODE) {
    20ce:	e9 81       	ldd	r30, Y+1	; 0x01
    20d0:	fa 81       	ldd	r31, Y+2	; 0x02
    20d2:	86 81       	ldd	r24, Z+6	; 0x06
    20d4:	88 23       	and	r24, r24
    20d6:	71 f4       	brne	.+28     	; 0x20f4 <Timer_init+0xe6>
				/* Enable Timer 1 Overflow Interrupt */
				TIMSK |= (1 << TOIE1);
    20d8:	a9 e5       	ldi	r26, 0x59	; 89
    20da:	b0 e0       	ldi	r27, 0x00	; 0
    20dc:	e9 e5       	ldi	r30, 0x59	; 89
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	80 81       	ld	r24, Z
    20e2:	84 60       	ori	r24, 0x04	; 4
    20e4:	8c 93       	st	X, r24
				/* Set Timer 1 to Normal Mode and configure the clock source */
				TCCR1B = (Config_Ptr -> timer_clock);
    20e6:	ae e4       	ldi	r26, 0x4E	; 78
    20e8:	b0 e0       	ldi	r27, 0x00	; 0
    20ea:	e9 81       	ldd	r30, Y+1	; 0x01
    20ec:	fa 81       	ldd	r31, Y+2	; 0x02
    20ee:	85 81       	ldd	r24, Z+5	; 0x05
    20f0:	8c 93       	st	X, r24
    20f2:	57 c0       	rjmp	.+174    	; 0x21a2 <Timer_init+0x194>
			}
			/* Check if Timer 1 is in Compare Match Mode */
			else if(Config_Ptr -> timer_mode == COMPARE_MODE) {
    20f4:	e9 81       	ldd	r30, Y+1	; 0x01
    20f6:	fa 81       	ldd	r31, Y+2	; 0x02
    20f8:	86 81       	ldd	r24, Z+6	; 0x06
    20fa:	81 30       	cpi	r24, 0x01	; 1
    20fc:	09 f0       	breq	.+2      	; 0x2100 <Timer_init+0xf2>
    20fe:	51 c0       	rjmp	.+162    	; 0x21a2 <Timer_init+0x194>
				/* Set the compare match value for Timer 1 (Channel A) */
				OCR1A = Config_Ptr -> timer_compare_MatchValue;
    2100:	aa e4       	ldi	r26, 0x4A	; 74
    2102:	b0 e0       	ldi	r27, 0x00	; 0
    2104:	e9 81       	ldd	r30, Y+1	; 0x01
    2106:	fa 81       	ldd	r31, Y+2	; 0x02
    2108:	82 81       	ldd	r24, Z+2	; 0x02
    210a:	93 81       	ldd	r25, Z+3	; 0x03
    210c:	11 96       	adiw	r26, 0x01	; 1
    210e:	9c 93       	st	X, r25
    2110:	8e 93       	st	-X, r24
				/* Enable Timer 1 Compare Match A Interrupt */
				TIMSK |= (1 << OCIE1A);
    2112:	a9 e5       	ldi	r26, 0x59	; 89
    2114:	b0 e0       	ldi	r27, 0x00	; 0
    2116:	e9 e5       	ldi	r30, 0x59	; 89
    2118:	f0 e0       	ldi	r31, 0x00	; 0
    211a:	80 81       	ld	r24, Z
    211c:	80 61       	ori	r24, 0x10	; 16
    211e:	8c 93       	st	X, r24
				/* Force Output Compare for Channel A in non-PWM mode */
				TCCR1A = (1 << FOC1A);
    2120:	ef e4       	ldi	r30, 0x4F	; 79
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	88 e0       	ldi	r24, 0x08	; 8
    2126:	80 83       	st	Z, r24
				/* Set Timer 1 to CTC Mode (Clear Timer on Compare Match) and configure the clock source */
				TCCR1B = (1 << WGM12) | (Config_Ptr -> timer_clock);
    2128:	ae e4       	ldi	r26, 0x4E	; 78
    212a:	b0 e0       	ldi	r27, 0x00	; 0
    212c:	e9 81       	ldd	r30, Y+1	; 0x01
    212e:	fa 81       	ldd	r31, Y+2	; 0x02
    2130:	85 81       	ldd	r24, Z+5	; 0x05
    2132:	88 60       	ori	r24, 0x08	; 8
    2134:	8c 93       	st	X, r24
    2136:	35 c0       	rjmp	.+106    	; 0x21a2 <Timer_init+0x194>
			}
			break;

		case Timer_2:
			/* Clear Timer 2 counter */
			TCNT2 = Config_Ptr -> timer_InitialValue;
    2138:	a4 e4       	ldi	r26, 0x44	; 68
    213a:	b0 e0       	ldi	r27, 0x00	; 0
    213c:	e9 81       	ldd	r30, Y+1	; 0x01
    213e:	fa 81       	ldd	r31, Y+2	; 0x02
    2140:	80 81       	ld	r24, Z
    2142:	91 81       	ldd	r25, Z+1	; 0x01
    2144:	8c 93       	st	X, r24

			/* Check if Timer 2 is in Normal Mode */
			if(Config_Ptr -> timer_mode == NORMAL_MODE) {
    2146:	e9 81       	ldd	r30, Y+1	; 0x01
    2148:	fa 81       	ldd	r31, Y+2	; 0x02
    214a:	86 81       	ldd	r24, Z+6	; 0x06
    214c:	88 23       	and	r24, r24
    214e:	79 f4       	brne	.+30     	; 0x216e <Timer_init+0x160>
				/* Enable Timer 2 Overflow Interrupt */
				TIMSK |= (1 << TOIE2);
    2150:	a9 e5       	ldi	r26, 0x59	; 89
    2152:	b0 e0       	ldi	r27, 0x00	; 0
    2154:	e9 e5       	ldi	r30, 0x59	; 89
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	80 81       	ld	r24, Z
    215a:	80 64       	ori	r24, 0x40	; 64
    215c:	8c 93       	st	X, r24
				/* Set Timer 2 to Normal Mode and configure the clock source */
				TCCR2 = (1 << FOC2) | (Config_Ptr -> timer_clock);
    215e:	a5 e4       	ldi	r26, 0x45	; 69
    2160:	b0 e0       	ldi	r27, 0x00	; 0
    2162:	e9 81       	ldd	r30, Y+1	; 0x01
    2164:	fa 81       	ldd	r31, Y+2	; 0x02
    2166:	85 81       	ldd	r24, Z+5	; 0x05
    2168:	80 68       	ori	r24, 0x80	; 128
    216a:	8c 93       	st	X, r24
    216c:	1a c0       	rjmp	.+52     	; 0x21a2 <Timer_init+0x194>
			}
			/* Check if Timer 2 is in Compare Match Mode */
			else if(Config_Ptr -> timer_mode == COMPARE_MODE) {
    216e:	e9 81       	ldd	r30, Y+1	; 0x01
    2170:	fa 81       	ldd	r31, Y+2	; 0x02
    2172:	86 81       	ldd	r24, Z+6	; 0x06
    2174:	81 30       	cpi	r24, 0x01	; 1
    2176:	a9 f4       	brne	.+42     	; 0x21a2 <Timer_init+0x194>
				/* Set the compare match value for Timer 2 */
				OCR2 = Config_Ptr -> timer_compare_MatchValue;
    2178:	a3 e4       	ldi	r26, 0x43	; 67
    217a:	b0 e0       	ldi	r27, 0x00	; 0
    217c:	e9 81       	ldd	r30, Y+1	; 0x01
    217e:	fa 81       	ldd	r31, Y+2	; 0x02
    2180:	82 81       	ldd	r24, Z+2	; 0x02
    2182:	93 81       	ldd	r25, Z+3	; 0x03
    2184:	8c 93       	st	X, r24
				/* Enable Timer 2 Compare Match Interrupt */
				TIMSK |= (1 << OCIE2);
    2186:	a9 e5       	ldi	r26, 0x59	; 89
    2188:	b0 e0       	ldi	r27, 0x00	; 0
    218a:	e9 e5       	ldi	r30, 0x59	; 89
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	80 81       	ld	r24, Z
    2190:	80 68       	ori	r24, 0x80	; 128
    2192:	8c 93       	st	X, r24
				/* Set Timer 2 to Compare Match Mode and configure the clock source */
				TCCR2 = (1 << FOC2) | (1 << WGM21) | (Config_Ptr -> timer_clock);
    2194:	a5 e4       	ldi	r26, 0x45	; 69
    2196:	b0 e0       	ldi	r27, 0x00	; 0
    2198:	e9 81       	ldd	r30, Y+1	; 0x01
    219a:	fa 81       	ldd	r31, Y+2	; 0x02
    219c:	85 81       	ldd	r24, Z+5	; 0x05
    219e:	88 68       	ori	r24, 0x88	; 136
    21a0:	8c 93       	st	X, r24
			}
			break;
	}
}
    21a2:	0f 90       	pop	r0
    21a4:	0f 90       	pop	r0
    21a6:	0f 90       	pop	r0
    21a8:	0f 90       	pop	r0
    21aa:	cf 91       	pop	r28
    21ac:	df 91       	pop	r29
    21ae:	08 95       	ret

000021b0 <Timer_deInit>:

/*Disabling all registers*/
void Timer_deInit(Timer_ID_Type timer_type)
{
    21b0:	df 93       	push	r29
    21b2:	cf 93       	push	r28
    21b4:	00 d0       	rcall	.+0      	; 0x21b6 <Timer_deInit+0x6>
    21b6:	0f 92       	push	r0
    21b8:	cd b7       	in	r28, 0x3d	; 61
    21ba:	de b7       	in	r29, 0x3e	; 62
    21bc:	89 83       	std	Y+1, r24	; 0x01
    switch (timer_type)
    21be:	89 81       	ldd	r24, Y+1	; 0x01
    21c0:	28 2f       	mov	r18, r24
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	3b 83       	std	Y+3, r19	; 0x03
    21c6:	2a 83       	std	Y+2, r18	; 0x02
    21c8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ca:	9b 81       	ldd	r25, Y+3	; 0x03
    21cc:	81 30       	cpi	r24, 0x01	; 1
    21ce:	91 05       	cpc	r25, r1
    21d0:	d1 f0       	breq	.+52     	; 0x2206 <Timer_deInit+0x56>
    21d2:	2a 81       	ldd	r18, Y+2	; 0x02
    21d4:	3b 81       	ldd	r19, Y+3	; 0x03
    21d6:	22 30       	cpi	r18, 0x02	; 2
    21d8:	31 05       	cpc	r19, r1
    21da:	79 f1       	breq	.+94     	; 0x223a <Timer_deInit+0x8a>
    21dc:	8a 81       	ldd	r24, Y+2	; 0x02
    21de:	9b 81       	ldd	r25, Y+3	; 0x03
    21e0:	00 97       	sbiw	r24, 0x00	; 0
    21e2:	d9 f5       	brne	.+118    	; 0x225a <Timer_deInit+0xaa>
    {

        case Timer_0:
            /* Reset all relevant Timer 0 registers to 0 */
            TCCR0 = 0;   /* Disable clock and reset mode */
    21e4:	e3 e5       	ldi	r30, 0x53	; 83
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	10 82       	st	Z, r1
            TIMSK &= ~( (1 << TOIE0) | (1 << OCIE0) ); /* Disable interrupts */
    21ea:	a9 e5       	ldi	r26, 0x59	; 89
    21ec:	b0 e0       	ldi	r27, 0x00	; 0
    21ee:	e9 e5       	ldi	r30, 0x59	; 89
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	80 81       	ld	r24, Z
    21f4:	8c 7f       	andi	r24, 0xFC	; 252
    21f6:	8c 93       	st	X, r24
            TCNT0 = 0;   /* Clear counter */
    21f8:	e2 e5       	ldi	r30, 0x52	; 82
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	10 82       	st	Z, r1
            OCR0 = 0;    /* Clear compare match register */
    21fe:	ec e5       	ldi	r30, 0x5C	; 92
    2200:	f0 e0       	ldi	r31, 0x00	; 0
    2202:	10 82       	st	Z, r1
    2204:	2a c0       	rjmp	.+84     	; 0x225a <Timer_deInit+0xaa>
            break;

        case Timer_1:
            TCCR1A = 0;  /* Reset mode and FOC bits */
    2206:	ef e4       	ldi	r30, 0x4F	; 79
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	10 82       	st	Z, r1
            TCCR1B = 0;  /* Disable clock */
    220c:	ee e4       	ldi	r30, 0x4E	; 78
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	10 82       	st	Z, r1
            TIMSK &= ~( (1 << TOIE1) | (1 << OCIE1A) | (1 << OCIE1B) ); /* Disable interrupts */
    2212:	a9 e5       	ldi	r26, 0x59	; 89
    2214:	b0 e0       	ldi	r27, 0x00	; 0
    2216:	e9 e5       	ldi	r30, 0x59	; 89
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	80 81       	ld	r24, Z
    221c:	83 7e       	andi	r24, 0xE3	; 227
    221e:	8c 93       	st	X, r24
            TCNT1 = 0;   /* Clear counter */
    2220:	ec e4       	ldi	r30, 0x4C	; 76
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	11 82       	std	Z+1, r1	; 0x01
    2226:	10 82       	st	Z, r1
            OCR1A = 0;   /* Clear compare match register A */
    2228:	ea e4       	ldi	r30, 0x4A	; 74
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	11 82       	std	Z+1, r1	; 0x01
    222e:	10 82       	st	Z, r1
            OCR1B = 0;   /* Clear compare match register B */
    2230:	e8 e4       	ldi	r30, 0x48	; 72
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	11 82       	std	Z+1, r1	; 0x01
    2236:	10 82       	st	Z, r1
    2238:	10 c0       	rjmp	.+32     	; 0x225a <Timer_deInit+0xaa>
            break;

        case Timer_2:
            TCCR2 = 0;   /* Disable clock and reset mode */
    223a:	e5 e4       	ldi	r30, 0x45	; 69
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	10 82       	st	Z, r1
            TIMSK &= ~( (1 << TOIE2) | (1 << OCIE2) ); /* Disable interrupts */
    2240:	a9 e5       	ldi	r26, 0x59	; 89
    2242:	b0 e0       	ldi	r27, 0x00	; 0
    2244:	e9 e5       	ldi	r30, 0x59	; 89
    2246:	f0 e0       	ldi	r31, 0x00	; 0
    2248:	80 81       	ld	r24, Z
    224a:	8f 73       	andi	r24, 0x3F	; 63
    224c:	8c 93       	st	X, r24
            TCNT2 = 0;   /* Clear counter */
    224e:	e4 e4       	ldi	r30, 0x44	; 68
    2250:	f0 e0       	ldi	r31, 0x00	; 0
    2252:	10 82       	st	Z, r1
            OCR2 = 0;    /* Clear compare match register */
    2254:	e3 e4       	ldi	r30, 0x43	; 67
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	10 82       	st	Z, r1
            break;
    }
}
    225a:	0f 90       	pop	r0
    225c:	0f 90       	pop	r0
    225e:	0f 90       	pop	r0
    2260:	cf 91       	pop	r28
    2262:	df 91       	pop	r29
    2264:	08 95       	ret

00002266 <Timer_setCallBack>:

void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type a_timer_ID )
{
    2266:	df 93       	push	r29
    2268:	cf 93       	push	r28
    226a:	00 d0       	rcall	.+0      	; 0x226c <Timer_setCallBack+0x6>
    226c:	00 d0       	rcall	.+0      	; 0x226e <Timer_setCallBack+0x8>
    226e:	0f 92       	push	r0
    2270:	cd b7       	in	r28, 0x3d	; 61
    2272:	de b7       	in	r29, 0x3e	; 62
    2274:	9a 83       	std	Y+2, r25	; 0x02
    2276:	89 83       	std	Y+1, r24	; 0x01
    2278:	6b 83       	std	Y+3, r22	; 0x03
    switch (a_timer_ID)
    227a:	8b 81       	ldd	r24, Y+3	; 0x03
    227c:	28 2f       	mov	r18, r24
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	3d 83       	std	Y+5, r19	; 0x05
    2282:	2c 83       	std	Y+4, r18	; 0x04
    2284:	8c 81       	ldd	r24, Y+4	; 0x04
    2286:	9d 81       	ldd	r25, Y+5	; 0x05
    2288:	81 30       	cpi	r24, 0x01	; 1
    228a:	91 05       	cpc	r25, r1
    228c:	81 f0       	breq	.+32     	; 0x22ae <Timer_setCallBack+0x48>
    228e:	2c 81       	ldd	r18, Y+4	; 0x04
    2290:	3d 81       	ldd	r19, Y+5	; 0x05
    2292:	22 30       	cpi	r18, 0x02	; 2
    2294:	31 05       	cpc	r19, r1
    2296:	91 f0       	breq	.+36     	; 0x22bc <Timer_setCallBack+0x56>
    2298:	8c 81       	ldd	r24, Y+4	; 0x04
    229a:	9d 81       	ldd	r25, Y+5	; 0x05
    229c:	00 97       	sbiw	r24, 0x00	; 0
    229e:	a1 f4       	brne	.+40     	; 0x22c8 <Timer_setCallBack+0x62>
    {
        case Timer_0:
        	g_CallBackTimer0 = a_ptr;
    22a0:	89 81       	ldd	r24, Y+1	; 0x01
    22a2:	9a 81       	ldd	r25, Y+2	; 0x02
    22a4:	90 93 40 01 	sts	0x0140, r25
    22a8:	80 93 3f 01 	sts	0x013F, r24
    22ac:	0d c0       	rjmp	.+26     	; 0x22c8 <Timer_setCallBack+0x62>
            break;

        case Timer_1:
        	g_CallBackTimer1 = a_ptr;
    22ae:	89 81       	ldd	r24, Y+1	; 0x01
    22b0:	9a 81       	ldd	r25, Y+2	; 0x02
    22b2:	90 93 42 01 	sts	0x0142, r25
    22b6:	80 93 41 01 	sts	0x0141, r24
    22ba:	06 c0       	rjmp	.+12     	; 0x22c8 <Timer_setCallBack+0x62>
            break;

        case Timer_2:
        	g_CallBackTimer2 = a_ptr;
    22bc:	89 81       	ldd	r24, Y+1	; 0x01
    22be:	9a 81       	ldd	r25, Y+2	; 0x02
    22c0:	90 93 44 01 	sts	0x0144, r25
    22c4:	80 93 43 01 	sts	0x0143, r24
            break;
    }
}
    22c8:	0f 90       	pop	r0
    22ca:	0f 90       	pop	r0
    22cc:	0f 90       	pop	r0
    22ce:	0f 90       	pop	r0
    22d0:	0f 90       	pop	r0
    22d2:	cf 91       	pop	r28
    22d4:	df 91       	pop	r29
    22d6:	08 95       	ret

000022d8 <UART_Init>:
#include <avr/io.h>
#include "common_macros.h"


void UART_Init(UART_Config *UART_configPtr)
{
    22d8:	df 93       	push	r29
    22da:	cf 93       	push	r28
    22dc:	00 d0       	rcall	.+0      	; 0x22de <UART_Init+0x6>
    22de:	00 d0       	rcall	.+0      	; 0x22e0 <UART_Init+0x8>
    22e0:	cd b7       	in	r28, 0x3d	; 61
    22e2:	de b7       	in	r29, 0x3e	; 62
    22e4:	9c 83       	std	Y+4, r25	; 0x04
    22e6:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    22e8:	1a 82       	std	Y+2, r1	; 0x02
    22ea:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA |= (1 << U2X);
    22ec:	ab e2       	ldi	r26, 0x2B	; 43
    22ee:	b0 e0       	ldi	r27, 0x00	; 0
    22f0:	eb e2       	ldi	r30, 0x2B	; 43
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	80 81       	ld	r24, Z
    22f6:	82 60       	ori	r24, 0x02	; 2
    22f8:	8c 93       	st	X, r24




	UCSRC = (1 << URSEL); /*URSEL = 1 The URSEL must be one when writing the UCSRC*/
    22fa:	e0 e4       	ldi	r30, 0x40	; 64
    22fc:	f0 e0       	ldi	r31, 0x00	; 0
    22fe:	80 e8       	ldi	r24, 0x80	; 128
    2300:	80 83       	st	Z, r24
	UCSRC |= (UART_configPtr->parityType << 4); /* Set UPM1:0 (bit 5:4) for parity mode */
    2302:	a0 e4       	ldi	r26, 0x40	; 64
    2304:	b0 e0       	ldi	r27, 0x00	; 0
    2306:	e0 e4       	ldi	r30, 0x40	; 64
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	80 81       	ld	r24, Z
    230c:	28 2f       	mov	r18, r24
    230e:	eb 81       	ldd	r30, Y+3	; 0x03
    2310:	fc 81       	ldd	r31, Y+4	; 0x04
    2312:	82 81       	ldd	r24, Z+2	; 0x02
    2314:	88 2f       	mov	r24, r24
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	82 95       	swap	r24
    231a:	92 95       	swap	r25
    231c:	90 7f       	andi	r25, 0xF0	; 240
    231e:	98 27       	eor	r25, r24
    2320:	80 7f       	andi	r24, 0xF0	; 240
    2322:	98 27       	eor	r25, r24
    2324:	82 2b       	or	r24, r18
    2326:	8c 93       	st	X, r24
	UCSRC |= (UART_configPtr->stopSelect << 3); /* Set USBS (bit 3) for stop bit selection */
    2328:	a0 e4       	ldi	r26, 0x40	; 64
    232a:	b0 e0       	ldi	r27, 0x00	; 0
    232c:	e0 e4       	ldi	r30, 0x40	; 64
    232e:	f0 e0       	ldi	r31, 0x00	; 0
    2330:	80 81       	ld	r24, Z
    2332:	28 2f       	mov	r18, r24
    2334:	eb 81       	ldd	r30, Y+3	; 0x03
    2336:	fc 81       	ldd	r31, Y+4	; 0x04
    2338:	84 81       	ldd	r24, Z+4	; 0x04
    233a:	88 2f       	mov	r24, r24
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	88 0f       	add	r24, r24
    2340:	99 1f       	adc	r25, r25
    2342:	88 0f       	add	r24, r24
    2344:	99 1f       	adc	r25, r25
    2346:	88 0f       	add	r24, r24
    2348:	99 1f       	adc	r25, r25
    234a:	82 2b       	or	r24, r18
    234c:	8c 93       	st	X, r24
	UCSRC |= (UART_configPtr->characterSize << 1); /* Set UCSZ1:0 (bit 2:1) for character size */
    234e:	a0 e4       	ldi	r26, 0x40	; 64
    2350:	b0 e0       	ldi	r27, 0x00	; 0
    2352:	e0 e4       	ldi	r30, 0x40	; 64
    2354:	f0 e0       	ldi	r31, 0x00	; 0
    2356:	80 81       	ld	r24, Z
    2358:	28 2f       	mov	r18, r24
    235a:	eb 81       	ldd	r30, Y+3	; 0x03
    235c:	fc 81       	ldd	r31, Y+4	; 0x04
    235e:	83 81       	ldd	r24, Z+3	; 0x03
    2360:	88 2f       	mov	r24, r24
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	88 0f       	add	r24, r24
    2366:	99 1f       	adc	r25, r25
    2368:	82 2b       	or	r24, r18
    236a:	8c 93       	st	X, r24




	/* Calculate the UBRR register value */
	ubrr_value = (uint16) (((F_CPU / (UART_configPtr->baudRate * 8UL))) - 1);
    236c:	eb 81       	ldd	r30, Y+3	; 0x03
    236e:	fc 81       	ldd	r31, Y+4	; 0x04
    2370:	80 81       	ld	r24, Z
    2372:	91 81       	ldd	r25, Z+1	; 0x01
    2374:	cc 01       	movw	r24, r24
    2376:	a0 e0       	ldi	r26, 0x00	; 0
    2378:	b0 e0       	ldi	r27, 0x00	; 0
    237a:	88 0f       	add	r24, r24
    237c:	99 1f       	adc	r25, r25
    237e:	aa 1f       	adc	r26, r26
    2380:	bb 1f       	adc	r27, r27
    2382:	88 0f       	add	r24, r24
    2384:	99 1f       	adc	r25, r25
    2386:	aa 1f       	adc	r26, r26
    2388:	bb 1f       	adc	r27, r27
    238a:	88 0f       	add	r24, r24
    238c:	99 1f       	adc	r25, r25
    238e:	aa 1f       	adc	r26, r26
    2390:	bb 1f       	adc	r27, r27
    2392:	9c 01       	movw	r18, r24
    2394:	ad 01       	movw	r20, r26
    2396:	80 e0       	ldi	r24, 0x00	; 0
    2398:	92 e1       	ldi	r25, 0x12	; 18
    239a:	aa e7       	ldi	r26, 0x7A	; 122
    239c:	b0 e0       	ldi	r27, 0x00	; 0
    239e:	bc 01       	movw	r22, r24
    23a0:	cd 01       	movw	r24, r26
    23a2:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__udivmodsi4>
    23a6:	da 01       	movw	r26, r20
    23a8:	c9 01       	movw	r24, r18
    23aa:	01 97       	sbiw	r24, 0x01	; 1
    23ac:	9a 83       	std	Y+2, r25	; 0x02
    23ae:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value >> 8;
    23b0:	e0 e4       	ldi	r30, 0x40	; 64
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	89 81       	ldd	r24, Y+1	; 0x01
    23b6:	9a 81       	ldd	r25, Y+2	; 0x02
    23b8:	89 2f       	mov	r24, r25
    23ba:	99 27       	eor	r25, r25
    23bc:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    23be:	e9 e2       	ldi	r30, 0x29	; 41
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	89 81       	ldd	r24, Y+1	; 0x01
    23c4:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1 << RXEN) | (1 << TXEN);
    23c6:	ea e2       	ldi	r30, 0x2A	; 42
    23c8:	f0 e0       	ldi	r31, 0x00	; 0
    23ca:	88 e1       	ldi	r24, 0x18	; 24
    23cc:	80 83       	st	Z, r24
}
    23ce:	0f 90       	pop	r0
    23d0:	0f 90       	pop	r0
    23d2:	0f 90       	pop	r0
    23d4:	0f 90       	pop	r0
    23d6:	cf 91       	pop	r28
    23d8:	df 91       	pop	r29
    23da:	08 95       	ret

000023dc <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    23dc:	df 93       	push	r29
    23de:	cf 93       	push	r28
    23e0:	0f 92       	push	r0
    23e2:	cd b7       	in	r28, 0x3d	; 61
    23e4:	de b7       	in	r29, 0x3e	; 62
    23e6:	89 83       	std	Y+1, r24	; 0x01
	 * UDRE flag indicates that the transmit buffer (UDR) is empty
	 * and ready for the next byte to be transmitted.
	 * The loop continues until UDRE becomes '1', signaling that
	 * data can be written to the UDR register.
	 */
	while(BIT_IS_CLEAR(UCSRA, UART_DATA_REGISTER_EMPTY))   /* Wait until UDRE flag is set (buffer is empty) */
    23e8:	eb e2       	ldi	r30, 0x2B	; 43
    23ea:	f0 e0       	ldi	r31, 0x00	; 0
    23ec:	80 81       	ld	r24, Z
    23ee:	88 2f       	mov	r24, r24
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	80 72       	andi	r24, 0x20	; 32
    23f4:	90 70       	andi	r25, 0x00	; 0
    23f6:	00 97       	sbiw	r24, 0x00	; 0
    23f8:	b9 f3       	breq	.-18     	; 0x23e8 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    23fa:	ec e2       	ldi	r30, 0x2C	; 44
    23fc:	f0 e0       	ldi	r31, 0x00	; 0
    23fe:	89 81       	ldd	r24, Y+1	; 0x01
    2400:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2402:	0f 90       	pop	r0
    2404:	cf 91       	pop	r28
    2406:	df 91       	pop	r29
    2408:	08 95       	ret

0000240a <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    240a:	df 93       	push	r29
    240c:	cf 93       	push	r28
    240e:	cd b7       	in	r28, 0x3d	; 61
    2410:	de b7       	in	r29, 0x3e	; 62
	 * The RXC flag indicates that there is data available in the
	 * UART receive buffer (UDR).
	 * The loop continues until RXC becomes '1', signaling that
	 * a byte has been received and can be read from UDR.
	 */
	while(BIT_IS_CLEAR(UCSRA, UART_RECEIVE_COMPLETE))   /* Wait until RXC flag is set (data received) */
    2412:	eb e2       	ldi	r30, 0x2B	; 43
    2414:	f0 e0       	ldi	r31, 0x00	; 0
    2416:	80 81       	ld	r24, Z
    2418:	88 23       	and	r24, r24
    241a:	dc f7       	brge	.-10     	; 0x2412 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    241c:	ec e2       	ldi	r30, 0x2C	; 44
    241e:	f0 e0       	ldi	r31, 0x00	; 0
    2420:	80 81       	ld	r24, Z
}
    2422:	cf 91       	pop	r28
    2424:	df 91       	pop	r29
    2426:	08 95       	ret

00002428 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2428:	df 93       	push	r29
    242a:	cf 93       	push	r28
    242c:	00 d0       	rcall	.+0      	; 0x242e <UART_sendString+0x6>
    242e:	0f 92       	push	r0
    2430:	cd b7       	in	r28, 0x3d	; 61
    2432:	de b7       	in	r29, 0x3e	; 62
    2434:	9b 83       	std	Y+3, r25	; 0x03
    2436:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2438:	19 82       	std	Y+1, r1	; 0x01
    243a:	0e c0       	rjmp	.+28     	; 0x2458 <UART_sendString+0x30>

	/*Send the entire string byte by byte*/
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    243c:	89 81       	ldd	r24, Y+1	; 0x01
    243e:	28 2f       	mov	r18, r24
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	8a 81       	ldd	r24, Y+2	; 0x02
    2444:	9b 81       	ldd	r25, Y+3	; 0x03
    2446:	fc 01       	movw	r30, r24
    2448:	e2 0f       	add	r30, r18
    244a:	f3 1f       	adc	r31, r19
    244c:	80 81       	ld	r24, Z
    244e:	0e 94 ee 11 	call	0x23dc	; 0x23dc <UART_sendByte>
		i++;
    2452:	89 81       	ldd	r24, Y+1	; 0x01
    2454:	8f 5f       	subi	r24, 0xFF	; 255
    2456:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/*Send the entire string byte by byte*/
	while(Str[i] != '\0')
    2458:	89 81       	ldd	r24, Y+1	; 0x01
    245a:	28 2f       	mov	r18, r24
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	8a 81       	ldd	r24, Y+2	; 0x02
    2460:	9b 81       	ldd	r25, Y+3	; 0x03
    2462:	fc 01       	movw	r30, r24
    2464:	e2 0f       	add	r30, r18
    2466:	f3 1f       	adc	r31, r19
    2468:	80 81       	ld	r24, Z
    246a:	88 23       	and	r24, r24
    246c:	39 f7       	brne	.-50     	; 0x243c <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    246e:	0f 90       	pop	r0
    2470:	0f 90       	pop	r0
    2472:	0f 90       	pop	r0
    2474:	cf 91       	pop	r28
    2476:	df 91       	pop	r29
    2478:	08 95       	ret

0000247a <UART_receiveString>:
 * replaced with a null terminator '\0' to properly terminate the string.
 *
 * Str Pointer to the buffer where the received string will be stored.
 */
void UART_receiveString(uint8 *Str)
{
    247a:	0f 93       	push	r16
    247c:	1f 93       	push	r17
    247e:	df 93       	push	r29
    2480:	cf 93       	push	r28
    2482:	00 d0       	rcall	.+0      	; 0x2484 <UART_receiveString+0xa>
    2484:	0f 92       	push	r0
    2486:	cd b7       	in	r28, 0x3d	; 61
    2488:	de b7       	in	r29, 0x3e	; 62
    248a:	9b 83       	std	Y+3, r25	; 0x03
    248c:	8a 83       	std	Y+2, r24	; 0x02
    uint8 i = 0;
    248e:	19 82       	std	Y+1, r1	; 0x01

    /* Receive the first byte and store it in the buffer */
    Str[i] = UART_recieveByte();
    2490:	89 81       	ldd	r24, Y+1	; 0x01
    2492:	28 2f       	mov	r18, r24
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	8a 81       	ldd	r24, Y+2	; 0x02
    2498:	9b 81       	ldd	r25, Y+3	; 0x03
    249a:	8c 01       	movw	r16, r24
    249c:	02 0f       	add	r16, r18
    249e:	13 1f       	adc	r17, r19
    24a0:	0e 94 05 12 	call	0x240a	; 0x240a <UART_recieveByte>
    24a4:	f8 01       	movw	r30, r16
    24a6:	80 83       	st	Z, r24
    24a8:	0f c0       	rjmp	.+30     	; 0x24c8 <UART_receiveString+0x4e>

    /* Continue receiving bytes until the '#' character is encountered */
    while(Str[i] != '#')
    {
        i++;
    24aa:	89 81       	ldd	r24, Y+1	; 0x01
    24ac:	8f 5f       	subi	r24, 0xFF	; 255
    24ae:	89 83       	std	Y+1, r24	; 0x01
        Str[i] = UART_recieveByte();
    24b0:	89 81       	ldd	r24, Y+1	; 0x01
    24b2:	28 2f       	mov	r18, r24
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	8a 81       	ldd	r24, Y+2	; 0x02
    24b8:	9b 81       	ldd	r25, Y+3	; 0x03
    24ba:	8c 01       	movw	r16, r24
    24bc:	02 0f       	add	r16, r18
    24be:	13 1f       	adc	r17, r19
    24c0:	0e 94 05 12 	call	0x240a	; 0x240a <UART_recieveByte>
    24c4:	f8 01       	movw	r30, r16
    24c6:	80 83       	st	Z, r24

    /* Receive the first byte and store it in the buffer */
    Str[i] = UART_recieveByte();

    /* Continue receiving bytes until the '#' character is encountered */
    while(Str[i] != '#')
    24c8:	89 81       	ldd	r24, Y+1	; 0x01
    24ca:	28 2f       	mov	r18, r24
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	8a 81       	ldd	r24, Y+2	; 0x02
    24d0:	9b 81       	ldd	r25, Y+3	; 0x03
    24d2:	fc 01       	movw	r30, r24
    24d4:	e2 0f       	add	r30, r18
    24d6:	f3 1f       	adc	r31, r19
    24d8:	80 81       	ld	r24, Z
    24da:	83 32       	cpi	r24, 0x23	; 35
    24dc:	31 f7       	brne	.-52     	; 0x24aa <UART_receiveString+0x30>
        i++;
        Str[i] = UART_recieveByte();
    }

    /* Replace the '#' character with a null terminator to end the string */
    Str[i] = '\0';
    24de:	89 81       	ldd	r24, Y+1	; 0x01
    24e0:	28 2f       	mov	r18, r24
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	8a 81       	ldd	r24, Y+2	; 0x02
    24e6:	9b 81       	ldd	r25, Y+3	; 0x03
    24e8:	fc 01       	movw	r30, r24
    24ea:	e2 0f       	add	r30, r18
    24ec:	f3 1f       	adc	r31, r19
    24ee:	10 82       	st	Z, r1
}
    24f0:	0f 90       	pop	r0
    24f2:	0f 90       	pop	r0
    24f4:	0f 90       	pop	r0
    24f6:	cf 91       	pop	r28
    24f8:	df 91       	pop	r29
    24fa:	1f 91       	pop	r17
    24fc:	0f 91       	pop	r16
    24fe:	08 95       	ret

00002500 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    2500:	df 93       	push	r29
    2502:	cf 93       	push	r28
    2504:	00 d0       	rcall	.+0      	; 0x2506 <GPIO_setupPinDirection+0x6>
    2506:	00 d0       	rcall	.+0      	; 0x2508 <GPIO_setupPinDirection+0x8>
    2508:	0f 92       	push	r0
    250a:	cd b7       	in	r28, 0x3d	; 61
    250c:	de b7       	in	r29, 0x3e	; 62
    250e:	89 83       	std	Y+1, r24	; 0x01
    2510:	6a 83       	std	Y+2, r22	; 0x02
    2512:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2514:	8a 81       	ldd	r24, Y+2	; 0x02
    2516:	88 30       	cpi	r24, 0x08	; 8
    2518:	08 f0       	brcs	.+2      	; 0x251c <GPIO_setupPinDirection+0x1c>
    251a:	d5 c0       	rjmp	.+426    	; 0x26c6 <GPIO_setupPinDirection+0x1c6>
    251c:	89 81       	ldd	r24, Y+1	; 0x01
    251e:	84 30       	cpi	r24, 0x04	; 4
    2520:	08 f0       	brcs	.+2      	; 0x2524 <GPIO_setupPinDirection+0x24>
    2522:	d1 c0       	rjmp	.+418    	; 0x26c6 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    2524:	89 81       	ldd	r24, Y+1	; 0x01
    2526:	28 2f       	mov	r18, r24
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	3d 83       	std	Y+5, r19	; 0x05
    252c:	2c 83       	std	Y+4, r18	; 0x04
    252e:	8c 81       	ldd	r24, Y+4	; 0x04
    2530:	9d 81       	ldd	r25, Y+5	; 0x05
    2532:	81 30       	cpi	r24, 0x01	; 1
    2534:	91 05       	cpc	r25, r1
    2536:	09 f4       	brne	.+2      	; 0x253a <GPIO_setupPinDirection+0x3a>
    2538:	43 c0       	rjmp	.+134    	; 0x25c0 <GPIO_setupPinDirection+0xc0>
    253a:	2c 81       	ldd	r18, Y+4	; 0x04
    253c:	3d 81       	ldd	r19, Y+5	; 0x05
    253e:	22 30       	cpi	r18, 0x02	; 2
    2540:	31 05       	cpc	r19, r1
    2542:	2c f4       	brge	.+10     	; 0x254e <GPIO_setupPinDirection+0x4e>
    2544:	8c 81       	ldd	r24, Y+4	; 0x04
    2546:	9d 81       	ldd	r25, Y+5	; 0x05
    2548:	00 97       	sbiw	r24, 0x00	; 0
    254a:	71 f0       	breq	.+28     	; 0x2568 <GPIO_setupPinDirection+0x68>
    254c:	bc c0       	rjmp	.+376    	; 0x26c6 <GPIO_setupPinDirection+0x1c6>
    254e:	2c 81       	ldd	r18, Y+4	; 0x04
    2550:	3d 81       	ldd	r19, Y+5	; 0x05
    2552:	22 30       	cpi	r18, 0x02	; 2
    2554:	31 05       	cpc	r19, r1
    2556:	09 f4       	brne	.+2      	; 0x255a <GPIO_setupPinDirection+0x5a>
    2558:	5f c0       	rjmp	.+190    	; 0x2618 <GPIO_setupPinDirection+0x118>
    255a:	8c 81       	ldd	r24, Y+4	; 0x04
    255c:	9d 81       	ldd	r25, Y+5	; 0x05
    255e:	83 30       	cpi	r24, 0x03	; 3
    2560:	91 05       	cpc	r25, r1
    2562:	09 f4       	brne	.+2      	; 0x2566 <GPIO_setupPinDirection+0x66>
    2564:	85 c0       	rjmp	.+266    	; 0x2670 <GPIO_setupPinDirection+0x170>
    2566:	af c0       	rjmp	.+350    	; 0x26c6 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    2568:	8b 81       	ldd	r24, Y+3	; 0x03
    256a:	81 30       	cpi	r24, 0x01	; 1
    256c:	a1 f4       	brne	.+40     	; 0x2596 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    256e:	aa e3       	ldi	r26, 0x3A	; 58
    2570:	b0 e0       	ldi	r27, 0x00	; 0
    2572:	ea e3       	ldi	r30, 0x3A	; 58
    2574:	f0 e0       	ldi	r31, 0x00	; 0
    2576:	80 81       	ld	r24, Z
    2578:	48 2f       	mov	r20, r24
    257a:	8a 81       	ldd	r24, Y+2	; 0x02
    257c:	28 2f       	mov	r18, r24
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	81 e0       	ldi	r24, 0x01	; 1
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	02 2e       	mov	r0, r18
    2586:	02 c0       	rjmp	.+4      	; 0x258c <GPIO_setupPinDirection+0x8c>
    2588:	88 0f       	add	r24, r24
    258a:	99 1f       	adc	r25, r25
    258c:	0a 94       	dec	r0
    258e:	e2 f7       	brpl	.-8      	; 0x2588 <GPIO_setupPinDirection+0x88>
    2590:	84 2b       	or	r24, r20
    2592:	8c 93       	st	X, r24
    2594:	98 c0       	rjmp	.+304    	; 0x26c6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    2596:	aa e3       	ldi	r26, 0x3A	; 58
    2598:	b0 e0       	ldi	r27, 0x00	; 0
    259a:	ea e3       	ldi	r30, 0x3A	; 58
    259c:	f0 e0       	ldi	r31, 0x00	; 0
    259e:	80 81       	ld	r24, Z
    25a0:	48 2f       	mov	r20, r24
    25a2:	8a 81       	ldd	r24, Y+2	; 0x02
    25a4:	28 2f       	mov	r18, r24
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	81 e0       	ldi	r24, 0x01	; 1
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	02 2e       	mov	r0, r18
    25ae:	02 c0       	rjmp	.+4      	; 0x25b4 <GPIO_setupPinDirection+0xb4>
    25b0:	88 0f       	add	r24, r24
    25b2:	99 1f       	adc	r25, r25
    25b4:	0a 94       	dec	r0
    25b6:	e2 f7       	brpl	.-8      	; 0x25b0 <GPIO_setupPinDirection+0xb0>
    25b8:	80 95       	com	r24
    25ba:	84 23       	and	r24, r20
    25bc:	8c 93       	st	X, r24
    25be:	83 c0       	rjmp	.+262    	; 0x26c6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    25c0:	8b 81       	ldd	r24, Y+3	; 0x03
    25c2:	81 30       	cpi	r24, 0x01	; 1
    25c4:	a1 f4       	brne	.+40     	; 0x25ee <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    25c6:	a7 e3       	ldi	r26, 0x37	; 55
    25c8:	b0 e0       	ldi	r27, 0x00	; 0
    25ca:	e7 e3       	ldi	r30, 0x37	; 55
    25cc:	f0 e0       	ldi	r31, 0x00	; 0
    25ce:	80 81       	ld	r24, Z
    25d0:	48 2f       	mov	r20, r24
    25d2:	8a 81       	ldd	r24, Y+2	; 0x02
    25d4:	28 2f       	mov	r18, r24
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	81 e0       	ldi	r24, 0x01	; 1
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	02 2e       	mov	r0, r18
    25de:	02 c0       	rjmp	.+4      	; 0x25e4 <GPIO_setupPinDirection+0xe4>
    25e0:	88 0f       	add	r24, r24
    25e2:	99 1f       	adc	r25, r25
    25e4:	0a 94       	dec	r0
    25e6:	e2 f7       	brpl	.-8      	; 0x25e0 <GPIO_setupPinDirection+0xe0>
    25e8:	84 2b       	or	r24, r20
    25ea:	8c 93       	st	X, r24
    25ec:	6c c0       	rjmp	.+216    	; 0x26c6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    25ee:	a7 e3       	ldi	r26, 0x37	; 55
    25f0:	b0 e0       	ldi	r27, 0x00	; 0
    25f2:	e7 e3       	ldi	r30, 0x37	; 55
    25f4:	f0 e0       	ldi	r31, 0x00	; 0
    25f6:	80 81       	ld	r24, Z
    25f8:	48 2f       	mov	r20, r24
    25fa:	8a 81       	ldd	r24, Y+2	; 0x02
    25fc:	28 2f       	mov	r18, r24
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	81 e0       	ldi	r24, 0x01	; 1
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	02 2e       	mov	r0, r18
    2606:	02 c0       	rjmp	.+4      	; 0x260c <GPIO_setupPinDirection+0x10c>
    2608:	88 0f       	add	r24, r24
    260a:	99 1f       	adc	r25, r25
    260c:	0a 94       	dec	r0
    260e:	e2 f7       	brpl	.-8      	; 0x2608 <GPIO_setupPinDirection+0x108>
    2610:	80 95       	com	r24
    2612:	84 23       	and	r24, r20
    2614:	8c 93       	st	X, r24
    2616:	57 c0       	rjmp	.+174    	; 0x26c6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    2618:	8b 81       	ldd	r24, Y+3	; 0x03
    261a:	81 30       	cpi	r24, 0x01	; 1
    261c:	a1 f4       	brne	.+40     	; 0x2646 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    261e:	a4 e3       	ldi	r26, 0x34	; 52
    2620:	b0 e0       	ldi	r27, 0x00	; 0
    2622:	e4 e3       	ldi	r30, 0x34	; 52
    2624:	f0 e0       	ldi	r31, 0x00	; 0
    2626:	80 81       	ld	r24, Z
    2628:	48 2f       	mov	r20, r24
    262a:	8a 81       	ldd	r24, Y+2	; 0x02
    262c:	28 2f       	mov	r18, r24
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	81 e0       	ldi	r24, 0x01	; 1
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	02 2e       	mov	r0, r18
    2636:	02 c0       	rjmp	.+4      	; 0x263c <GPIO_setupPinDirection+0x13c>
    2638:	88 0f       	add	r24, r24
    263a:	99 1f       	adc	r25, r25
    263c:	0a 94       	dec	r0
    263e:	e2 f7       	brpl	.-8      	; 0x2638 <GPIO_setupPinDirection+0x138>
    2640:	84 2b       	or	r24, r20
    2642:	8c 93       	st	X, r24
    2644:	40 c0       	rjmp	.+128    	; 0x26c6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    2646:	a4 e3       	ldi	r26, 0x34	; 52
    2648:	b0 e0       	ldi	r27, 0x00	; 0
    264a:	e4 e3       	ldi	r30, 0x34	; 52
    264c:	f0 e0       	ldi	r31, 0x00	; 0
    264e:	80 81       	ld	r24, Z
    2650:	48 2f       	mov	r20, r24
    2652:	8a 81       	ldd	r24, Y+2	; 0x02
    2654:	28 2f       	mov	r18, r24
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	81 e0       	ldi	r24, 0x01	; 1
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	02 2e       	mov	r0, r18
    265e:	02 c0       	rjmp	.+4      	; 0x2664 <GPIO_setupPinDirection+0x164>
    2660:	88 0f       	add	r24, r24
    2662:	99 1f       	adc	r25, r25
    2664:	0a 94       	dec	r0
    2666:	e2 f7       	brpl	.-8      	; 0x2660 <GPIO_setupPinDirection+0x160>
    2668:	80 95       	com	r24
    266a:	84 23       	and	r24, r20
    266c:	8c 93       	st	X, r24
    266e:	2b c0       	rjmp	.+86     	; 0x26c6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    2670:	8b 81       	ldd	r24, Y+3	; 0x03
    2672:	81 30       	cpi	r24, 0x01	; 1
    2674:	a1 f4       	brne	.+40     	; 0x269e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    2676:	a1 e3       	ldi	r26, 0x31	; 49
    2678:	b0 e0       	ldi	r27, 0x00	; 0
    267a:	e1 e3       	ldi	r30, 0x31	; 49
    267c:	f0 e0       	ldi	r31, 0x00	; 0
    267e:	80 81       	ld	r24, Z
    2680:	48 2f       	mov	r20, r24
    2682:	8a 81       	ldd	r24, Y+2	; 0x02
    2684:	28 2f       	mov	r18, r24
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	81 e0       	ldi	r24, 0x01	; 1
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	02 2e       	mov	r0, r18
    268e:	02 c0       	rjmp	.+4      	; 0x2694 <GPIO_setupPinDirection+0x194>
    2690:	88 0f       	add	r24, r24
    2692:	99 1f       	adc	r25, r25
    2694:	0a 94       	dec	r0
    2696:	e2 f7       	brpl	.-8      	; 0x2690 <GPIO_setupPinDirection+0x190>
    2698:	84 2b       	or	r24, r20
    269a:	8c 93       	st	X, r24
    269c:	14 c0       	rjmp	.+40     	; 0x26c6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    269e:	a1 e3       	ldi	r26, 0x31	; 49
    26a0:	b0 e0       	ldi	r27, 0x00	; 0
    26a2:	e1 e3       	ldi	r30, 0x31	; 49
    26a4:	f0 e0       	ldi	r31, 0x00	; 0
    26a6:	80 81       	ld	r24, Z
    26a8:	48 2f       	mov	r20, r24
    26aa:	8a 81       	ldd	r24, Y+2	; 0x02
    26ac:	28 2f       	mov	r18, r24
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	81 e0       	ldi	r24, 0x01	; 1
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	02 2e       	mov	r0, r18
    26b6:	02 c0       	rjmp	.+4      	; 0x26bc <GPIO_setupPinDirection+0x1bc>
    26b8:	88 0f       	add	r24, r24
    26ba:	99 1f       	adc	r25, r25
    26bc:	0a 94       	dec	r0
    26be:	e2 f7       	brpl	.-8      	; 0x26b8 <GPIO_setupPinDirection+0x1b8>
    26c0:	80 95       	com	r24
    26c2:	84 23       	and	r24, r20
    26c4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    26c6:	0f 90       	pop	r0
    26c8:	0f 90       	pop	r0
    26ca:	0f 90       	pop	r0
    26cc:	0f 90       	pop	r0
    26ce:	0f 90       	pop	r0
    26d0:	cf 91       	pop	r28
    26d2:	df 91       	pop	r29
    26d4:	08 95       	ret

000026d6 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    26d6:	df 93       	push	r29
    26d8:	cf 93       	push	r28
    26da:	00 d0       	rcall	.+0      	; 0x26dc <GPIO_writePin+0x6>
    26dc:	00 d0       	rcall	.+0      	; 0x26de <GPIO_writePin+0x8>
    26de:	0f 92       	push	r0
    26e0:	cd b7       	in	r28, 0x3d	; 61
    26e2:	de b7       	in	r29, 0x3e	; 62
    26e4:	89 83       	std	Y+1, r24	; 0x01
    26e6:	6a 83       	std	Y+2, r22	; 0x02
    26e8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    26ea:	8a 81       	ldd	r24, Y+2	; 0x02
    26ec:	88 30       	cpi	r24, 0x08	; 8
    26ee:	08 f0       	brcs	.+2      	; 0x26f2 <GPIO_writePin+0x1c>
    26f0:	d5 c0       	rjmp	.+426    	; 0x289c <GPIO_writePin+0x1c6>
    26f2:	89 81       	ldd	r24, Y+1	; 0x01
    26f4:	84 30       	cpi	r24, 0x04	; 4
    26f6:	08 f0       	brcs	.+2      	; 0x26fa <GPIO_writePin+0x24>
    26f8:	d1 c0       	rjmp	.+418    	; 0x289c <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* applying HIGH or LOW on the bin */
		switch(port_num)
    26fa:	89 81       	ldd	r24, Y+1	; 0x01
    26fc:	28 2f       	mov	r18, r24
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	3d 83       	std	Y+5, r19	; 0x05
    2702:	2c 83       	std	Y+4, r18	; 0x04
    2704:	8c 81       	ldd	r24, Y+4	; 0x04
    2706:	9d 81       	ldd	r25, Y+5	; 0x05
    2708:	81 30       	cpi	r24, 0x01	; 1
    270a:	91 05       	cpc	r25, r1
    270c:	09 f4       	brne	.+2      	; 0x2710 <GPIO_writePin+0x3a>
    270e:	43 c0       	rjmp	.+134    	; 0x2796 <GPIO_writePin+0xc0>
    2710:	2c 81       	ldd	r18, Y+4	; 0x04
    2712:	3d 81       	ldd	r19, Y+5	; 0x05
    2714:	22 30       	cpi	r18, 0x02	; 2
    2716:	31 05       	cpc	r19, r1
    2718:	2c f4       	brge	.+10     	; 0x2724 <GPIO_writePin+0x4e>
    271a:	8c 81       	ldd	r24, Y+4	; 0x04
    271c:	9d 81       	ldd	r25, Y+5	; 0x05
    271e:	00 97       	sbiw	r24, 0x00	; 0
    2720:	71 f0       	breq	.+28     	; 0x273e <GPIO_writePin+0x68>
    2722:	bc c0       	rjmp	.+376    	; 0x289c <GPIO_writePin+0x1c6>
    2724:	2c 81       	ldd	r18, Y+4	; 0x04
    2726:	3d 81       	ldd	r19, Y+5	; 0x05
    2728:	22 30       	cpi	r18, 0x02	; 2
    272a:	31 05       	cpc	r19, r1
    272c:	09 f4       	brne	.+2      	; 0x2730 <GPIO_writePin+0x5a>
    272e:	5f c0       	rjmp	.+190    	; 0x27ee <GPIO_writePin+0x118>
    2730:	8c 81       	ldd	r24, Y+4	; 0x04
    2732:	9d 81       	ldd	r25, Y+5	; 0x05
    2734:	83 30       	cpi	r24, 0x03	; 3
    2736:	91 05       	cpc	r25, r1
    2738:	09 f4       	brne	.+2      	; 0x273c <GPIO_writePin+0x66>
    273a:	85 c0       	rjmp	.+266    	; 0x2846 <GPIO_writePin+0x170>
    273c:	af c0       	rjmp	.+350    	; 0x289c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    273e:	8b 81       	ldd	r24, Y+3	; 0x03
    2740:	81 30       	cpi	r24, 0x01	; 1
    2742:	a1 f4       	brne	.+40     	; 0x276c <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA, pin_num);
    2744:	ab e3       	ldi	r26, 0x3B	; 59
    2746:	b0 e0       	ldi	r27, 0x00	; 0
    2748:	eb e3       	ldi	r30, 0x3B	; 59
    274a:	f0 e0       	ldi	r31, 0x00	; 0
    274c:	80 81       	ld	r24, Z
    274e:	48 2f       	mov	r20, r24
    2750:	8a 81       	ldd	r24, Y+2	; 0x02
    2752:	28 2f       	mov	r18, r24
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	81 e0       	ldi	r24, 0x01	; 1
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	02 2e       	mov	r0, r18
    275c:	02 c0       	rjmp	.+4      	; 0x2762 <GPIO_writePin+0x8c>
    275e:	88 0f       	add	r24, r24
    2760:	99 1f       	adc	r25, r25
    2762:	0a 94       	dec	r0
    2764:	e2 f7       	brpl	.-8      	; 0x275e <GPIO_writePin+0x88>
    2766:	84 2b       	or	r24, r20
    2768:	8c 93       	st	X, r24
    276a:	98 c0       	rjmp	.+304    	; 0x289c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA, pin_num);
    276c:	ab e3       	ldi	r26, 0x3B	; 59
    276e:	b0 e0       	ldi	r27, 0x00	; 0
    2770:	eb e3       	ldi	r30, 0x3B	; 59
    2772:	f0 e0       	ldi	r31, 0x00	; 0
    2774:	80 81       	ld	r24, Z
    2776:	48 2f       	mov	r20, r24
    2778:	8a 81       	ldd	r24, Y+2	; 0x02
    277a:	28 2f       	mov	r18, r24
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	02 2e       	mov	r0, r18
    2784:	02 c0       	rjmp	.+4      	; 0x278a <GPIO_writePin+0xb4>
    2786:	88 0f       	add	r24, r24
    2788:	99 1f       	adc	r25, r25
    278a:	0a 94       	dec	r0
    278c:	e2 f7       	brpl	.-8      	; 0x2786 <GPIO_writePin+0xb0>
    278e:	80 95       	com	r24
    2790:	84 23       	and	r24, r20
    2792:	8c 93       	st	X, r24
    2794:	83 c0       	rjmp	.+262    	; 0x289c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    2796:	8b 81       	ldd	r24, Y+3	; 0x03
    2798:	81 30       	cpi	r24, 0x01	; 1
    279a:	a1 f4       	brne	.+40     	; 0x27c4 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB, pin_num);
    279c:	a8 e3       	ldi	r26, 0x38	; 56
    279e:	b0 e0       	ldi	r27, 0x00	; 0
    27a0:	e8 e3       	ldi	r30, 0x38	; 56
    27a2:	f0 e0       	ldi	r31, 0x00	; 0
    27a4:	80 81       	ld	r24, Z
    27a6:	48 2f       	mov	r20, r24
    27a8:	8a 81       	ldd	r24, Y+2	; 0x02
    27aa:	28 2f       	mov	r18, r24
    27ac:	30 e0       	ldi	r19, 0x00	; 0
    27ae:	81 e0       	ldi	r24, 0x01	; 1
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	02 2e       	mov	r0, r18
    27b4:	02 c0       	rjmp	.+4      	; 0x27ba <GPIO_writePin+0xe4>
    27b6:	88 0f       	add	r24, r24
    27b8:	99 1f       	adc	r25, r25
    27ba:	0a 94       	dec	r0
    27bc:	e2 f7       	brpl	.-8      	; 0x27b6 <GPIO_writePin+0xe0>
    27be:	84 2b       	or	r24, r20
    27c0:	8c 93       	st	X, r24
    27c2:	6c c0       	rjmp	.+216    	; 0x289c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB, pin_num);
    27c4:	a8 e3       	ldi	r26, 0x38	; 56
    27c6:	b0 e0       	ldi	r27, 0x00	; 0
    27c8:	e8 e3       	ldi	r30, 0x38	; 56
    27ca:	f0 e0       	ldi	r31, 0x00	; 0
    27cc:	80 81       	ld	r24, Z
    27ce:	48 2f       	mov	r20, r24
    27d0:	8a 81       	ldd	r24, Y+2	; 0x02
    27d2:	28 2f       	mov	r18, r24
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	81 e0       	ldi	r24, 0x01	; 1
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	02 2e       	mov	r0, r18
    27dc:	02 c0       	rjmp	.+4      	; 0x27e2 <GPIO_writePin+0x10c>
    27de:	88 0f       	add	r24, r24
    27e0:	99 1f       	adc	r25, r25
    27e2:	0a 94       	dec	r0
    27e4:	e2 f7       	brpl	.-8      	; 0x27de <GPIO_writePin+0x108>
    27e6:	80 95       	com	r24
    27e8:	84 23       	and	r24, r20
    27ea:	8c 93       	st	X, r24
    27ec:	57 c0       	rjmp	.+174    	; 0x289c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    27ee:	8b 81       	ldd	r24, Y+3	; 0x03
    27f0:	81 30       	cpi	r24, 0x01	; 1
    27f2:	a1 f4       	brne	.+40     	; 0x281c <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC, pin_num);
    27f4:	a5 e3       	ldi	r26, 0x35	; 53
    27f6:	b0 e0       	ldi	r27, 0x00	; 0
    27f8:	e5 e3       	ldi	r30, 0x35	; 53
    27fa:	f0 e0       	ldi	r31, 0x00	; 0
    27fc:	80 81       	ld	r24, Z
    27fe:	48 2f       	mov	r20, r24
    2800:	8a 81       	ldd	r24, Y+2	; 0x02
    2802:	28 2f       	mov	r18, r24
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	81 e0       	ldi	r24, 0x01	; 1
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	02 2e       	mov	r0, r18
    280c:	02 c0       	rjmp	.+4      	; 0x2812 <GPIO_writePin+0x13c>
    280e:	88 0f       	add	r24, r24
    2810:	99 1f       	adc	r25, r25
    2812:	0a 94       	dec	r0
    2814:	e2 f7       	brpl	.-8      	; 0x280e <GPIO_writePin+0x138>
    2816:	84 2b       	or	r24, r20
    2818:	8c 93       	st	X, r24
    281a:	40 c0       	rjmp	.+128    	; 0x289c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC, pin_num);
    281c:	a5 e3       	ldi	r26, 0x35	; 53
    281e:	b0 e0       	ldi	r27, 0x00	; 0
    2820:	e5 e3       	ldi	r30, 0x35	; 53
    2822:	f0 e0       	ldi	r31, 0x00	; 0
    2824:	80 81       	ld	r24, Z
    2826:	48 2f       	mov	r20, r24
    2828:	8a 81       	ldd	r24, Y+2	; 0x02
    282a:	28 2f       	mov	r18, r24
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	81 e0       	ldi	r24, 0x01	; 1
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	02 2e       	mov	r0, r18
    2834:	02 c0       	rjmp	.+4      	; 0x283a <GPIO_writePin+0x164>
    2836:	88 0f       	add	r24, r24
    2838:	99 1f       	adc	r25, r25
    283a:	0a 94       	dec	r0
    283c:	e2 f7       	brpl	.-8      	; 0x2836 <GPIO_writePin+0x160>
    283e:	80 95       	com	r24
    2840:	84 23       	and	r24, r20
    2842:	8c 93       	st	X, r24
    2844:	2b c0       	rjmp	.+86     	; 0x289c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    2846:	8b 81       	ldd	r24, Y+3	; 0x03
    2848:	81 30       	cpi	r24, 0x01	; 1
    284a:	a1 f4       	brne	.+40     	; 0x2874 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD, pin_num);
    284c:	a2 e3       	ldi	r26, 0x32	; 50
    284e:	b0 e0       	ldi	r27, 0x00	; 0
    2850:	e2 e3       	ldi	r30, 0x32	; 50
    2852:	f0 e0       	ldi	r31, 0x00	; 0
    2854:	80 81       	ld	r24, Z
    2856:	48 2f       	mov	r20, r24
    2858:	8a 81       	ldd	r24, Y+2	; 0x02
    285a:	28 2f       	mov	r18, r24
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	81 e0       	ldi	r24, 0x01	; 1
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	02 2e       	mov	r0, r18
    2864:	02 c0       	rjmp	.+4      	; 0x286a <GPIO_writePin+0x194>
    2866:	88 0f       	add	r24, r24
    2868:	99 1f       	adc	r25, r25
    286a:	0a 94       	dec	r0
    286c:	e2 f7       	brpl	.-8      	; 0x2866 <GPIO_writePin+0x190>
    286e:	84 2b       	or	r24, r20
    2870:	8c 93       	st	X, r24
    2872:	14 c0       	rjmp	.+40     	; 0x289c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD, pin_num);
    2874:	a2 e3       	ldi	r26, 0x32	; 50
    2876:	b0 e0       	ldi	r27, 0x00	; 0
    2878:	e2 e3       	ldi	r30, 0x32	; 50
    287a:	f0 e0       	ldi	r31, 0x00	; 0
    287c:	80 81       	ld	r24, Z
    287e:	48 2f       	mov	r20, r24
    2880:	8a 81       	ldd	r24, Y+2	; 0x02
    2882:	28 2f       	mov	r18, r24
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	02 2e       	mov	r0, r18
    288c:	02 c0       	rjmp	.+4      	; 0x2892 <GPIO_writePin+0x1bc>
    288e:	88 0f       	add	r24, r24
    2890:	99 1f       	adc	r25, r25
    2892:	0a 94       	dec	r0
    2894:	e2 f7       	brpl	.-8      	; 0x288e <GPIO_writePin+0x1b8>
    2896:	80 95       	com	r24
    2898:	84 23       	and	r24, r20
    289a:	8c 93       	st	X, r24
			}
			break;
		}
	}

}
    289c:	0f 90       	pop	r0
    289e:	0f 90       	pop	r0
    28a0:	0f 90       	pop	r0
    28a2:	0f 90       	pop	r0
    28a4:	0f 90       	pop	r0
    28a6:	cf 91       	pop	r28
    28a8:	df 91       	pop	r29
    28aa:	08 95       	ret

000028ac <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    28ac:	df 93       	push	r29
    28ae:	cf 93       	push	r28
    28b0:	00 d0       	rcall	.+0      	; 0x28b2 <GPIO_readPin+0x6>
    28b2:	00 d0       	rcall	.+0      	; 0x28b4 <GPIO_readPin+0x8>
    28b4:	00 d0       	rcall	.+0      	; 0x28b6 <GPIO_readPin+0xa>
    28b6:	cd b7       	in	r28, 0x3d	; 61
    28b8:	de b7       	in	r29, 0x3e	; 62
    28ba:	89 83       	std	Y+1, r24	; 0x01
    28bc:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    28be:	8a 81       	ldd	r24, Y+2	; 0x02
    28c0:	88 30       	cpi	r24, 0x08	; 8
    28c2:	18 f4       	brcc	.+6      	; 0x28ca <GPIO_readPin+0x1e>
    28c4:	89 81       	ldd	r24, Y+1	; 0x01
    28c6:	84 30       	cpi	r24, 0x04	; 4
    28c8:	10 f0       	brcs	.+4      	; 0x28ce <GPIO_readPin+0x22>
	{
		return LOGIC_LOW;
    28ca:	1d 82       	std	Y+5, r1	; 0x05
    28cc:	82 c0       	rjmp	.+260    	; 0x29d2 <GPIO_readPin+0x126>
	}

	else
	{
		switch (port_num)
    28ce:	89 81       	ldd	r24, Y+1	; 0x01
    28d0:	28 2f       	mov	r18, r24
    28d2:	30 e0       	ldi	r19, 0x00	; 0
    28d4:	3c 83       	std	Y+4, r19	; 0x04
    28d6:	2b 83       	std	Y+3, r18	; 0x03
    28d8:	4b 81       	ldd	r20, Y+3	; 0x03
    28da:	5c 81       	ldd	r21, Y+4	; 0x04
    28dc:	41 30       	cpi	r20, 0x01	; 1
    28de:	51 05       	cpc	r21, r1
    28e0:	79 f1       	breq	.+94     	; 0x2940 <GPIO_readPin+0x94>
    28e2:	8b 81       	ldd	r24, Y+3	; 0x03
    28e4:	9c 81       	ldd	r25, Y+4	; 0x04
    28e6:	82 30       	cpi	r24, 0x02	; 2
    28e8:	91 05       	cpc	r25, r1
    28ea:	34 f4       	brge	.+12     	; 0x28f8 <GPIO_readPin+0x4c>
    28ec:	2b 81       	ldd	r18, Y+3	; 0x03
    28ee:	3c 81       	ldd	r19, Y+4	; 0x04
    28f0:	21 15       	cp	r18, r1
    28f2:	31 05       	cpc	r19, r1
    28f4:	69 f0       	breq	.+26     	; 0x2910 <GPIO_readPin+0x64>
    28f6:	6c c0       	rjmp	.+216    	; 0x29d0 <GPIO_readPin+0x124>
    28f8:	4b 81       	ldd	r20, Y+3	; 0x03
    28fa:	5c 81       	ldd	r21, Y+4	; 0x04
    28fc:	42 30       	cpi	r20, 0x02	; 2
    28fe:	51 05       	cpc	r21, r1
    2900:	b9 f1       	breq	.+110    	; 0x2970 <GPIO_readPin+0xc4>
    2902:	8b 81       	ldd	r24, Y+3	; 0x03
    2904:	9c 81       	ldd	r25, Y+4	; 0x04
    2906:	83 30       	cpi	r24, 0x03	; 3
    2908:	91 05       	cpc	r25, r1
    290a:	09 f4       	brne	.+2      	; 0x290e <GPIO_readPin+0x62>
    290c:	49 c0       	rjmp	.+146    	; 0x29a0 <GPIO_readPin+0xf4>
    290e:	60 c0       	rjmp	.+192    	; 0x29d0 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA, pin_num))
    2910:	e9 e3       	ldi	r30, 0x39	; 57
    2912:	f0 e0       	ldi	r31, 0x00	; 0
    2914:	80 81       	ld	r24, Z
    2916:	28 2f       	mov	r18, r24
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	8a 81       	ldd	r24, Y+2	; 0x02
    291c:	88 2f       	mov	r24, r24
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	a9 01       	movw	r20, r18
    2922:	02 c0       	rjmp	.+4      	; 0x2928 <GPIO_readPin+0x7c>
    2924:	55 95       	asr	r21
    2926:	47 95       	ror	r20
    2928:	8a 95       	dec	r24
    292a:	e2 f7       	brpl	.-8      	; 0x2924 <GPIO_readPin+0x78>
    292c:	ca 01       	movw	r24, r20
    292e:	81 70       	andi	r24, 0x01	; 1
    2930:	90 70       	andi	r25, 0x00	; 0
    2932:	88 23       	and	r24, r24
    2934:	19 f0       	breq	.+6      	; 0x293c <GPIO_readPin+0x90>
			{
				return LOGIC_HIGH;
    2936:	51 e0       	ldi	r21, 0x01	; 1
    2938:	5d 83       	std	Y+5, r21	; 0x05
    293a:	4b c0       	rjmp	.+150    	; 0x29d2 <GPIO_readPin+0x126>
			}
			else
			{
				return LOGIC_LOW;
    293c:	1d 82       	std	Y+5, r1	; 0x05
    293e:	49 c0       	rjmp	.+146    	; 0x29d2 <GPIO_readPin+0x126>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB, pin_num))
    2940:	e6 e3       	ldi	r30, 0x36	; 54
    2942:	f0 e0       	ldi	r31, 0x00	; 0
    2944:	80 81       	ld	r24, Z
    2946:	28 2f       	mov	r18, r24
    2948:	30 e0       	ldi	r19, 0x00	; 0
    294a:	8a 81       	ldd	r24, Y+2	; 0x02
    294c:	88 2f       	mov	r24, r24
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	a9 01       	movw	r20, r18
    2952:	02 c0       	rjmp	.+4      	; 0x2958 <GPIO_readPin+0xac>
    2954:	55 95       	asr	r21
    2956:	47 95       	ror	r20
    2958:	8a 95       	dec	r24
    295a:	e2 f7       	brpl	.-8      	; 0x2954 <GPIO_readPin+0xa8>
    295c:	ca 01       	movw	r24, r20
    295e:	81 70       	andi	r24, 0x01	; 1
    2960:	90 70       	andi	r25, 0x00	; 0
    2962:	88 23       	and	r24, r24
    2964:	19 f0       	breq	.+6      	; 0x296c <GPIO_readPin+0xc0>
			{
				return LOGIC_HIGH;
    2966:	51 e0       	ldi	r21, 0x01	; 1
    2968:	5d 83       	std	Y+5, r21	; 0x05
    296a:	33 c0       	rjmp	.+102    	; 0x29d2 <GPIO_readPin+0x126>
			}
			else
			{
				return LOGIC_LOW;
    296c:	1d 82       	std	Y+5, r1	; 0x05
    296e:	31 c0       	rjmp	.+98     	; 0x29d2 <GPIO_readPin+0x126>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC, pin_num))
    2970:	e3 e3       	ldi	r30, 0x33	; 51
    2972:	f0 e0       	ldi	r31, 0x00	; 0
    2974:	80 81       	ld	r24, Z
    2976:	28 2f       	mov	r18, r24
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	8a 81       	ldd	r24, Y+2	; 0x02
    297c:	88 2f       	mov	r24, r24
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	a9 01       	movw	r20, r18
    2982:	02 c0       	rjmp	.+4      	; 0x2988 <GPIO_readPin+0xdc>
    2984:	55 95       	asr	r21
    2986:	47 95       	ror	r20
    2988:	8a 95       	dec	r24
    298a:	e2 f7       	brpl	.-8      	; 0x2984 <GPIO_readPin+0xd8>
    298c:	ca 01       	movw	r24, r20
    298e:	81 70       	andi	r24, 0x01	; 1
    2990:	90 70       	andi	r25, 0x00	; 0
    2992:	88 23       	and	r24, r24
    2994:	19 f0       	breq	.+6      	; 0x299c <GPIO_readPin+0xf0>
			{
				return LOGIC_HIGH;
    2996:	51 e0       	ldi	r21, 0x01	; 1
    2998:	5d 83       	std	Y+5, r21	; 0x05
    299a:	1b c0       	rjmp	.+54     	; 0x29d2 <GPIO_readPin+0x126>
			}
			else
			{
				return LOGIC_LOW;
    299c:	1d 82       	std	Y+5, r1	; 0x05
    299e:	19 c0       	rjmp	.+50     	; 0x29d2 <GPIO_readPin+0x126>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND, pin_num))
    29a0:	e0 e3       	ldi	r30, 0x30	; 48
    29a2:	f0 e0       	ldi	r31, 0x00	; 0
    29a4:	80 81       	ld	r24, Z
    29a6:	28 2f       	mov	r18, r24
    29a8:	30 e0       	ldi	r19, 0x00	; 0
    29aa:	8a 81       	ldd	r24, Y+2	; 0x02
    29ac:	88 2f       	mov	r24, r24
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	a9 01       	movw	r20, r18
    29b2:	02 c0       	rjmp	.+4      	; 0x29b8 <GPIO_readPin+0x10c>
    29b4:	55 95       	asr	r21
    29b6:	47 95       	ror	r20
    29b8:	8a 95       	dec	r24
    29ba:	e2 f7       	brpl	.-8      	; 0x29b4 <GPIO_readPin+0x108>
    29bc:	ca 01       	movw	r24, r20
    29be:	81 70       	andi	r24, 0x01	; 1
    29c0:	90 70       	andi	r25, 0x00	; 0
    29c2:	88 23       	and	r24, r24
    29c4:	19 f0       	breq	.+6      	; 0x29cc <GPIO_readPin+0x120>
			{
				return LOGIC_HIGH;
    29c6:	51 e0       	ldi	r21, 0x01	; 1
    29c8:	5d 83       	std	Y+5, r21	; 0x05
    29ca:	03 c0       	rjmp	.+6      	; 0x29d2 <GPIO_readPin+0x126>
			}
			else
			{
				return LOGIC_LOW;
    29cc:	1d 82       	std	Y+5, r1	; 0x05
    29ce:	01 c0       	rjmp	.+2      	; 0x29d2 <GPIO_readPin+0x126>
    29d0:	02 c0       	rjmp	.+4      	; 0x29d6 <GPIO_readPin+0x12a>
			}
			break;
		}
	}
}
    29d2:	8d 81       	ldd	r24, Y+5	; 0x05
    29d4:	8e 83       	std	Y+6, r24	; 0x06
    29d6:	8e 81       	ldd	r24, Y+6	; 0x06
    29d8:	26 96       	adiw	r28, 0x06	; 6
    29da:	0f b6       	in	r0, 0x3f	; 63
    29dc:	f8 94       	cli
    29de:	de bf       	out	0x3e, r29	; 62
    29e0:	0f be       	out	0x3f, r0	; 63
    29e2:	cd bf       	out	0x3d, r28	; 61
    29e4:	cf 91       	pop	r28
    29e6:	df 91       	pop	r29
    29e8:	08 95       	ret

000029ea <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    29ea:	df 93       	push	r29
    29ec:	cf 93       	push	r28
    29ee:	00 d0       	rcall	.+0      	; 0x29f0 <GPIO_setupPortDirection+0x6>
    29f0:	00 d0       	rcall	.+0      	; 0x29f2 <GPIO_setupPortDirection+0x8>
    29f2:	cd b7       	in	r28, 0x3d	; 61
    29f4:	de b7       	in	r29, 0x3e	; 62
    29f6:	89 83       	std	Y+1, r24	; 0x01
    29f8:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    29fa:	89 81       	ldd	r24, Y+1	; 0x01
    29fc:	84 30       	cpi	r24, 0x04	; 4
    29fe:	90 f5       	brcc	.+100    	; 0x2a64 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2a00:	89 81       	ldd	r24, Y+1	; 0x01
    2a02:	28 2f       	mov	r18, r24
    2a04:	30 e0       	ldi	r19, 0x00	; 0
    2a06:	3c 83       	std	Y+4, r19	; 0x04
    2a08:	2b 83       	std	Y+3, r18	; 0x03
    2a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a0e:	81 30       	cpi	r24, 0x01	; 1
    2a10:	91 05       	cpc	r25, r1
    2a12:	d1 f0       	breq	.+52     	; 0x2a48 <GPIO_setupPortDirection+0x5e>
    2a14:	2b 81       	ldd	r18, Y+3	; 0x03
    2a16:	3c 81       	ldd	r19, Y+4	; 0x04
    2a18:	22 30       	cpi	r18, 0x02	; 2
    2a1a:	31 05       	cpc	r19, r1
    2a1c:	2c f4       	brge	.+10     	; 0x2a28 <GPIO_setupPortDirection+0x3e>
    2a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a20:	9c 81       	ldd	r25, Y+4	; 0x04
    2a22:	00 97       	sbiw	r24, 0x00	; 0
    2a24:	61 f0       	breq	.+24     	; 0x2a3e <GPIO_setupPortDirection+0x54>
    2a26:	1e c0       	rjmp	.+60     	; 0x2a64 <GPIO_setupPortDirection+0x7a>
    2a28:	2b 81       	ldd	r18, Y+3	; 0x03
    2a2a:	3c 81       	ldd	r19, Y+4	; 0x04
    2a2c:	22 30       	cpi	r18, 0x02	; 2
    2a2e:	31 05       	cpc	r19, r1
    2a30:	81 f0       	breq	.+32     	; 0x2a52 <GPIO_setupPortDirection+0x68>
    2a32:	8b 81       	ldd	r24, Y+3	; 0x03
    2a34:	9c 81       	ldd	r25, Y+4	; 0x04
    2a36:	83 30       	cpi	r24, 0x03	; 3
    2a38:	91 05       	cpc	r25, r1
    2a3a:	81 f0       	breq	.+32     	; 0x2a5c <GPIO_setupPortDirection+0x72>
    2a3c:	13 c0       	rjmp	.+38     	; 0x2a64 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2a3e:	ea e3       	ldi	r30, 0x3A	; 58
    2a40:	f0 e0       	ldi	r31, 0x00	; 0
    2a42:	8a 81       	ldd	r24, Y+2	; 0x02
    2a44:	80 83       	st	Z, r24
    2a46:	0e c0       	rjmp	.+28     	; 0x2a64 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2a48:	e7 e3       	ldi	r30, 0x37	; 55
    2a4a:	f0 e0       	ldi	r31, 0x00	; 0
    2a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a4e:	80 83       	st	Z, r24
    2a50:	09 c0       	rjmp	.+18     	; 0x2a64 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2a52:	e4 e3       	ldi	r30, 0x34	; 52
    2a54:	f0 e0       	ldi	r31, 0x00	; 0
    2a56:	8a 81       	ldd	r24, Y+2	; 0x02
    2a58:	80 83       	st	Z, r24
    2a5a:	04 c0       	rjmp	.+8      	; 0x2a64 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2a5c:	e1 e3       	ldi	r30, 0x31	; 49
    2a5e:	f0 e0       	ldi	r31, 0x00	; 0
    2a60:	8a 81       	ldd	r24, Y+2	; 0x02
    2a62:	80 83       	st	Z, r24
			break;
		}
	}
}
    2a64:	0f 90       	pop	r0
    2a66:	0f 90       	pop	r0
    2a68:	0f 90       	pop	r0
    2a6a:	0f 90       	pop	r0
    2a6c:	cf 91       	pop	r28
    2a6e:	df 91       	pop	r29
    2a70:	08 95       	ret

00002a72 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2a72:	df 93       	push	r29
    2a74:	cf 93       	push	r28
    2a76:	00 d0       	rcall	.+0      	; 0x2a78 <GPIO_writePort+0x6>
    2a78:	00 d0       	rcall	.+0      	; 0x2a7a <GPIO_writePort+0x8>
    2a7a:	cd b7       	in	r28, 0x3d	; 61
    2a7c:	de b7       	in	r29, 0x3e	; 62
    2a7e:	89 83       	std	Y+1, r24	; 0x01
    2a80:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((port_num >= NUM_OF_PORTS))
    2a82:	89 81       	ldd	r24, Y+1	; 0x01
    2a84:	84 30       	cpi	r24, 0x04	; 4
    2a86:	90 f5       	brcc	.+100    	; 0x2aec <GPIO_writePort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch (port_num)
    2a88:	89 81       	ldd	r24, Y+1	; 0x01
    2a8a:	28 2f       	mov	r18, r24
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
    2a8e:	3c 83       	std	Y+4, r19	; 0x04
    2a90:	2b 83       	std	Y+3, r18	; 0x03
    2a92:	8b 81       	ldd	r24, Y+3	; 0x03
    2a94:	9c 81       	ldd	r25, Y+4	; 0x04
    2a96:	81 30       	cpi	r24, 0x01	; 1
    2a98:	91 05       	cpc	r25, r1
    2a9a:	d1 f0       	breq	.+52     	; 0x2ad0 <GPIO_writePort+0x5e>
    2a9c:	2b 81       	ldd	r18, Y+3	; 0x03
    2a9e:	3c 81       	ldd	r19, Y+4	; 0x04
    2aa0:	22 30       	cpi	r18, 0x02	; 2
    2aa2:	31 05       	cpc	r19, r1
    2aa4:	2c f4       	brge	.+10     	; 0x2ab0 <GPIO_writePort+0x3e>
    2aa6:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa8:	9c 81       	ldd	r25, Y+4	; 0x04
    2aaa:	00 97       	sbiw	r24, 0x00	; 0
    2aac:	61 f0       	breq	.+24     	; 0x2ac6 <GPIO_writePort+0x54>
    2aae:	1e c0       	rjmp	.+60     	; 0x2aec <GPIO_writePort+0x7a>
    2ab0:	2b 81       	ldd	r18, Y+3	; 0x03
    2ab2:	3c 81       	ldd	r19, Y+4	; 0x04
    2ab4:	22 30       	cpi	r18, 0x02	; 2
    2ab6:	31 05       	cpc	r19, r1
    2ab8:	81 f0       	breq	.+32     	; 0x2ada <GPIO_writePort+0x68>
    2aba:	8b 81       	ldd	r24, Y+3	; 0x03
    2abc:	9c 81       	ldd	r25, Y+4	; 0x04
    2abe:	83 30       	cpi	r24, 0x03	; 3
    2ac0:	91 05       	cpc	r25, r1
    2ac2:	81 f0       	breq	.+32     	; 0x2ae4 <GPIO_writePort+0x72>
    2ac4:	13 c0       	rjmp	.+38     	; 0x2aec <GPIO_writePort+0x7a>
		{
			case PORTA_ID:
				PORTA = value;
    2ac6:	eb e3       	ldi	r30, 0x3B	; 59
    2ac8:	f0 e0       	ldi	r31, 0x00	; 0
    2aca:	8a 81       	ldd	r24, Y+2	; 0x02
    2acc:	80 83       	st	Z, r24
    2ace:	0e c0       	rjmp	.+28     	; 0x2aec <GPIO_writePort+0x7a>
				break;
			case PORTB_ID:
				PORTB = value;
    2ad0:	e8 e3       	ldi	r30, 0x38	; 56
    2ad2:	f0 e0       	ldi	r31, 0x00	; 0
    2ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad6:	80 83       	st	Z, r24
    2ad8:	09 c0       	rjmp	.+18     	; 0x2aec <GPIO_writePort+0x7a>
				break;
			case PORTC_ID:
				PORTC = value;
    2ada:	e5 e3       	ldi	r30, 0x35	; 53
    2adc:	f0 e0       	ldi	r31, 0x00	; 0
    2ade:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae0:	80 83       	st	Z, r24
    2ae2:	04 c0       	rjmp	.+8      	; 0x2aec <GPIO_writePort+0x7a>
				break;
			case PORTD_ID:
				PORTD = value;
    2ae4:	e2 e3       	ldi	r30, 0x32	; 50
    2ae6:	f0 e0       	ldi	r31, 0x00	; 0
    2ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aea:	80 83       	st	Z, r24
				break;
		}
	}
}
    2aec:	0f 90       	pop	r0
    2aee:	0f 90       	pop	r0
    2af0:	0f 90       	pop	r0
    2af2:	0f 90       	pop	r0
    2af4:	cf 91       	pop	r28
    2af6:	df 91       	pop	r29
    2af8:	08 95       	ret

00002afa <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2afa:	df 93       	push	r29
    2afc:	cf 93       	push	r28
    2afe:	00 d0       	rcall	.+0      	; 0x2b00 <GPIO_readPort+0x6>
    2b00:	00 d0       	rcall	.+0      	; 0x2b02 <GPIO_readPort+0x8>
    2b02:	0f 92       	push	r0
    2b04:	cd b7       	in	r28, 0x3d	; 61
    2b06:	de b7       	in	r29, 0x3e	; 62
    2b08:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((port_num >= NUM_OF_PORTS))
    2b0a:	89 81       	ldd	r24, Y+1	; 0x01
    2b0c:	84 30       	cpi	r24, 0x04	; 4
    2b0e:	10 f0       	brcs	.+4      	; 0x2b14 <GPIO_readPort+0x1a>
	{
		return LOGIC_LOW;
    2b10:	1c 82       	std	Y+4, r1	; 0x04
    2b12:	34 c0       	rjmp	.+104    	; 0x2b7c <GPIO_readPort+0x82>
	}
	else
	{
		switch (port_num)
    2b14:	89 81       	ldd	r24, Y+1	; 0x01
    2b16:	28 2f       	mov	r18, r24
    2b18:	30 e0       	ldi	r19, 0x00	; 0
    2b1a:	3b 83       	std	Y+3, r19	; 0x03
    2b1c:	2a 83       	std	Y+2, r18	; 0x02
    2b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b20:	9b 81       	ldd	r25, Y+3	; 0x03
    2b22:	81 30       	cpi	r24, 0x01	; 1
    2b24:	91 05       	cpc	r25, r1
    2b26:	d1 f0       	breq	.+52     	; 0x2b5c <GPIO_readPort+0x62>
    2b28:	2a 81       	ldd	r18, Y+2	; 0x02
    2b2a:	3b 81       	ldd	r19, Y+3	; 0x03
    2b2c:	22 30       	cpi	r18, 0x02	; 2
    2b2e:	31 05       	cpc	r19, r1
    2b30:	2c f4       	brge	.+10     	; 0x2b3c <GPIO_readPort+0x42>
    2b32:	8a 81       	ldd	r24, Y+2	; 0x02
    2b34:	9b 81       	ldd	r25, Y+3	; 0x03
    2b36:	00 97       	sbiw	r24, 0x00	; 0
    2b38:	61 f0       	breq	.+24     	; 0x2b52 <GPIO_readPort+0x58>
    2b3a:	1f c0       	rjmp	.+62     	; 0x2b7a <GPIO_readPort+0x80>
    2b3c:	2a 81       	ldd	r18, Y+2	; 0x02
    2b3e:	3b 81       	ldd	r19, Y+3	; 0x03
    2b40:	22 30       	cpi	r18, 0x02	; 2
    2b42:	31 05       	cpc	r19, r1
    2b44:	81 f0       	breq	.+32     	; 0x2b66 <GPIO_readPort+0x6c>
    2b46:	8a 81       	ldd	r24, Y+2	; 0x02
    2b48:	9b 81       	ldd	r25, Y+3	; 0x03
    2b4a:	83 30       	cpi	r24, 0x03	; 3
    2b4c:	91 05       	cpc	r25, r1
    2b4e:	81 f0       	breq	.+32     	; 0x2b70 <GPIO_readPort+0x76>
    2b50:	14 c0       	rjmp	.+40     	; 0x2b7a <GPIO_readPort+0x80>
		{
			case PORTA_ID:
				return PINA;
    2b52:	e9 e3       	ldi	r30, 0x39	; 57
    2b54:	f0 e0       	ldi	r31, 0x00	; 0
    2b56:	90 81       	ld	r25, Z
    2b58:	9c 83       	std	Y+4, r25	; 0x04
    2b5a:	10 c0       	rjmp	.+32     	; 0x2b7c <GPIO_readPort+0x82>
				break;
			case PORTB_ID:
				return PINB;
    2b5c:	e6 e3       	ldi	r30, 0x36	; 54
    2b5e:	f0 e0       	ldi	r31, 0x00	; 0
    2b60:	20 81       	ld	r18, Z
    2b62:	2c 83       	std	Y+4, r18	; 0x04
    2b64:	0b c0       	rjmp	.+22     	; 0x2b7c <GPIO_readPort+0x82>
				break;
			case PORTC_ID:
				return PINC;
    2b66:	e3 e3       	ldi	r30, 0x33	; 51
    2b68:	f0 e0       	ldi	r31, 0x00	; 0
    2b6a:	30 81       	ld	r19, Z
    2b6c:	3c 83       	std	Y+4, r19	; 0x04
    2b6e:	06 c0       	rjmp	.+12     	; 0x2b7c <GPIO_readPort+0x82>
				break;
			case PORTD_ID:
				return PIND;
    2b70:	e0 e3       	ldi	r30, 0x30	; 48
    2b72:	f0 e0       	ldi	r31, 0x00	; 0
    2b74:	80 81       	ld	r24, Z
    2b76:	8c 83       	std	Y+4, r24	; 0x04
    2b78:	01 c0       	rjmp	.+2      	; 0x2b7c <GPIO_readPort+0x82>
    2b7a:	02 c0       	rjmp	.+4      	; 0x2b80 <GPIO_readPort+0x86>
				break;
		}
	}

}
    2b7c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b7e:	9d 83       	std	Y+5, r25	; 0x05
    2b80:	8d 81       	ldd	r24, Y+5	; 0x05
    2b82:	0f 90       	pop	r0
    2b84:	0f 90       	pop	r0
    2b86:	0f 90       	pop	r0
    2b88:	0f 90       	pop	r0
    2b8a:	0f 90       	pop	r0
    2b8c:	cf 91       	pop	r28
    2b8e:	df 91       	pop	r29
    2b90:	08 95       	ret

00002b92 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    2b92:	df 93       	push	r29
    2b94:	cf 93       	push	r28
    2b96:	cd b7       	in	r28, 0x3d	; 61
    2b98:	de b7       	in	r29, 0x3e	; 62
    2b9a:	60 97       	sbiw	r28, 0x10	; 16
    2b9c:	0f b6       	in	r0, 0x3f	; 63
    2b9e:	f8 94       	cli
    2ba0:	de bf       	out	0x3e, r29	; 62
    2ba2:	0f be       	out	0x3f, r0	; 63
    2ba4:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    2ba6:	81 e0       	ldi	r24, 0x01	; 1
    2ba8:	60 e0       	ldi	r22, 0x00	; 0
    2baa:	40 e0       	ldi	r20, 0x00	; 0
    2bac:	0e 94 80 12 	call	0x2500	; 0x2500 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    2bb0:	81 e0       	ldi	r24, 0x01	; 1
    2bb2:	61 e0       	ldi	r22, 0x01	; 1
    2bb4:	40 e0       	ldi	r20, 0x00	; 0
    2bb6:	0e 94 80 12 	call	0x2500	; 0x2500 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    2bba:	81 e0       	ldi	r24, 0x01	; 1
    2bbc:	62 e0       	ldi	r22, 0x02	; 2
    2bbe:	40 e0       	ldi	r20, 0x00	; 0
    2bc0:	0e 94 80 12 	call	0x2500	; 0x2500 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    2bc4:	81 e0       	ldi	r24, 0x01	; 1
    2bc6:	63 e0       	ldi	r22, 0x03	; 3
    2bc8:	40 e0       	ldi	r20, 0x00	; 0
    2bca:	0e 94 80 12 	call	0x2500	; 0x2500 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    2bce:	81 e0       	ldi	r24, 0x01	; 1
    2bd0:	64 e0       	ldi	r22, 0x04	; 4
    2bd2:	40 e0       	ldi	r20, 0x00	; 0
    2bd4:	0e 94 80 12 	call	0x2500	; 0x2500 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    2bd8:	81 e0       	ldi	r24, 0x01	; 1
    2bda:	65 e0       	ldi	r22, 0x05	; 5
    2bdc:	40 e0       	ldi	r20, 0x00	; 0
    2bde:	0e 94 80 12 	call	0x2500	; 0x2500 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    2be2:	81 e0       	ldi	r24, 0x01	; 1
    2be4:	66 e0       	ldi	r22, 0x06	; 6
    2be6:	40 e0       	ldi	r20, 0x00	; 0
    2be8:	0e 94 80 12 	call	0x2500	; 0x2500 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	67 e0       	ldi	r22, 0x07	; 7
    2bf0:	40 e0       	ldi	r20, 0x00	; 0
    2bf2:	0e 94 80 12 	call	0x2500	; 0x2500 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2bf6:	1f 86       	std	Y+15, r1	; 0x0f
    2bf8:	ab c0       	rjmp	.+342    	; 0x2d50 <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    2bfa:	81 e0       	ldi	r24, 0x01	; 1
    2bfc:	6f 85       	ldd	r22, Y+15	; 0x0f
    2bfe:	41 e0       	ldi	r20, 0x01	; 1
    2c00:	0e 94 80 12 	call	0x2500	; 0x2500 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    2c04:	81 e0       	ldi	r24, 0x01	; 1
    2c06:	6f 85       	ldd	r22, Y+15	; 0x0f
    2c08:	40 e0       	ldi	r20, 0x00	; 0
    2c0a:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2c0e:	18 8a       	std	Y+16, r1	; 0x10
    2c10:	22 c0       	rjmp	.+68     	; 0x2c56 <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    2c12:	88 89       	ldd	r24, Y+16	; 0x10
    2c14:	98 2f       	mov	r25, r24
    2c16:	9c 5f       	subi	r25, 0xFC	; 252
    2c18:	81 e0       	ldi	r24, 0x01	; 1
    2c1a:	69 2f       	mov	r22, r25
    2c1c:	0e 94 56 14 	call	0x28ac	; 0x28ac <GPIO_readPin>
    2c20:	88 23       	and	r24, r24
    2c22:	b1 f4       	brne	.+44     	; 0x2c50 <KEYPAD_getPressedKey+0xbe>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2c24:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c26:	88 2f       	mov	r24, r24
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	88 0f       	add	r24, r24
    2c2c:	99 1f       	adc	r25, r25
    2c2e:	88 0f       	add	r24, r24
    2c30:	99 1f       	adc	r25, r25
    2c32:	98 2f       	mov	r25, r24
    2c34:	88 89       	ldd	r24, Y+16	; 0x10
    2c36:	89 0f       	add	r24, r25
    2c38:	8f 5f       	subi	r24, 0xFF	; 255
    2c3a:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(10); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    2c3e:	60 96       	adiw	r28, 0x10	; 16
    2c40:	0f b6       	in	r0, 0x3f	; 63
    2c42:	f8 94       	cli
    2c44:	de bf       	out	0x3e, r29	; 62
    2c46:	0f be       	out	0x3f, r0	; 63
    2c48:	cd bf       	out	0x3d, r28	; 61
    2c4a:	cf 91       	pop	r28
    2c4c:	df 91       	pop	r29
    2c4e:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2c50:	88 89       	ldd	r24, Y+16	; 0x10
    2c52:	8f 5f       	subi	r24, 0xFF	; 255
    2c54:	88 8b       	std	Y+16, r24	; 0x10
    2c56:	88 89       	ldd	r24, Y+16	; 0x10
    2c58:	84 30       	cpi	r24, 0x04	; 4
    2c5a:	d8 f2       	brcs	.-74     	; 0x2c12 <KEYPAD_getPressedKey+0x80>
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    2c5c:	81 e0       	ldi	r24, 0x01	; 1
    2c5e:	6f 85       	ldd	r22, Y+15	; 0x0f
    2c60:	40 e0       	ldi	r20, 0x00	; 0
    2c62:	0e 94 80 12 	call	0x2500	; 0x2500 <GPIO_setupPinDirection>
    2c66:	80 e0       	ldi	r24, 0x00	; 0
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	a0 e2       	ldi	r26, 0x20	; 32
    2c6c:	b1 e4       	ldi	r27, 0x41	; 65
    2c6e:	8b 87       	std	Y+11, r24	; 0x0b
    2c70:	9c 87       	std	Y+12, r25	; 0x0c
    2c72:	ad 87       	std	Y+13, r26	; 0x0d
    2c74:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c76:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c78:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c7e:	20 e0       	ldi	r18, 0x00	; 0
    2c80:	30 e0       	ldi	r19, 0x00	; 0
    2c82:	4a ef       	ldi	r20, 0xFA	; 250
    2c84:	54 e4       	ldi	r21, 0x44	; 68
    2c86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c8a:	dc 01       	movw	r26, r24
    2c8c:	cb 01       	movw	r24, r22
    2c8e:	8f 83       	std	Y+7, r24	; 0x07
    2c90:	98 87       	std	Y+8, r25	; 0x08
    2c92:	a9 87       	std	Y+9, r26	; 0x09
    2c94:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c96:	6f 81       	ldd	r22, Y+7	; 0x07
    2c98:	78 85       	ldd	r23, Y+8	; 0x08
    2c9a:	89 85       	ldd	r24, Y+9	; 0x09
    2c9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c9e:	20 e0       	ldi	r18, 0x00	; 0
    2ca0:	30 e0       	ldi	r19, 0x00	; 0
    2ca2:	40 e8       	ldi	r20, 0x80	; 128
    2ca4:	5f e3       	ldi	r21, 0x3F	; 63
    2ca6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2caa:	88 23       	and	r24, r24
    2cac:	2c f4       	brge	.+10     	; 0x2cb8 <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    2cae:	81 e0       	ldi	r24, 0x01	; 1
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	9e 83       	std	Y+6, r25	; 0x06
    2cb4:	8d 83       	std	Y+5, r24	; 0x05
    2cb6:	3f c0       	rjmp	.+126    	; 0x2d36 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    2cb8:	6f 81       	ldd	r22, Y+7	; 0x07
    2cba:	78 85       	ldd	r23, Y+8	; 0x08
    2cbc:	89 85       	ldd	r24, Y+9	; 0x09
    2cbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cc0:	20 e0       	ldi	r18, 0x00	; 0
    2cc2:	3f ef       	ldi	r19, 0xFF	; 255
    2cc4:	4f e7       	ldi	r20, 0x7F	; 127
    2cc6:	57 e4       	ldi	r21, 0x47	; 71
    2cc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ccc:	18 16       	cp	r1, r24
    2cce:	4c f5       	brge	.+82     	; 0x2d22 <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cd8:	20 e0       	ldi	r18, 0x00	; 0
    2cda:	30 e0       	ldi	r19, 0x00	; 0
    2cdc:	40 e2       	ldi	r20, 0x20	; 32
    2cde:	51 e4       	ldi	r21, 0x41	; 65
    2ce0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ce4:	dc 01       	movw	r26, r24
    2ce6:	cb 01       	movw	r24, r22
    2ce8:	bc 01       	movw	r22, r24
    2cea:	cd 01       	movw	r24, r26
    2cec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cf0:	dc 01       	movw	r26, r24
    2cf2:	cb 01       	movw	r24, r22
    2cf4:	9e 83       	std	Y+6, r25	; 0x06
    2cf6:	8d 83       	std	Y+5, r24	; 0x05
    2cf8:	0f c0       	rjmp	.+30     	; 0x2d18 <KEYPAD_getPressedKey+0x186>
    2cfa:	88 ec       	ldi	r24, 0xC8	; 200
    2cfc:	90 e0       	ldi	r25, 0x00	; 0
    2cfe:	9c 83       	std	Y+4, r25	; 0x04
    2d00:	8b 83       	std	Y+3, r24	; 0x03
    2d02:	8b 81       	ldd	r24, Y+3	; 0x03
    2d04:	9c 81       	ldd	r25, Y+4	; 0x04
    2d06:	01 97       	sbiw	r24, 0x01	; 1
    2d08:	f1 f7       	brne	.-4      	; 0x2d06 <KEYPAD_getPressedKey+0x174>
    2d0a:	9c 83       	std	Y+4, r25	; 0x04
    2d0c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d10:	9e 81       	ldd	r25, Y+6	; 0x06
    2d12:	01 97       	sbiw	r24, 0x01	; 1
    2d14:	9e 83       	std	Y+6, r25	; 0x06
    2d16:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d18:	8d 81       	ldd	r24, Y+5	; 0x05
    2d1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d1c:	00 97       	sbiw	r24, 0x00	; 0
    2d1e:	69 f7       	brne	.-38     	; 0x2cfa <KEYPAD_getPressedKey+0x168>
    2d20:	14 c0       	rjmp	.+40     	; 0x2d4a <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d22:	6f 81       	ldd	r22, Y+7	; 0x07
    2d24:	78 85       	ldd	r23, Y+8	; 0x08
    2d26:	89 85       	ldd	r24, Y+9	; 0x09
    2d28:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d2e:	dc 01       	movw	r26, r24
    2d30:	cb 01       	movw	r24, r22
    2d32:	9e 83       	std	Y+6, r25	; 0x06
    2d34:	8d 83       	std	Y+5, r24	; 0x05
    2d36:	8d 81       	ldd	r24, Y+5	; 0x05
    2d38:	9e 81       	ldd	r25, Y+6	; 0x06
    2d3a:	9a 83       	std	Y+2, r25	; 0x02
    2d3c:	89 83       	std	Y+1, r24	; 0x01
    2d3e:	89 81       	ldd	r24, Y+1	; 0x01
    2d40:	9a 81       	ldd	r25, Y+2	; 0x02
    2d42:	01 97       	sbiw	r24, 0x01	; 1
    2d44:	f1 f7       	brne	.-4      	; 0x2d42 <KEYPAD_getPressedKey+0x1b0>
    2d46:	9a 83       	std	Y+2, r25	; 0x02
    2d48:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2d4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d4c:	8f 5f       	subi	r24, 0xFF	; 255
    2d4e:	8f 87       	std	Y+15, r24	; 0x0f
    2d50:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d52:	84 30       	cpi	r24, 0x04	; 4
    2d54:	08 f4       	brcc	.+2      	; 0x2d58 <KEYPAD_getPressedKey+0x1c6>
    2d56:	51 cf       	rjmp	.-350    	; 0x2bfa <KEYPAD_getPressedKey+0x68>
    2d58:	4e cf       	rjmp	.-356    	; 0x2bf6 <KEYPAD_getPressedKey+0x64>

00002d5a <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2d5a:	df 93       	push	r29
    2d5c:	cf 93       	push	r28
    2d5e:	00 d0       	rcall	.+0      	; 0x2d60 <KEYPAD_4x4_adjustKeyNumber+0x6>
    2d60:	00 d0       	rcall	.+0      	; 0x2d62 <KEYPAD_4x4_adjustKeyNumber+0x8>
    2d62:	cd b7       	in	r28, 0x3d	; 61
    2d64:	de b7       	in	r29, 0x3e	; 62
    2d66:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2d68:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2d6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d6c:	28 2f       	mov	r18, r24
    2d6e:	30 e0       	ldi	r19, 0x00	; 0
    2d70:	3c 83       	std	Y+4, r19	; 0x04
    2d72:	2b 83       	std	Y+3, r18	; 0x03
    2d74:	8b 81       	ldd	r24, Y+3	; 0x03
    2d76:	9c 81       	ldd	r25, Y+4	; 0x04
    2d78:	88 30       	cpi	r24, 0x08	; 8
    2d7a:	91 05       	cpc	r25, r1
    2d7c:	09 f4       	brne	.+2      	; 0x2d80 <KEYPAD_4x4_adjustKeyNumber+0x26>
    2d7e:	70 c0       	rjmp	.+224    	; 0x2e60 <KEYPAD_4x4_adjustKeyNumber+0x106>
    2d80:	2b 81       	ldd	r18, Y+3	; 0x03
    2d82:	3c 81       	ldd	r19, Y+4	; 0x04
    2d84:	29 30       	cpi	r18, 0x09	; 9
    2d86:	31 05       	cpc	r19, r1
    2d88:	5c f5       	brge	.+86     	; 0x2de0 <KEYPAD_4x4_adjustKeyNumber+0x86>
    2d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d8e:	84 30       	cpi	r24, 0x04	; 4
    2d90:	91 05       	cpc	r25, r1
    2d92:	09 f4       	brne	.+2      	; 0x2d96 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2d94:	59 c0       	rjmp	.+178    	; 0x2e48 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2d96:	2b 81       	ldd	r18, Y+3	; 0x03
    2d98:	3c 81       	ldd	r19, Y+4	; 0x04
    2d9a:	25 30       	cpi	r18, 0x05	; 5
    2d9c:	31 05       	cpc	r19, r1
    2d9e:	9c f4       	brge	.+38     	; 0x2dc6 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2da0:	8b 81       	ldd	r24, Y+3	; 0x03
    2da2:	9c 81       	ldd	r25, Y+4	; 0x04
    2da4:	82 30       	cpi	r24, 0x02	; 2
    2da6:	91 05       	cpc	r25, r1
    2da8:	09 f4       	brne	.+2      	; 0x2dac <KEYPAD_4x4_adjustKeyNumber+0x52>
    2daa:	48 c0       	rjmp	.+144    	; 0x2e3c <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2dac:	2b 81       	ldd	r18, Y+3	; 0x03
    2dae:	3c 81       	ldd	r19, Y+4	; 0x04
    2db0:	23 30       	cpi	r18, 0x03	; 3
    2db2:	31 05       	cpc	r19, r1
    2db4:	0c f0       	brlt	.+2      	; 0x2db8 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2db6:	45 c0       	rjmp	.+138    	; 0x2e42 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2db8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dba:	9c 81       	ldd	r25, Y+4	; 0x04
    2dbc:	81 30       	cpi	r24, 0x01	; 1
    2dbe:	91 05       	cpc	r25, r1
    2dc0:	09 f4       	brne	.+2      	; 0x2dc4 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2dc2:	39 c0       	rjmp	.+114    	; 0x2e36 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2dc4:	67 c0       	rjmp	.+206    	; 0x2e94 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2dc6:	2b 81       	ldd	r18, Y+3	; 0x03
    2dc8:	3c 81       	ldd	r19, Y+4	; 0x04
    2dca:	26 30       	cpi	r18, 0x06	; 6
    2dcc:	31 05       	cpc	r19, r1
    2dce:	09 f4       	brne	.+2      	; 0x2dd2 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2dd0:	41 c0       	rjmp	.+130    	; 0x2e54 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd4:	9c 81       	ldd	r25, Y+4	; 0x04
    2dd6:	87 30       	cpi	r24, 0x07	; 7
    2dd8:	91 05       	cpc	r25, r1
    2dda:	0c f0       	brlt	.+2      	; 0x2dde <KEYPAD_4x4_adjustKeyNumber+0x84>
    2ddc:	3e c0       	rjmp	.+124    	; 0x2e5a <KEYPAD_4x4_adjustKeyNumber+0x100>
    2dde:	37 c0       	rjmp	.+110    	; 0x2e4e <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2de0:	2b 81       	ldd	r18, Y+3	; 0x03
    2de2:	3c 81       	ldd	r19, Y+4	; 0x04
    2de4:	2c 30       	cpi	r18, 0x0C	; 12
    2de6:	31 05       	cpc	r19, r1
    2de8:	09 f4       	brne	.+2      	; 0x2dec <KEYPAD_4x4_adjustKeyNumber+0x92>
    2dea:	46 c0       	rjmp	.+140    	; 0x2e78 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2dec:	8b 81       	ldd	r24, Y+3	; 0x03
    2dee:	9c 81       	ldd	r25, Y+4	; 0x04
    2df0:	8d 30       	cpi	r24, 0x0D	; 13
    2df2:	91 05       	cpc	r25, r1
    2df4:	5c f4       	brge	.+22     	; 0x2e0c <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2df6:	2b 81       	ldd	r18, Y+3	; 0x03
    2df8:	3c 81       	ldd	r19, Y+4	; 0x04
    2dfa:	2a 30       	cpi	r18, 0x0A	; 10
    2dfc:	31 05       	cpc	r19, r1
    2dfe:	b1 f1       	breq	.+108    	; 0x2e6c <KEYPAD_4x4_adjustKeyNumber+0x112>
    2e00:	8b 81       	ldd	r24, Y+3	; 0x03
    2e02:	9c 81       	ldd	r25, Y+4	; 0x04
    2e04:	8b 30       	cpi	r24, 0x0B	; 11
    2e06:	91 05       	cpc	r25, r1
    2e08:	a4 f5       	brge	.+104    	; 0x2e72 <KEYPAD_4x4_adjustKeyNumber+0x118>
    2e0a:	2d c0       	rjmp	.+90     	; 0x2e66 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2e0c:	2b 81       	ldd	r18, Y+3	; 0x03
    2e0e:	3c 81       	ldd	r19, Y+4	; 0x04
    2e10:	2e 30       	cpi	r18, 0x0E	; 14
    2e12:	31 05       	cpc	r19, r1
    2e14:	b9 f1       	breq	.+110    	; 0x2e84 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2e16:	8b 81       	ldd	r24, Y+3	; 0x03
    2e18:	9c 81       	ldd	r25, Y+4	; 0x04
    2e1a:	8e 30       	cpi	r24, 0x0E	; 14
    2e1c:	91 05       	cpc	r25, r1
    2e1e:	7c f1       	brlt	.+94     	; 0x2e7e <KEYPAD_4x4_adjustKeyNumber+0x124>
    2e20:	2b 81       	ldd	r18, Y+3	; 0x03
    2e22:	3c 81       	ldd	r19, Y+4	; 0x04
    2e24:	2f 30       	cpi	r18, 0x0F	; 15
    2e26:	31 05       	cpc	r19, r1
    2e28:	79 f1       	breq	.+94     	; 0x2e88 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e2c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e2e:	80 31       	cpi	r24, 0x10	; 16
    2e30:	91 05       	cpc	r25, r1
    2e32:	69 f1       	breq	.+90     	; 0x2e8e <KEYPAD_4x4_adjustKeyNumber+0x134>
    2e34:	2f c0       	rjmp	.+94     	; 0x2e94 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2e36:	87 e0       	ldi	r24, 0x07	; 7
    2e38:	89 83       	std	Y+1, r24	; 0x01
    2e3a:	2e c0       	rjmp	.+92     	; 0x2e98 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2e3c:	88 e0       	ldi	r24, 0x08	; 8
    2e3e:	89 83       	std	Y+1, r24	; 0x01
    2e40:	2b c0       	rjmp	.+86     	; 0x2e98 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    2e42:	89 e0       	ldi	r24, 0x09	; 9
    2e44:	89 83       	std	Y+1, r24	; 0x01
    2e46:	28 c0       	rjmp	.+80     	; 0x2e98 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2e48:	85 e2       	ldi	r24, 0x25	; 37
    2e4a:	89 83       	std	Y+1, r24	; 0x01
    2e4c:	25 c0       	rjmp	.+74     	; 0x2e98 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2e4e:	84 e0       	ldi	r24, 0x04	; 4
    2e50:	89 83       	std	Y+1, r24	; 0x01
    2e52:	22 c0       	rjmp	.+68     	; 0x2e98 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2e54:	85 e0       	ldi	r24, 0x05	; 5
    2e56:	89 83       	std	Y+1, r24	; 0x01
    2e58:	1f c0       	rjmp	.+62     	; 0x2e98 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2e5a:	86 e0       	ldi	r24, 0x06	; 6
    2e5c:	89 83       	std	Y+1, r24	; 0x01
    2e5e:	1c c0       	rjmp	.+56     	; 0x2e98 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2e60:	8a e2       	ldi	r24, 0x2A	; 42
    2e62:	89 83       	std	Y+1, r24	; 0x01
    2e64:	19 c0       	rjmp	.+50     	; 0x2e98 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    2e66:	81 e0       	ldi	r24, 0x01	; 1
    2e68:	89 83       	std	Y+1, r24	; 0x01
    2e6a:	16 c0       	rjmp	.+44     	; 0x2e98 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2e6c:	82 e0       	ldi	r24, 0x02	; 2
    2e6e:	89 83       	std	Y+1, r24	; 0x01
    2e70:	13 c0       	rjmp	.+38     	; 0x2e98 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    2e72:	83 e0       	ldi	r24, 0x03	; 3
    2e74:	89 83       	std	Y+1, r24	; 0x01
    2e76:	10 c0       	rjmp	.+32     	; 0x2e98 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2e78:	8d e2       	ldi	r24, 0x2D	; 45
    2e7a:	89 83       	std	Y+1, r24	; 0x01
    2e7c:	0d c0       	rjmp	.+26     	; 0x2e98 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2e7e:	8d e0       	ldi	r24, 0x0D	; 13
    2e80:	89 83       	std	Y+1, r24	; 0x01
    2e82:	0a c0       	rjmp	.+20     	; 0x2e98 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    2e84:	19 82       	std	Y+1, r1	; 0x01
    2e86:	08 c0       	rjmp	.+16     	; 0x2e98 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2e88:	8d e3       	ldi	r24, 0x3D	; 61
    2e8a:	89 83       	std	Y+1, r24	; 0x01
    2e8c:	05 c0       	rjmp	.+10     	; 0x2e98 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2e8e:	8b e2       	ldi	r24, 0x2B	; 43
    2e90:	89 83       	std	Y+1, r24	; 0x01
    2e92:	02 c0       	rjmp	.+4      	; 0x2e98 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2e94:	8a 81       	ldd	r24, Y+2	; 0x02
    2e96:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2e98:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2e9a:	0f 90       	pop	r0
    2e9c:	0f 90       	pop	r0
    2e9e:	0f 90       	pop	r0
    2ea0:	0f 90       	pop	r0
    2ea2:	cf 91       	pop	r28
    2ea4:	df 91       	pop	r29
    2ea6:	08 95       	ret

00002ea8 <__udivmodsi4>:
    2ea8:	a1 e2       	ldi	r26, 0x21	; 33
    2eaa:	1a 2e       	mov	r1, r26
    2eac:	aa 1b       	sub	r26, r26
    2eae:	bb 1b       	sub	r27, r27
    2eb0:	fd 01       	movw	r30, r26
    2eb2:	0d c0       	rjmp	.+26     	; 0x2ece <__udivmodsi4_ep>

00002eb4 <__udivmodsi4_loop>:
    2eb4:	aa 1f       	adc	r26, r26
    2eb6:	bb 1f       	adc	r27, r27
    2eb8:	ee 1f       	adc	r30, r30
    2eba:	ff 1f       	adc	r31, r31
    2ebc:	a2 17       	cp	r26, r18
    2ebe:	b3 07       	cpc	r27, r19
    2ec0:	e4 07       	cpc	r30, r20
    2ec2:	f5 07       	cpc	r31, r21
    2ec4:	20 f0       	brcs	.+8      	; 0x2ece <__udivmodsi4_ep>
    2ec6:	a2 1b       	sub	r26, r18
    2ec8:	b3 0b       	sbc	r27, r19
    2eca:	e4 0b       	sbc	r30, r20
    2ecc:	f5 0b       	sbc	r31, r21

00002ece <__udivmodsi4_ep>:
    2ece:	66 1f       	adc	r22, r22
    2ed0:	77 1f       	adc	r23, r23
    2ed2:	88 1f       	adc	r24, r24
    2ed4:	99 1f       	adc	r25, r25
    2ed6:	1a 94       	dec	r1
    2ed8:	69 f7       	brne	.-38     	; 0x2eb4 <__udivmodsi4_loop>
    2eda:	60 95       	com	r22
    2edc:	70 95       	com	r23
    2ede:	80 95       	com	r24
    2ee0:	90 95       	com	r25
    2ee2:	9b 01       	movw	r18, r22
    2ee4:	ac 01       	movw	r20, r24
    2ee6:	bd 01       	movw	r22, r26
    2ee8:	cf 01       	movw	r24, r30
    2eea:	08 95       	ret

00002eec <__prologue_saves__>:
    2eec:	2f 92       	push	r2
    2eee:	3f 92       	push	r3
    2ef0:	4f 92       	push	r4
    2ef2:	5f 92       	push	r5
    2ef4:	6f 92       	push	r6
    2ef6:	7f 92       	push	r7
    2ef8:	8f 92       	push	r8
    2efa:	9f 92       	push	r9
    2efc:	af 92       	push	r10
    2efe:	bf 92       	push	r11
    2f00:	cf 92       	push	r12
    2f02:	df 92       	push	r13
    2f04:	ef 92       	push	r14
    2f06:	ff 92       	push	r15
    2f08:	0f 93       	push	r16
    2f0a:	1f 93       	push	r17
    2f0c:	cf 93       	push	r28
    2f0e:	df 93       	push	r29
    2f10:	cd b7       	in	r28, 0x3d	; 61
    2f12:	de b7       	in	r29, 0x3e	; 62
    2f14:	ca 1b       	sub	r28, r26
    2f16:	db 0b       	sbc	r29, r27
    2f18:	0f b6       	in	r0, 0x3f	; 63
    2f1a:	f8 94       	cli
    2f1c:	de bf       	out	0x3e, r29	; 62
    2f1e:	0f be       	out	0x3f, r0	; 63
    2f20:	cd bf       	out	0x3d, r28	; 61
    2f22:	09 94       	ijmp

00002f24 <__epilogue_restores__>:
    2f24:	2a 88       	ldd	r2, Y+18	; 0x12
    2f26:	39 88       	ldd	r3, Y+17	; 0x11
    2f28:	48 88       	ldd	r4, Y+16	; 0x10
    2f2a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f2c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f2e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f30:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f32:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f34:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f36:	b9 84       	ldd	r11, Y+9	; 0x09
    2f38:	c8 84       	ldd	r12, Y+8	; 0x08
    2f3a:	df 80       	ldd	r13, Y+7	; 0x07
    2f3c:	ee 80       	ldd	r14, Y+6	; 0x06
    2f3e:	fd 80       	ldd	r15, Y+5	; 0x05
    2f40:	0c 81       	ldd	r16, Y+4	; 0x04
    2f42:	1b 81       	ldd	r17, Y+3	; 0x03
    2f44:	aa 81       	ldd	r26, Y+2	; 0x02
    2f46:	b9 81       	ldd	r27, Y+1	; 0x01
    2f48:	ce 0f       	add	r28, r30
    2f4a:	d1 1d       	adc	r29, r1
    2f4c:	0f b6       	in	r0, 0x3f	; 63
    2f4e:	f8 94       	cli
    2f50:	de bf       	out	0x3e, r29	; 62
    2f52:	0f be       	out	0x3f, r0	; 63
    2f54:	cd bf       	out	0x3d, r28	; 61
    2f56:	ed 01       	movw	r28, r26
    2f58:	08 95       	ret

00002f5a <itoa>:
    2f5a:	fb 01       	movw	r30, r22
    2f5c:	9f 01       	movw	r18, r30
    2f5e:	e8 94       	clt
    2f60:	42 30       	cpi	r20, 0x02	; 2
    2f62:	c4 f0       	brlt	.+48     	; 0x2f94 <itoa+0x3a>
    2f64:	45 32       	cpi	r20, 0x25	; 37
    2f66:	b4 f4       	brge	.+44     	; 0x2f94 <itoa+0x3a>
    2f68:	4a 30       	cpi	r20, 0x0A	; 10
    2f6a:	29 f4       	brne	.+10     	; 0x2f76 <itoa+0x1c>
    2f6c:	97 fb       	bst	r25, 7
    2f6e:	1e f4       	brtc	.+6      	; 0x2f76 <itoa+0x1c>
    2f70:	90 95       	com	r25
    2f72:	81 95       	neg	r24
    2f74:	9f 4f       	sbci	r25, 0xFF	; 255
    2f76:	64 2f       	mov	r22, r20
    2f78:	77 27       	eor	r23, r23
    2f7a:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <__udivmodhi4>
    2f7e:	80 5d       	subi	r24, 0xD0	; 208
    2f80:	8a 33       	cpi	r24, 0x3A	; 58
    2f82:	0c f0       	brlt	.+2      	; 0x2f86 <itoa+0x2c>
    2f84:	89 5d       	subi	r24, 0xD9	; 217
    2f86:	81 93       	st	Z+, r24
    2f88:	cb 01       	movw	r24, r22
    2f8a:	00 97       	sbiw	r24, 0x00	; 0
    2f8c:	a1 f7       	brne	.-24     	; 0x2f76 <itoa+0x1c>
    2f8e:	16 f4       	brtc	.+4      	; 0x2f94 <itoa+0x3a>
    2f90:	5d e2       	ldi	r21, 0x2D	; 45
    2f92:	51 93       	st	Z+, r21
    2f94:	10 82       	st	Z, r1
    2f96:	c9 01       	movw	r24, r18
    2f98:	0c 94 ce 17 	jmp	0x2f9c	; 0x2f9c <strrev>

00002f9c <strrev>:
    2f9c:	dc 01       	movw	r26, r24
    2f9e:	fc 01       	movw	r30, r24
    2fa0:	67 2f       	mov	r22, r23
    2fa2:	71 91       	ld	r23, Z+
    2fa4:	77 23       	and	r23, r23
    2fa6:	e1 f7       	brne	.-8      	; 0x2fa0 <strrev+0x4>
    2fa8:	32 97       	sbiw	r30, 0x02	; 2
    2faa:	04 c0       	rjmp	.+8      	; 0x2fb4 <strrev+0x18>
    2fac:	7c 91       	ld	r23, X
    2fae:	6d 93       	st	X+, r22
    2fb0:	70 83       	st	Z, r23
    2fb2:	62 91       	ld	r22, -Z
    2fb4:	ae 17       	cp	r26, r30
    2fb6:	bf 07       	cpc	r27, r31
    2fb8:	c8 f3       	brcs	.-14     	; 0x2fac <strrev+0x10>
    2fba:	08 95       	ret

00002fbc <__udivmodhi4>:
    2fbc:	aa 1b       	sub	r26, r26
    2fbe:	bb 1b       	sub	r27, r27
    2fc0:	51 e1       	ldi	r21, 0x11	; 17
    2fc2:	07 c0       	rjmp	.+14     	; 0x2fd2 <__udivmodhi4_ep>

00002fc4 <__udivmodhi4_loop>:
    2fc4:	aa 1f       	adc	r26, r26
    2fc6:	bb 1f       	adc	r27, r27
    2fc8:	a6 17       	cp	r26, r22
    2fca:	b7 07       	cpc	r27, r23
    2fcc:	10 f0       	brcs	.+4      	; 0x2fd2 <__udivmodhi4_ep>
    2fce:	a6 1b       	sub	r26, r22
    2fd0:	b7 0b       	sbc	r27, r23

00002fd2 <__udivmodhi4_ep>:
    2fd2:	88 1f       	adc	r24, r24
    2fd4:	99 1f       	adc	r25, r25
    2fd6:	5a 95       	dec	r21
    2fd8:	a9 f7       	brne	.-22     	; 0x2fc4 <__udivmodhi4_loop>
    2fda:	80 95       	com	r24
    2fdc:	90 95       	com	r25
    2fde:	bc 01       	movw	r22, r24
    2fe0:	cd 01       	movw	r24, r26
    2fe2:	08 95       	ret

00002fe4 <_exit>:
    2fe4:	f8 94       	cli

00002fe6 <__stop_program>:
    2fe6:	ff cf       	rjmp	.-2      	; 0x2fe6 <__stop_program>
